// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orchid.proto

#include "orchid.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace palm {
namespace orchid {
namespace v1 {
PROTOBUF_CONSTEXPR WechatMiniProgramLoginRequest::WechatMiniProgramLoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatMiniProgramLoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatMiniProgramLoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatMiniProgramLoginRequestDefaultTypeInternal() {}
  union {
    WechatMiniProgramLoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatMiniProgramLoginRequestDefaultTypeInternal _WechatMiniProgramLoginRequest_default_instance_;
PROTOBUF_CONSTEXPR WechatMiniProgramLoginResponse::WechatMiniProgramLoginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.openid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatMiniProgramLoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatMiniProgramLoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatMiniProgramLoginResponseDefaultTypeInternal() {}
  union {
    WechatMiniProgramLoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatMiniProgramLoginResponseDefaultTypeInternal _WechatMiniProgramLoginResponse_default_instance_;
PROTOBUF_CONSTEXPR WechatMiniProgramPhoneNumberRequest::WechatMiniProgramPhoneNumberRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatMiniProgramPhoneNumberRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatMiniProgramPhoneNumberRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatMiniProgramPhoneNumberRequestDefaultTypeInternal() {}
  union {
    WechatMiniProgramPhoneNumberRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatMiniProgramPhoneNumberRequestDefaultTypeInternal _WechatMiniProgramPhoneNumberRequest_default_instance_;
PROTOBUF_CONSTEXPR WechatMiniProgramPhoneNumberResponse::WechatMiniProgramPhoneNumberResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.phone_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pure_phone_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.water_mark_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatMiniProgramPhoneNumberResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatMiniProgramPhoneNumberResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatMiniProgramPhoneNumberResponseDefaultTypeInternal() {}
  union {
    WechatMiniProgramPhoneNumberResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatMiniProgramPhoneNumberResponseDefaultTypeInternal _WechatMiniProgramPhoneNumberResponse_default_instance_;
PROTOBUF_CONSTEXPR WechatOauth2QrConnectRequest::WechatOauth2QrConnectRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.redirect_uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatOauth2QrConnectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatOauth2QrConnectRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatOauth2QrConnectRequestDefaultTypeInternal() {}
  union {
    WechatOauth2QrConnectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatOauth2QrConnectRequestDefaultTypeInternal _WechatOauth2QrConnectRequest_default_instance_;
PROTOBUF_CONSTEXPR WechatOauth2QrConnectResponse::WechatOauth2QrConnectResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatOauth2QrConnectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatOauth2QrConnectResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatOauth2QrConnectResponseDefaultTypeInternal() {}
  union {
    WechatOauth2QrConnectResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatOauth2QrConnectResponseDefaultTypeInternal _WechatOauth2QrConnectResponse_default_instance_;
PROTOBUF_CONSTEXPR WechatOauth2LoginResponse::WechatOauth2LoginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.privilege_)*/{}
  , /*decltype(_impl_.unionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.openid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.province_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.city_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.headimgurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sex_)*/0} {}
struct WechatOauth2LoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatOauth2LoginResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatOauth2LoginResponseDefaultTypeInternal() {}
  union {
    WechatOauth2LoginResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatOauth2LoginResponseDefaultTypeInternal _WechatOauth2LoginResponse_default_instance_;
PROTOBUF_CONSTEXPR WechatOauth2LoginRequest::WechatOauth2LoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatOauth2LoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatOauth2LoginRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatOauth2LoginRequestDefaultTypeInternal() {}
  union {
    WechatOauth2LoginRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatOauth2LoginRequestDefaultTypeInternal _WechatOauth2LoginRequest_default_instance_;
}  // namespace v1
}  // namespace orchid
}  // namespace palm
static ::_pb::Metadata file_level_metadata_orchid_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_orchid_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_orchid_2eproto = nullptr;

const uint32_t TableStruct_orchid_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatMiniProgramLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatMiniProgramLoginRequest, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatMiniProgramLoginRequest, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatMiniProgramLoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatMiniProgramLoginResponse, _impl_.unionid_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatMiniProgramLoginResponse, _impl_.openid_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatMiniProgramLoginResponse, _impl_.session_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse, _impl_.phone_number_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse, _impl_.pure_phone_number_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse, _impl_.country_code_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse, _impl_.water_mark_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2QrConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2QrConnectRequest, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2QrConnectRequest, _impl_.redirect_uri_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2QrConnectRequest, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2QrConnectRequest, _impl_.language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2QrConnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2QrConnectResponse, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginResponse, _impl_.unionid_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginResponse, _impl_.openid_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginResponse, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginResponse, _impl_.sex_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginResponse, _impl_.province_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginResponse, _impl_.city_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginResponse, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginResponse, _impl_.headimgurl_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginResponse, _impl_.privilege_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginRequest, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginRequest, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginRequest, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::palm::orchid::v1::WechatOauth2LoginRequest, _impl_.language_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::orchid::v1::WechatMiniProgramLoginRequest)},
  { 8, -1, -1, sizeof(::palm::orchid::v1::WechatMiniProgramLoginResponse)},
  { 17, -1, -1, sizeof(::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest)},
  { 25, -1, -1, sizeof(::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse)},
  { 35, -1, -1, sizeof(::palm::orchid::v1::WechatOauth2QrConnectRequest)},
  { 45, -1, -1, sizeof(::palm::orchid::v1::WechatOauth2QrConnectResponse)},
  { 52, 67, -1, sizeof(::palm::orchid::v1::WechatOauth2LoginResponse)},
  { 76, -1, -1, sizeof(::palm::orchid::v1::WechatOauth2LoginRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::palm::orchid::v1::_WechatMiniProgramLoginRequest_default_instance_._instance,
  &::palm::orchid::v1::_WechatMiniProgramLoginResponse_default_instance_._instance,
  &::palm::orchid::v1::_WechatMiniProgramPhoneNumberRequest_default_instance_._instance,
  &::palm::orchid::v1::_WechatMiniProgramPhoneNumberResponse_default_instance_._instance,
  &::palm::orchid::v1::_WechatOauth2QrConnectRequest_default_instance_._instance,
  &::palm::orchid::v1::_WechatOauth2QrConnectResponse_default_instance_._instance,
  &::palm::orchid::v1::_WechatOauth2LoginResponse_default_instance_._instance,
  &::palm::orchid::v1::_WechatOauth2LoginRequest_default_instance_._instance,
};

const char descriptor_table_protodef_orchid_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014orchid.proto\022\016palm.orchid.v1\"=\n\035Wechat"
  "MiniProgramLoginRequest\022\016\n\006app_id\030\001 \001(\t\022"
  "\014\n\004code\030\002 \001(\t\"V\n\036WechatMiniProgramLoginR"
  "esponse\022\017\n\007unionid\030\001 \001(\t\022\016\n\006openid\030\002 \001(\t"
  "\022\023\n\013session_key\030\003 \001(\t\"C\n#WechatMiniProgr"
  "amPhoneNumberRequest\022\016\n\006app_id\030\001 \001(\t\022\014\n\004"
  "code\030\002 \001(\t\"\201\001\n$WechatMiniProgramPhoneNum"
  "berResponse\022\024\n\014phone_number\030\001 \001(\t\022\031\n\021pur"
  "e_phone_number\030\002 \001(\t\022\024\n\014country_code\030\003 \001"
  "(\t\022\022\n\nwater_mark\030\004 \001(\004\"\300\001\n\034WechatOauth2Q"
  "rConnectRequest\022\016\n\006app_id\030\001 \001(\t\022\024\n\014redir"
  "ect_uri\030\002 \001(\t\022\r\n\005state\030\003 \001(\t\022G\n\010language"
  "\030\t \001(\01625.palm.orchid.v1.WechatOauth2QrCo"
  "nnectRequest.Language\"\"\n\010Language\022\006\n\002EN\020"
  "\000\022\006\n\002CN\020\001\022\006\n\002TW\020\002\",\n\035WechatOauth2QrConne"
  "ctResponse\022\013\n\003url\030\001 \001(\t\"\223\002\n\031WechatOauth2"
  "LoginResponse\022\017\n\007unionid\030\001 \001(\t\022\016\n\006openid"
  "\030\002 \001(\t\022\020\n\010nickname\030\013 \001(\t\022:\n\003sex\030\014 \001(\0162-."
  "palm.orchid.v1.WechatOauth2LoginResponse"
  ".Sex\022\020\n\010province\030\r \001(\t\022\014\n\004city\030\016 \001(\t\022\017\n\007"
  "country\030\017 \001(\t\022\027\n\nheadimgurl\030\020 \001(\tH\000\210\001\001\022\021"
  "\n\tprivilege\030\021 \003(\t\"\033\n\003Sex\022\010\n\004MALE\020\000\022\n\n\006FE"
  "MALE\020\001B\r\n\013_headimgurl\"\220\001\n\030WechatOauth2Lo"
  "ginRequest\022\016\n\006app_id\030\001 \001(\t\022\014\n\004code\030\002 \001(\t"
  "\022\r\n\005state\030\003 \001(\t\022G\n\010language\030\t \001(\01625.palm"
  ".orchid.v1.WechatOauth2QrConnectRequest."
  "Language2\371\001\n\021WechatMiniProgram\022h\n\005Login\022"
  "-.palm.orchid.v1.WechatMiniProgramLoginR"
  "equest\032..palm.orchid.v1.WechatMiniProgra"
  "mLoginResponse\"\000\022z\n\013PhoneNumber\0223.palm.o"
  "rchid.v1.WechatMiniProgramPhoneNumberReq"
  "uest\0324.palm.orchid.v1.WechatMiniProgramP"
  "honeNumberResponse\"\0002\332\001\n\014WechatOauth2\022j\n"
  "\tQrConnect\022,.palm.orchid.v1.WechatOauth2"
  "QrConnectRequest\032-.palm.orchid.v1.Wechat"
  "Oauth2QrConnectResponse\"\000\022^\n\005Login\022(.pal"
  "m.orchid.v1.WechatOauth2LoginRequest\032).p"
  "alm.orchid.v1.WechatOauth2LoginResponse\""
  "\000B0\n,com.github.saturn_xiv.palm.plugins."
  "orchid.v1P\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_orchid_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_orchid_2eproto = {
    false, false, 1579, descriptor_table_protodef_orchid_2eproto,
    "orchid.proto",
    &descriptor_table_orchid_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_orchid_2eproto::offsets,
    file_level_metadata_orchid_2eproto, file_level_enum_descriptors_orchid_2eproto,
    file_level_service_descriptors_orchid_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_orchid_2eproto_getter() {
  return &descriptor_table_orchid_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_orchid_2eproto(&descriptor_table_orchid_2eproto);
namespace palm {
namespace orchid {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WechatOauth2QrConnectRequest_Language_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_orchid_2eproto);
  return file_level_enum_descriptors_orchid_2eproto[0];
}
bool WechatOauth2QrConnectRequest_Language_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WechatOauth2QrConnectRequest_Language WechatOauth2QrConnectRequest::EN;
constexpr WechatOauth2QrConnectRequest_Language WechatOauth2QrConnectRequest::CN;
constexpr WechatOauth2QrConnectRequest_Language WechatOauth2QrConnectRequest::TW;
constexpr WechatOauth2QrConnectRequest_Language WechatOauth2QrConnectRequest::Language_MIN;
constexpr WechatOauth2QrConnectRequest_Language WechatOauth2QrConnectRequest::Language_MAX;
constexpr int WechatOauth2QrConnectRequest::Language_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WechatOauth2LoginResponse_Sex_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_orchid_2eproto);
  return file_level_enum_descriptors_orchid_2eproto[1];
}
bool WechatOauth2LoginResponse_Sex_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WechatOauth2LoginResponse_Sex WechatOauth2LoginResponse::MALE;
constexpr WechatOauth2LoginResponse_Sex WechatOauth2LoginResponse::FEMALE;
constexpr WechatOauth2LoginResponse_Sex WechatOauth2LoginResponse::Sex_MIN;
constexpr WechatOauth2LoginResponse_Sex WechatOauth2LoginResponse::Sex_MAX;
constexpr int WechatOauth2LoginResponse::Sex_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class WechatMiniProgramLoginRequest::_Internal {
 public:
};

WechatMiniProgramLoginRequest::WechatMiniProgramLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.orchid.v1.WechatMiniProgramLoginRequest)
}
WechatMiniProgramLoginRequest::WechatMiniProgramLoginRequest(const WechatMiniProgramLoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatMiniProgramLoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.orchid.v1.WechatMiniProgramLoginRequest)
}

inline void WechatMiniProgramLoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatMiniProgramLoginRequest::~WechatMiniProgramLoginRequest() {
  // @@protoc_insertion_point(destructor:palm.orchid.v1.WechatMiniProgramLoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatMiniProgramLoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_id_.Destroy();
  _impl_.code_.Destroy();
}

void WechatMiniProgramLoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatMiniProgramLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.orchid.v1.WechatMiniProgramLoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_id_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatMiniProgramLoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatMiniProgramLoginRequest.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatMiniProgramLoginRequest.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatMiniProgramLoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.orchid.v1.WechatMiniProgramLoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatMiniProgramLoginRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatMiniProgramLoginRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.orchid.v1.WechatMiniProgramLoginRequest)
  return target;
}

size_t WechatMiniProgramLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.orchid.v1.WechatMiniProgramLoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatMiniProgramLoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatMiniProgramLoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatMiniProgramLoginRequest::GetClassData() const { return &_class_data_; }


void WechatMiniProgramLoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatMiniProgramLoginRequest*>(&to_msg);
  auto& from = static_cast<const WechatMiniProgramLoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.orchid.v1.WechatMiniProgramLoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatMiniProgramLoginRequest::CopyFrom(const WechatMiniProgramLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.orchid.v1.WechatMiniProgramLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatMiniProgramLoginRequest::IsInitialized() const {
  return true;
}

void WechatMiniProgramLoginRequest::InternalSwap(WechatMiniProgramLoginRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatMiniProgramLoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orchid_2eproto_getter, &descriptor_table_orchid_2eproto_once,
      file_level_metadata_orchid_2eproto[0]);
}

// ===================================================================

class WechatMiniProgramLoginResponse::_Internal {
 public:
};

WechatMiniProgramLoginResponse::WechatMiniProgramLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.orchid.v1.WechatMiniProgramLoginResponse)
}
WechatMiniProgramLoginResponse::WechatMiniProgramLoginResponse(const WechatMiniProgramLoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatMiniProgramLoginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unionid_){}
    , decltype(_impl_.openid_){}
    , decltype(_impl_.session_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unionid().empty()) {
    _this->_impl_.unionid_.Set(from._internal_unionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.openid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.openid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_openid().empty()) {
    _this->_impl_.openid_.Set(from._internal_openid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_key().empty()) {
    _this->_impl_.session_key_.Set(from._internal_session_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.orchid.v1.WechatMiniProgramLoginResponse)
}

inline void WechatMiniProgramLoginResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.unionid_){}
    , decltype(_impl_.openid_){}
    , decltype(_impl_.session_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.unionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.openid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.openid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatMiniProgramLoginResponse::~WechatMiniProgramLoginResponse() {
  // @@protoc_insertion_point(destructor:palm.orchid.v1.WechatMiniProgramLoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatMiniProgramLoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unionid_.Destroy();
  _impl_.openid_.Destroy();
  _impl_.session_key_.Destroy();
}

void WechatMiniProgramLoginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatMiniProgramLoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.orchid.v1.WechatMiniProgramLoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unionid_.ClearToEmpty();
  _impl_.openid_.ClearToEmpty();
  _impl_.session_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatMiniProgramLoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatMiniProgramLoginResponse.unionid"));
        } else
          goto handle_unusual;
        continue;
      // string openid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_openid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatMiniProgramLoginResponse.openid"));
        } else
          goto handle_unusual;
        continue;
      // string session_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatMiniProgramLoginResponse.session_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatMiniProgramLoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.orchid.v1.WechatMiniProgramLoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unionid = 1;
  if (!this->_internal_unionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unionid().data(), static_cast<int>(this->_internal_unionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatMiniProgramLoginResponse.unionid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unionid(), target);
  }

  // string openid = 2;
  if (!this->_internal_openid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_openid().data(), static_cast<int>(this->_internal_openid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatMiniProgramLoginResponse.openid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_openid(), target);
  }

  // string session_key = 3;
  if (!this->_internal_session_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_key().data(), static_cast<int>(this->_internal_session_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatMiniProgramLoginResponse.session_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.orchid.v1.WechatMiniProgramLoginResponse)
  return target;
}

size_t WechatMiniProgramLoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.orchid.v1.WechatMiniProgramLoginResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unionid = 1;
  if (!this->_internal_unionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unionid());
  }

  // string openid = 2;
  if (!this->_internal_openid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_openid());
  }

  // string session_key = 3;
  if (!this->_internal_session_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatMiniProgramLoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatMiniProgramLoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatMiniProgramLoginResponse::GetClassData() const { return &_class_data_; }


void WechatMiniProgramLoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatMiniProgramLoginResponse*>(&to_msg);
  auto& from = static_cast<const WechatMiniProgramLoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.orchid.v1.WechatMiniProgramLoginResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unionid().empty()) {
    _this->_internal_set_unionid(from._internal_unionid());
  }
  if (!from._internal_openid().empty()) {
    _this->_internal_set_openid(from._internal_openid());
  }
  if (!from._internal_session_key().empty()) {
    _this->_internal_set_session_key(from._internal_session_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatMiniProgramLoginResponse::CopyFrom(const WechatMiniProgramLoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.orchid.v1.WechatMiniProgramLoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatMiniProgramLoginResponse::IsInitialized() const {
  return true;
}

void WechatMiniProgramLoginResponse::InternalSwap(WechatMiniProgramLoginResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unionid_, lhs_arena,
      &other->_impl_.unionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.openid_, lhs_arena,
      &other->_impl_.openid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_key_, lhs_arena,
      &other->_impl_.session_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatMiniProgramLoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orchid_2eproto_getter, &descriptor_table_orchid_2eproto_once,
      file_level_metadata_orchid_2eproto[1]);
}

// ===================================================================

class WechatMiniProgramPhoneNumberRequest::_Internal {
 public:
};

WechatMiniProgramPhoneNumberRequest::WechatMiniProgramPhoneNumberRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest)
}
WechatMiniProgramPhoneNumberRequest::WechatMiniProgramPhoneNumberRequest(const WechatMiniProgramPhoneNumberRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatMiniProgramPhoneNumberRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest)
}

inline void WechatMiniProgramPhoneNumberRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatMiniProgramPhoneNumberRequest::~WechatMiniProgramPhoneNumberRequest() {
  // @@protoc_insertion_point(destructor:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatMiniProgramPhoneNumberRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_id_.Destroy();
  _impl_.code_.Destroy();
}

void WechatMiniProgramPhoneNumberRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatMiniProgramPhoneNumberRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_id_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatMiniProgramPhoneNumberRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatMiniProgramPhoneNumberRequest.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatMiniProgramPhoneNumberRequest.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatMiniProgramPhoneNumberRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatMiniProgramPhoneNumberRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatMiniProgramPhoneNumberRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest)
  return target;
}

size_t WechatMiniProgramPhoneNumberRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatMiniProgramPhoneNumberRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatMiniProgramPhoneNumberRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatMiniProgramPhoneNumberRequest::GetClassData() const { return &_class_data_; }


void WechatMiniProgramPhoneNumberRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatMiniProgramPhoneNumberRequest*>(&to_msg);
  auto& from = static_cast<const WechatMiniProgramPhoneNumberRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatMiniProgramPhoneNumberRequest::CopyFrom(const WechatMiniProgramPhoneNumberRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.orchid.v1.WechatMiniProgramPhoneNumberRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatMiniProgramPhoneNumberRequest::IsInitialized() const {
  return true;
}

void WechatMiniProgramPhoneNumberRequest::InternalSwap(WechatMiniProgramPhoneNumberRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatMiniProgramPhoneNumberRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orchid_2eproto_getter, &descriptor_table_orchid_2eproto_once,
      file_level_metadata_orchid_2eproto[2]);
}

// ===================================================================

class WechatMiniProgramPhoneNumberResponse::_Internal {
 public:
};

WechatMiniProgramPhoneNumberResponse::WechatMiniProgramPhoneNumberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse)
}
WechatMiniProgramPhoneNumberResponse::WechatMiniProgramPhoneNumberResponse(const WechatMiniProgramPhoneNumberResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatMiniProgramPhoneNumberResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.phone_number_){}
    , decltype(_impl_.pure_phone_number_){}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.water_mark_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.phone_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_phone_number().empty()) {
    _this->_impl_.phone_number_.Set(from._internal_phone_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pure_phone_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pure_phone_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pure_phone_number().empty()) {
    _this->_impl_.pure_phone_number_.Set(from._internal_pure_phone_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_code().empty()) {
    _this->_impl_.country_code_.Set(from._internal_country_code(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.water_mark_ = from._impl_.water_mark_;
  // @@protoc_insertion_point(copy_constructor:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse)
}

inline void WechatMiniProgramPhoneNumberResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.phone_number_){}
    , decltype(_impl_.pure_phone_number_){}
    , decltype(_impl_.country_code_){}
    , decltype(_impl_.water_mark_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.phone_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pure_phone_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pure_phone_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatMiniProgramPhoneNumberResponse::~WechatMiniProgramPhoneNumberResponse() {
  // @@protoc_insertion_point(destructor:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatMiniProgramPhoneNumberResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.phone_number_.Destroy();
  _impl_.pure_phone_number_.Destroy();
  _impl_.country_code_.Destroy();
}

void WechatMiniProgramPhoneNumberResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatMiniProgramPhoneNumberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.phone_number_.ClearToEmpty();
  _impl_.pure_phone_number_.ClearToEmpty();
  _impl_.country_code_.ClearToEmpty();
  _impl_.water_mark_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatMiniProgramPhoneNumberResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string phone_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_phone_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.phone_number"));
        } else
          goto handle_unusual;
        continue;
      // string pure_phone_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pure_phone_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.pure_phone_number"));
        } else
          goto handle_unusual;
        continue;
      // string country_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.country_code"));
        } else
          goto handle_unusual;
        continue;
      // uint64 water_mark = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.water_mark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatMiniProgramPhoneNumberResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string phone_number = 1;
  if (!this->_internal_phone_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone_number().data(), static_cast<int>(this->_internal_phone_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.phone_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_phone_number(), target);
  }

  // string pure_phone_number = 2;
  if (!this->_internal_pure_phone_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pure_phone_number().data(), static_cast<int>(this->_internal_pure_phone_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.pure_phone_number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pure_phone_number(), target);
  }

  // string country_code = 3;
  if (!this->_internal_country_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatMiniProgramPhoneNumberResponse.country_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_country_code(), target);
  }

  // uint64 water_mark = 4;
  if (this->_internal_water_mark() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_water_mark(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse)
  return target;
}

size_t WechatMiniProgramPhoneNumberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phone_number = 1;
  if (!this->_internal_phone_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone_number());
  }

  // string pure_phone_number = 2;
  if (!this->_internal_pure_phone_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pure_phone_number());
  }

  // string country_code = 3;
  if (!this->_internal_country_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_code());
  }

  // uint64 water_mark = 4;
  if (this->_internal_water_mark() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_water_mark());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatMiniProgramPhoneNumberResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatMiniProgramPhoneNumberResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatMiniProgramPhoneNumberResponse::GetClassData() const { return &_class_data_; }


void WechatMiniProgramPhoneNumberResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatMiniProgramPhoneNumberResponse*>(&to_msg);
  auto& from = static_cast<const WechatMiniProgramPhoneNumberResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_phone_number().empty()) {
    _this->_internal_set_phone_number(from._internal_phone_number());
  }
  if (!from._internal_pure_phone_number().empty()) {
    _this->_internal_set_pure_phone_number(from._internal_pure_phone_number());
  }
  if (!from._internal_country_code().empty()) {
    _this->_internal_set_country_code(from._internal_country_code());
  }
  if (from._internal_water_mark() != 0) {
    _this->_internal_set_water_mark(from._internal_water_mark());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatMiniProgramPhoneNumberResponse::CopyFrom(const WechatMiniProgramPhoneNumberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.orchid.v1.WechatMiniProgramPhoneNumberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatMiniProgramPhoneNumberResponse::IsInitialized() const {
  return true;
}

void WechatMiniProgramPhoneNumberResponse::InternalSwap(WechatMiniProgramPhoneNumberResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phone_number_, lhs_arena,
      &other->_impl_.phone_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pure_phone_number_, lhs_arena,
      &other->_impl_.pure_phone_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_code_, lhs_arena,
      &other->_impl_.country_code_, rhs_arena
  );
  swap(_impl_.water_mark_, other->_impl_.water_mark_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatMiniProgramPhoneNumberResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orchid_2eproto_getter, &descriptor_table_orchid_2eproto_once,
      file_level_metadata_orchid_2eproto[3]);
}

// ===================================================================

class WechatOauth2QrConnectRequest::_Internal {
 public:
};

WechatOauth2QrConnectRequest::WechatOauth2QrConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.orchid.v1.WechatOauth2QrConnectRequest)
}
WechatOauth2QrConnectRequest::WechatOauth2QrConnectRequest(const WechatOauth2QrConnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatOauth2QrConnectRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.redirect_uri_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.language_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.redirect_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redirect_uri().empty()) {
    _this->_impl_.redirect_uri_.Set(from._internal_redirect_uri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.language_ = from._impl_.language_;
  // @@protoc_insertion_point(copy_constructor:palm.orchid.v1.WechatOauth2QrConnectRequest)
}

inline void WechatOauth2QrConnectRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.redirect_uri_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.language_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redirect_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatOauth2QrConnectRequest::~WechatOauth2QrConnectRequest() {
  // @@protoc_insertion_point(destructor:palm.orchid.v1.WechatOauth2QrConnectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatOauth2QrConnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_id_.Destroy();
  _impl_.redirect_uri_.Destroy();
  _impl_.state_.Destroy();
}

void WechatOauth2QrConnectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatOauth2QrConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.orchid.v1.WechatOauth2QrConnectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_id_.ClearToEmpty();
  _impl_.redirect_uri_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  _impl_.language_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatOauth2QrConnectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatOauth2QrConnectRequest.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string redirect_uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_redirect_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatOauth2QrConnectRequest.redirect_uri"));
        } else
          goto handle_unusual;
        continue;
      // string state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatOauth2QrConnectRequest.state"));
        } else
          goto handle_unusual;
        continue;
      // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::palm::orchid::v1::WechatOauth2QrConnectRequest_Language>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatOauth2QrConnectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.orchid.v1.WechatOauth2QrConnectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatOauth2QrConnectRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string redirect_uri = 2;
  if (!this->_internal_redirect_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redirect_uri().data(), static_cast<int>(this->_internal_redirect_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatOauth2QrConnectRequest.redirect_uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_redirect_uri(), target);
  }

  // string state = 3;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatOauth2QrConnectRequest.state");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_state(), target);
  }

  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 9;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.orchid.v1.WechatOauth2QrConnectRequest)
  return target;
}

size_t WechatOauth2QrConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.orchid.v1.WechatOauth2QrConnectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string redirect_uri = 2;
  if (!this->_internal_redirect_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redirect_uri());
  }

  // string state = 3;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 9;
  if (this->_internal_language() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatOauth2QrConnectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatOauth2QrConnectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatOauth2QrConnectRequest::GetClassData() const { return &_class_data_; }


void WechatOauth2QrConnectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatOauth2QrConnectRequest*>(&to_msg);
  auto& from = static_cast<const WechatOauth2QrConnectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.orchid.v1.WechatOauth2QrConnectRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_redirect_uri().empty()) {
    _this->_internal_set_redirect_uri(from._internal_redirect_uri());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatOauth2QrConnectRequest::CopyFrom(const WechatOauth2QrConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.orchid.v1.WechatOauth2QrConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatOauth2QrConnectRequest::IsInitialized() const {
  return true;
}

void WechatOauth2QrConnectRequest::InternalSwap(WechatOauth2QrConnectRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.redirect_uri_, lhs_arena,
      &other->_impl_.redirect_uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
  swap(_impl_.language_, other->_impl_.language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatOauth2QrConnectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orchid_2eproto_getter, &descriptor_table_orchid_2eproto_once,
      file_level_metadata_orchid_2eproto[4]);
}

// ===================================================================

class WechatOauth2QrConnectResponse::_Internal {
 public:
};

WechatOauth2QrConnectResponse::WechatOauth2QrConnectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.orchid.v1.WechatOauth2QrConnectResponse)
}
WechatOauth2QrConnectResponse::WechatOauth2QrConnectResponse(const WechatOauth2QrConnectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatOauth2QrConnectResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.orchid.v1.WechatOauth2QrConnectResponse)
}

inline void WechatOauth2QrConnectResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatOauth2QrConnectResponse::~WechatOauth2QrConnectResponse() {
  // @@protoc_insertion_point(destructor:palm.orchid.v1.WechatOauth2QrConnectResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatOauth2QrConnectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
}

void WechatOauth2QrConnectResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatOauth2QrConnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.orchid.v1.WechatOauth2QrConnectResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatOauth2QrConnectResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatOauth2QrConnectResponse.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatOauth2QrConnectResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.orchid.v1.WechatOauth2QrConnectResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatOauth2QrConnectResponse.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.orchid.v1.WechatOauth2QrConnectResponse)
  return target;
}

size_t WechatOauth2QrConnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.orchid.v1.WechatOauth2QrConnectResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatOauth2QrConnectResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatOauth2QrConnectResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatOauth2QrConnectResponse::GetClassData() const { return &_class_data_; }


void WechatOauth2QrConnectResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatOauth2QrConnectResponse*>(&to_msg);
  auto& from = static_cast<const WechatOauth2QrConnectResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.orchid.v1.WechatOauth2QrConnectResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatOauth2QrConnectResponse::CopyFrom(const WechatOauth2QrConnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.orchid.v1.WechatOauth2QrConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatOauth2QrConnectResponse::IsInitialized() const {
  return true;
}

void WechatOauth2QrConnectResponse::InternalSwap(WechatOauth2QrConnectResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatOauth2QrConnectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orchid_2eproto_getter, &descriptor_table_orchid_2eproto_once,
      file_level_metadata_orchid_2eproto[5]);
}

// ===================================================================

class WechatOauth2LoginResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<WechatOauth2LoginResponse>()._impl_._has_bits_);
  static void set_has_headimgurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WechatOauth2LoginResponse::WechatOauth2LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.orchid.v1.WechatOauth2LoginResponse)
}
WechatOauth2LoginResponse::WechatOauth2LoginResponse(const WechatOauth2LoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatOauth2LoginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.privilege_){from._impl_.privilege_}
    , decltype(_impl_.unionid_){}
    , decltype(_impl_.openid_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.headimgurl_){}
    , decltype(_impl_.sex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unionid().empty()) {
    _this->_impl_.unionid_.Set(from._internal_unionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.openid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.openid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_openid().empty()) {
    _this->_impl_.openid_.Set(from._internal_openid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.province_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.province_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_province().empty()) {
    _this->_impl_.province_.Set(from._internal_province(), 
      _this->GetArenaForAllocation());
  }
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_city().empty()) {
    _this->_impl_.city_.Set(from._internal_city(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.headimgurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.headimgurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_headimgurl()) {
    _this->_impl_.headimgurl_.Set(from._internal_headimgurl(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.sex_ = from._impl_.sex_;
  // @@protoc_insertion_point(copy_constructor:palm.orchid.v1.WechatOauth2LoginResponse)
}

inline void WechatOauth2LoginResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.privilege_){arena}
    , decltype(_impl_.unionid_){}
    , decltype(_impl_.openid_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.headimgurl_){}
    , decltype(_impl_.sex_){0}
  };
  _impl_.unionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.unionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.openid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.openid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.province_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.province_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.headimgurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.headimgurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatOauth2LoginResponse::~WechatOauth2LoginResponse() {
  // @@protoc_insertion_point(destructor:palm.orchid.v1.WechatOauth2LoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatOauth2LoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.privilege_.~RepeatedPtrField();
  _impl_.unionid_.Destroy();
  _impl_.openid_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.province_.Destroy();
  _impl_.city_.Destroy();
  _impl_.country_.Destroy();
  _impl_.headimgurl_.Destroy();
}

void WechatOauth2LoginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatOauth2LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.orchid.v1.WechatOauth2LoginResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.privilege_.Clear();
  _impl_.unionid_.ClearToEmpty();
  _impl_.openid_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.province_.ClearToEmpty();
  _impl_.city_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.headimgurl_.ClearNonDefaultToEmpty();
  }
  _impl_.sex_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatOauth2LoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatOauth2LoginResponse.unionid"));
        } else
          goto handle_unusual;
        continue;
      // string openid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_openid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatOauth2LoginResponse.openid"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatOauth2LoginResponse.nickname"));
        } else
          goto handle_unusual;
        continue;
      // .palm.orchid.v1.WechatOauth2LoginResponse.Sex sex = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sex(static_cast<::palm::orchid::v1::WechatOauth2LoginResponse_Sex>(val));
        } else
          goto handle_unusual;
        continue;
      // string province = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_province();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatOauth2LoginResponse.province"));
        } else
          goto handle_unusual;
        continue;
      // string city = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_city();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatOauth2LoginResponse.city"));
        } else
          goto handle_unusual;
        continue;
      // string country = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatOauth2LoginResponse.country"));
        } else
          goto handle_unusual;
        continue;
      // optional string headimgurl = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_headimgurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatOauth2LoginResponse.headimgurl"));
        } else
          goto handle_unusual;
        continue;
      // repeated string privilege = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_privilege();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatOauth2LoginResponse.privilege"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatOauth2LoginResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.orchid.v1.WechatOauth2LoginResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unionid = 1;
  if (!this->_internal_unionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unionid().data(), static_cast<int>(this->_internal_unionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatOauth2LoginResponse.unionid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unionid(), target);
  }

  // string openid = 2;
  if (!this->_internal_openid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_openid().data(), static_cast<int>(this->_internal_openid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatOauth2LoginResponse.openid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_openid(), target);
  }

  // string nickname = 11;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatOauth2LoginResponse.nickname");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_nickname(), target);
  }

  // .palm.orchid.v1.WechatOauth2LoginResponse.Sex sex = 12;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_sex(), target);
  }

  // string province = 13;
  if (!this->_internal_province().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_province().data(), static_cast<int>(this->_internal_province().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatOauth2LoginResponse.province");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_province(), target);
  }

  // string city = 14;
  if (!this->_internal_city().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatOauth2LoginResponse.city");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_city(), target);
  }

  // string country = 15;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatOauth2LoginResponse.country");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_country(), target);
  }

  // optional string headimgurl = 16;
  if (_internal_has_headimgurl()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headimgurl().data(), static_cast<int>(this->_internal_headimgurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatOauth2LoginResponse.headimgurl");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_headimgurl(), target);
  }

  // repeated string privilege = 17;
  for (int i = 0, n = this->_internal_privilege_size(); i < n; i++) {
    const auto& s = this->_internal_privilege(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatOauth2LoginResponse.privilege");
    target = stream->WriteString(17, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.orchid.v1.WechatOauth2LoginResponse)
  return target;
}

size_t WechatOauth2LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.orchid.v1.WechatOauth2LoginResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string privilege = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.privilege_.size());
  for (int i = 0, n = _impl_.privilege_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.privilege_.Get(i));
  }

  // string unionid = 1;
  if (!this->_internal_unionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unionid());
  }

  // string openid = 2;
  if (!this->_internal_openid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_openid());
  }

  // string nickname = 11;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string province = 13;
  if (!this->_internal_province().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_province());
  }

  // string city = 14;
  if (!this->_internal_city().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string country = 15;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // optional string headimgurl = 16;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headimgurl());
  }

  // .palm.orchid.v1.WechatOauth2LoginResponse.Sex sex = 12;
  if (this->_internal_sex() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatOauth2LoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatOauth2LoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatOauth2LoginResponse::GetClassData() const { return &_class_data_; }


void WechatOauth2LoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatOauth2LoginResponse*>(&to_msg);
  auto& from = static_cast<const WechatOauth2LoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.orchid.v1.WechatOauth2LoginResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.privilege_.MergeFrom(from._impl_.privilege_);
  if (!from._internal_unionid().empty()) {
    _this->_internal_set_unionid(from._internal_unionid());
  }
  if (!from._internal_openid().empty()) {
    _this->_internal_set_openid(from._internal_openid());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_province().empty()) {
    _this->_internal_set_province(from._internal_province());
  }
  if (!from._internal_city().empty()) {
    _this->_internal_set_city(from._internal_city());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (from._internal_has_headimgurl()) {
    _this->_internal_set_headimgurl(from._internal_headimgurl());
  }
  if (from._internal_sex() != 0) {
    _this->_internal_set_sex(from._internal_sex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatOauth2LoginResponse::CopyFrom(const WechatOauth2LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.orchid.v1.WechatOauth2LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatOauth2LoginResponse::IsInitialized() const {
  return true;
}

void WechatOauth2LoginResponse::InternalSwap(WechatOauth2LoginResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.privilege_.InternalSwap(&other->_impl_.privilege_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.unionid_, lhs_arena,
      &other->_impl_.unionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.openid_, lhs_arena,
      &other->_impl_.openid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.province_, lhs_arena,
      &other->_impl_.province_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.city_, lhs_arena,
      &other->_impl_.city_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.headimgurl_, lhs_arena,
      &other->_impl_.headimgurl_, rhs_arena
  );
  swap(_impl_.sex_, other->_impl_.sex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatOauth2LoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orchid_2eproto_getter, &descriptor_table_orchid_2eproto_once,
      file_level_metadata_orchid_2eproto[6]);
}

// ===================================================================

class WechatOauth2LoginRequest::_Internal {
 public:
};

WechatOauth2LoginRequest::WechatOauth2LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.orchid.v1.WechatOauth2LoginRequest)
}
WechatOauth2LoginRequest::WechatOauth2LoginRequest(const WechatOauth2LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatOauth2LoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.language_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.language_ = from._impl_.language_;
  // @@protoc_insertion_point(copy_constructor:palm.orchid.v1.WechatOauth2LoginRequest)
}

inline void WechatOauth2LoginRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.language_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatOauth2LoginRequest::~WechatOauth2LoginRequest() {
  // @@protoc_insertion_point(destructor:palm.orchid.v1.WechatOauth2LoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatOauth2LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_id_.Destroy();
  _impl_.code_.Destroy();
  _impl_.state_.Destroy();
}

void WechatOauth2LoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatOauth2LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.orchid.v1.WechatOauth2LoginRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_id_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  _impl_.language_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatOauth2LoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatOauth2LoginRequest.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatOauth2LoginRequest.code"));
        } else
          goto handle_unusual;
        continue;
      // string state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.orchid.v1.WechatOauth2LoginRequest.state"));
        } else
          goto handle_unusual;
        continue;
      // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::palm::orchid::v1::WechatOauth2QrConnectRequest_Language>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatOauth2LoginRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.orchid.v1.WechatOauth2LoginRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatOauth2LoginRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatOauth2LoginRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string state = 3;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.orchid.v1.WechatOauth2LoginRequest.state");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_state(), target);
  }

  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 9;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.orchid.v1.WechatOauth2LoginRequest)
  return target;
}

size_t WechatOauth2LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.orchid.v1.WechatOauth2LoginRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string state = 3;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 9;
  if (this->_internal_language() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatOauth2LoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatOauth2LoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatOauth2LoginRequest::GetClassData() const { return &_class_data_; }


void WechatOauth2LoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatOauth2LoginRequest*>(&to_msg);
  auto& from = static_cast<const WechatOauth2LoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.orchid.v1.WechatOauth2LoginRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatOauth2LoginRequest::CopyFrom(const WechatOauth2LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.orchid.v1.WechatOauth2LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatOauth2LoginRequest::IsInitialized() const {
  return true;
}

void WechatOauth2LoginRequest::InternalSwap(WechatOauth2LoginRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
  swap(_impl_.language_, other->_impl_.language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatOauth2LoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_orchid_2eproto_getter, &descriptor_table_orchid_2eproto_once,
      file_level_metadata_orchid_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace orchid
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::orchid::v1::WechatMiniProgramLoginRequest*
Arena::CreateMaybeMessage< ::palm::orchid::v1::WechatMiniProgramLoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::orchid::v1::WechatMiniProgramLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::orchid::v1::WechatMiniProgramLoginResponse*
Arena::CreateMaybeMessage< ::palm::orchid::v1::WechatMiniProgramLoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::orchid::v1::WechatMiniProgramLoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest*
Arena::CreateMaybeMessage< ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::orchid::v1::WechatMiniProgramPhoneNumberRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse*
Arena::CreateMaybeMessage< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::orchid::v1::WechatMiniProgramPhoneNumberResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::orchid::v1::WechatOauth2QrConnectRequest*
Arena::CreateMaybeMessage< ::palm::orchid::v1::WechatOauth2QrConnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::orchid::v1::WechatOauth2QrConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::orchid::v1::WechatOauth2QrConnectResponse*
Arena::CreateMaybeMessage< ::palm::orchid::v1::WechatOauth2QrConnectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::orchid::v1::WechatOauth2QrConnectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::orchid::v1::WechatOauth2LoginResponse*
Arena::CreateMaybeMessage< ::palm::orchid::v1::WechatOauth2LoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::orchid::v1::WechatOauth2LoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::orchid::v1::WechatOauth2LoginRequest*
Arena::CreateMaybeMessage< ::palm::orchid::v1::WechatOauth2LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::orchid::v1::WechatOauth2LoginRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
