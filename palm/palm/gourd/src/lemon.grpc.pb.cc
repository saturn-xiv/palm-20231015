// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lemon.proto

#include "lemon.pb.h"
#include "lemon.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace lemon {
namespace v1 {

static const char* Site_method_names[] = {
  "/palm.lemon.v1.Site/Layout",
  "/palm.lemon.v1.Site/Rss",
  "/palm.lemon.v1.Site/Sitemap",
  "/palm.lemon.v1.Site/ShowPage",
  "/palm.lemon.v1.Site/HomePage",
};

std::unique_ptr< Site::Stub> Site::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Site::Stub> stub(new Site::Stub(channel, options));
  return stub;
}

Site::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Layout_(Site_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rss_(Site_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Sitemap_(Site_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowPage_(Site_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HomePage_(Site_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Site::Stub::Layout(::grpc::ClientContext* context, const ::palm::lemon::v1::SiteLayoutRequest& request, ::palm::lemon::v1::SiteLayoutResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::lemon::v1::SiteLayoutRequest, ::palm::lemon::v1::SiteLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Layout_, context, request, response);
}

void Site::Stub::async::Layout(::grpc::ClientContext* context, const ::palm::lemon::v1::SiteLayoutRequest* request, ::palm::lemon::v1::SiteLayoutResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::lemon::v1::SiteLayoutRequest, ::palm::lemon::v1::SiteLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Layout_, context, request, response, std::move(f));
}

void Site::Stub::async::Layout(::grpc::ClientContext* context, const ::palm::lemon::v1::SiteLayoutRequest* request, ::palm::lemon::v1::SiteLayoutResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Layout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::lemon::v1::SiteLayoutResponse>* Site::Stub::PrepareAsyncLayoutRaw(::grpc::ClientContext* context, const ::palm::lemon::v1::SiteLayoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::lemon::v1::SiteLayoutResponse, ::palm::lemon::v1::SiteLayoutRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Layout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::lemon::v1::SiteLayoutResponse>* Site::Stub::AsyncLayoutRaw(::grpc::ClientContext* context, const ::palm::lemon::v1::SiteLayoutRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLayoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::Rss(::grpc::ClientContext* context, const ::google::protobuf::Duration& request, ::palm::lemon::v1::SiteRssResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Duration, ::palm::lemon::v1::SiteRssResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Rss_, context, request, response);
}

void Site::Stub::async::Rss(::grpc::ClientContext* context, const ::google::protobuf::Duration* request, ::palm::lemon::v1::SiteRssResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Duration, ::palm::lemon::v1::SiteRssResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rss_, context, request, response, std::move(f));
}

void Site::Stub::async::Rss(::grpc::ClientContext* context, const ::google::protobuf::Duration* request, ::palm::lemon::v1::SiteRssResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rss_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::lemon::v1::SiteRssResponse>* Site::Stub::PrepareAsyncRssRaw(::grpc::ClientContext* context, const ::google::protobuf::Duration& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::lemon::v1::SiteRssResponse, ::google::protobuf::Duration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Rss_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::lemon::v1::SiteRssResponse>* Site::Stub::AsyncRssRaw(::grpc::ClientContext* context, const ::google::protobuf::Duration& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRssRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::Sitemap(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::lemon::v1::SiteSitemapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::lemon::v1::SiteSitemapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Sitemap_, context, request, response);
}

void Site::Stub::async::Sitemap(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::lemon::v1::SiteSitemapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::lemon::v1::SiteSitemapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sitemap_, context, request, response, std::move(f));
}

void Site::Stub::async::Sitemap(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::lemon::v1::SiteSitemapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sitemap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::lemon::v1::SiteSitemapResponse>* Site::Stub::PrepareAsyncSitemapRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::lemon::v1::SiteSitemapResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Sitemap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::lemon::v1::SiteSitemapResponse>* Site::Stub::AsyncSitemapRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSitemapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::ShowPage(::grpc::ClientContext* context, const ::palm::lemon::v1::SiteShowPageRequest& request, ::palm::lemon::v1::SiteShowPageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::lemon::v1::SiteShowPageRequest, ::palm::lemon::v1::SiteShowPageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShowPage_, context, request, response);
}

void Site::Stub::async::ShowPage(::grpc::ClientContext* context, const ::palm::lemon::v1::SiteShowPageRequest* request, ::palm::lemon::v1::SiteShowPageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::lemon::v1::SiteShowPageRequest, ::palm::lemon::v1::SiteShowPageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShowPage_, context, request, response, std::move(f));
}

void Site::Stub::async::ShowPage(::grpc::ClientContext* context, const ::palm::lemon::v1::SiteShowPageRequest* request, ::palm::lemon::v1::SiteShowPageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShowPage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::lemon::v1::SiteShowPageResponse>* Site::Stub::PrepareAsyncShowPageRaw(::grpc::ClientContext* context, const ::palm::lemon::v1::SiteShowPageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::lemon::v1::SiteShowPageResponse, ::palm::lemon::v1::SiteShowPageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShowPage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::lemon::v1::SiteShowPageResponse>* Site::Stub::AsyncShowPageRaw(::grpc::ClientContext* context, const ::palm::lemon::v1::SiteShowPageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShowPageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Site::Stub::HomePage(::grpc::ClientContext* context, const ::palm::lemon::v1::SiteHomePageRequest& request, ::palm::lemon::v1::SiteHomePageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::lemon::v1::SiteHomePageRequest, ::palm::lemon::v1::SiteHomePageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HomePage_, context, request, response);
}

void Site::Stub::async::HomePage(::grpc::ClientContext* context, const ::palm::lemon::v1::SiteHomePageRequest* request, ::palm::lemon::v1::SiteHomePageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::lemon::v1::SiteHomePageRequest, ::palm::lemon::v1::SiteHomePageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HomePage_, context, request, response, std::move(f));
}

void Site::Stub::async::HomePage(::grpc::ClientContext* context, const ::palm::lemon::v1::SiteHomePageRequest* request, ::palm::lemon::v1::SiteHomePageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HomePage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::lemon::v1::SiteHomePageResponse>* Site::Stub::PrepareAsyncHomePageRaw(::grpc::ClientContext* context, const ::palm::lemon::v1::SiteHomePageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::lemon::v1::SiteHomePageResponse, ::palm::lemon::v1::SiteHomePageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HomePage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::lemon::v1::SiteHomePageResponse>* Site::Stub::AsyncHomePageRaw(::grpc::ClientContext* context, const ::palm::lemon::v1::SiteHomePageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHomePageRaw(context, request, cq);
  result->StartCall();
  return result;
}

Site::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::lemon::v1::SiteLayoutRequest, ::palm::lemon::v1::SiteLayoutResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::lemon::v1::SiteLayoutRequest* req,
             ::palm::lemon::v1::SiteLayoutResponse* resp) {
               return service->Layout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Duration, ::palm::lemon::v1::SiteRssResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Duration* req,
             ::palm::lemon::v1::SiteRssResponse* resp) {
               return service->Rss(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::google::protobuf::Empty, ::palm::lemon::v1::SiteSitemapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::lemon::v1::SiteSitemapResponse* resp) {
               return service->Sitemap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::lemon::v1::SiteShowPageRequest, ::palm::lemon::v1::SiteShowPageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::lemon::v1::SiteShowPageRequest* req,
             ::palm::lemon::v1::SiteShowPageResponse* resp) {
               return service->ShowPage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Site_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Site::Service, ::palm::lemon::v1::SiteHomePageRequest, ::palm::lemon::v1::SiteHomePageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Site::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::lemon::v1::SiteHomePageRequest* req,
             ::palm::lemon::v1::SiteHomePageResponse* resp) {
               return service->HomePage(ctx, req, resp);
             }, this)));
}

Site::Service::~Service() {
}

::grpc::Status Site::Service::Layout(::grpc::ServerContext* context, const ::palm::lemon::v1::SiteLayoutRequest* request, ::palm::lemon::v1::SiteLayoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::Rss(::grpc::ServerContext* context, const ::google::protobuf::Duration* request, ::palm::lemon::v1::SiteRssResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::Sitemap(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::lemon::v1::SiteSitemapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::ShowPage(::grpc::ServerContext* context, const ::palm::lemon::v1::SiteShowPageRequest* request, ::palm::lemon::v1::SiteShowPageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Site::Service::HomePage(::grpc::ServerContext* context, const ::palm::lemon::v1::SiteHomePageRequest* request, ::palm::lemon::v1::SiteHomePageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace lemon
}  // namespace v1

