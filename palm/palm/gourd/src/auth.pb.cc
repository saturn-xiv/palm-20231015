// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#include "auth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace palm {
namespace auth {
namespace v1 {
PROTOBUF_CONSTEXPR UserDetail::UserDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.real_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserDetailDefaultTypeInternal() {}
  union {
    UserDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserDetailDefaultTypeInternal _UserDetail_default_instance_;
PROTOBUF_CONSTEXPR Oauth2State::Oauth2State(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.goto__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct Oauth2StateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Oauth2StateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Oauth2StateDefaultTypeInternal() {}
  union {
    Oauth2State _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Oauth2StateDefaultTypeInternal _Oauth2State_default_instance_;
PROTOBUF_CONSTEXPR UserSignInRequest::UserSignInRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/nullptr
  , /*decltype(_impl_.user_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UserSignInRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSignInRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSignInRequestDefaultTypeInternal() {}
  union {
    UserSignInRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSignInRequestDefaultTypeInternal _UserSignInRequest_default_instance_;
PROTOBUF_CONSTEXPR UserQueryRequest::UserQueryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.home_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UserQueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserQueryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserQueryRequestDefaultTypeInternal() {}
  union {
    UserQueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserQueryRequestDefaultTypeInternal _UserQueryRequest_default_instance_;
PROTOBUF_CONSTEXPR UserSignInResponse::UserSignInResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roles_)*/{}
  , /*decltype(_impl_.permissions_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.provider_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.has_google_)*/false
  , /*decltype(_impl_.has_wechat_mini_program_)*/false
  , /*decltype(_impl_.has_wechat_oauth2_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserSignInResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSignInResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSignInResponseDefaultTypeInternal() {}
  union {
    UserSignInResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSignInResponseDefaultTypeInternal _UserSignInResponse_default_instance_;
PROTOBUF_CONSTEXPR UserSignUpRequest::UserSignUpRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.real_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.home_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserSignUpRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSignUpRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSignUpRequestDefaultTypeInternal() {}
  union {
    UserSignUpRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSignUpRequestDefaultTypeInternal _UserSignUpRequest_default_instance_;
PROTOBUF_CONSTEXPR UserTokenRequest::UserTokenRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserTokenRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserTokenRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserTokenRequestDefaultTypeInternal() {}
  union {
    UserTokenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserTokenRequestDefaultTypeInternal _UserTokenRequest_default_instance_;
PROTOBUF_CONSTEXPR UserResetPasswordRequest::UserResetPasswordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserResetPasswordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserResetPasswordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserResetPasswordRequestDefaultTypeInternal() {}
  union {
    UserResetPasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserResetPasswordRequestDefaultTypeInternal _UserResetPasswordRequest_default_instance_;
PROTOBUF_CONSTEXPR UserSetPasswordRequest::UserSetPasswordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserSetPasswordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSetPasswordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSetPasswordRequestDefaultTypeInternal() {}
  union {
    UserSetPasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSetPasswordRequestDefaultTypeInternal _UserSetPasswordRequest_default_instance_;
PROTOBUF_CONSTEXPR UserSetProfileRequest::UserSetProfileRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.real_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.wechat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserSetProfileRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserSetProfileRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserSetProfileRequestDefaultTypeInternal() {}
  union {
    UserSetProfileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserSetProfileRequestDefaultTypeInternal _UserSetProfileRequest_default_instance_;
PROTOBUF_CONSTEXPR UserGetProfileResponse::UserGetProfileResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.real_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.wechat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserGetProfileResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserGetProfileResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserGetProfileResponseDefaultTypeInternal() {}
  union {
    UserGetProfileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserGetProfileResponseDefaultTypeInternal _UserGetProfileResponse_default_instance_;
PROTOBUF_CONSTEXPR UserLogsResponse_Item::UserLogsResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_.created_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.user_id_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserLogsResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLogsResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLogsResponse_ItemDefaultTypeInternal() {}
  union {
    UserLogsResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLogsResponse_ItemDefaultTypeInternal _UserLogsResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR UserLogsResponse::UserLogsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserLogsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserLogsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserLogsResponseDefaultTypeInternal() {}
  union {
    UserLogsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserLogsResponseDefaultTypeInternal _UserLogsResponse_default_instance_;
PROTOBUF_CONSTEXPR UserChangePasswordRequest::UserChangePasswordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.current_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.new_password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserChangePasswordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserChangePasswordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserChangePasswordRequestDefaultTypeInternal() {}
  union {
    UserChangePasswordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserChangePasswordRequestDefaultTypeInternal _UserChangePasswordRequest_default_instance_;
PROTOBUF_CONSTEXPR UserIndexResponse_Item::UserIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.real_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_sign_in_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_sign_in_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.last_sign_in_at_)*/nullptr
  , /*decltype(_impl_.current_sign_in_at_)*/nullptr
  , /*decltype(_impl_.confirmed_at_)*/nullptr
  , /*decltype(_impl_.locked_at_)*/nullptr
  , /*decltype(_impl_.deleted_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.sign_in_count_)*/0} {}
struct UserIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserIndexResponse_ItemDefaultTypeInternal() {}
  union {
    UserIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserIndexResponse_ItemDefaultTypeInternal _UserIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR UserIndexResponse::UserIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserIndexResponseDefaultTypeInternal() {}
  union {
    UserIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserIndexResponseDefaultTypeInternal _UserIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR SignInByGoogleRequest::SignInByGoogleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scopes_)*/{}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.redirect_uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nonce_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignInByGoogleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignInByGoogleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignInByGoogleRequestDefaultTypeInternal() {}
  union {
    SignInByGoogleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignInByGoogleRequestDefaultTypeInternal _SignInByGoogleRequest_default_instance_;
PROTOBUF_CONSTEXPR GoogleSignInUrlRequest::GoogleSignInUrlRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.redirect_uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GoogleSignInUrlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoogleSignInUrlRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoogleSignInUrlRequestDefaultTypeInternal() {}
  union {
    GoogleSignInUrlRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoogleSignInUrlRequestDefaultTypeInternal _GoogleSignInUrlRequest_default_instance_;
PROTOBUF_CONSTEXPR GoogleSignInUrlResponse::GoogleSignInUrlResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nonce_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GoogleSignInUrlResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoogleSignInUrlResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoogleSignInUrlResponseDefaultTypeInternal() {}
  union {
    GoogleSignInUrlResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoogleSignInUrlResponseDefaultTypeInternal _GoogleSignInUrlResponse_default_instance_;
PROTOBUF_CONSTEXPR WechatUserBindByIdRequest::WechatUserBindByIdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/0
  , /*decltype(_impl_.wechat_user_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatUserBindByIdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatUserBindByIdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatUserBindByIdRequestDefaultTypeInternal() {}
  union {
    WechatUserBindByIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatUserBindByIdRequestDefaultTypeInternal _WechatUserBindByIdRequest_default_instance_;
PROTOBUF_CONSTEXPR WechatUserBindByAccountRequest::WechatUserBindByAccountRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatUserBindByAccountRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatUserBindByAccountRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatUserBindByAccountRequestDefaultTypeInternal() {}
  union {
    WechatUserBindByAccountRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatUserBindByAccountRequestDefaultTypeInternal _WechatUserBindByAccountRequest_default_instance_;
PROTOBUF_CONSTEXPR WechatUserQueryByOpenIdRequest::WechatUserQueryByOpenIdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.open_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatUserQueryByOpenIdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatUserQueryByOpenIdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatUserQueryByOpenIdRequestDefaultTypeInternal() {}
  union {
    WechatUserQueryByOpenIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatUserQueryByOpenIdRequestDefaultTypeInternal _WechatUserQueryByOpenIdRequest_default_instance_;
PROTOBUF_CONSTEXPR WechatUserQueryByUnionIdRequest::WechatUserQueryByUnionIdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.union_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatUserQueryByUnionIdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatUserQueryByUnionIdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatUserQueryByUnionIdRequestDefaultTypeInternal() {}
  union {
    WechatUserQueryByUnionIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatUserQueryByUnionIdRequestDefaultTypeInternal _WechatUserQueryByUnionIdRequest_default_instance_;
PROTOBUF_CONSTEXPR WechatAllMiniProgramUserResponse_Item::WechatAllMiniProgramUserResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.union_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.open_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.user_id_)*/0} {}
struct WechatAllMiniProgramUserResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatAllMiniProgramUserResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatAllMiniProgramUserResponse_ItemDefaultTypeInternal() {}
  union {
    WechatAllMiniProgramUserResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatAllMiniProgramUserResponse_ItemDefaultTypeInternal _WechatAllMiniProgramUserResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR WechatAllMiniProgramUserResponse::WechatAllMiniProgramUserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatAllMiniProgramUserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatAllMiniProgramUserResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatAllMiniProgramUserResponseDefaultTypeInternal() {}
  union {
    WechatAllMiniProgramUserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatAllMiniProgramUserResponseDefaultTypeInternal _WechatAllMiniProgramUserResponse_default_instance_;
PROTOBUF_CONSTEXPR WechatAllOauth2UserResponse_Item::WechatAllOauth2UserResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.privilege_)*/{}
  , /*decltype(_impl_.union_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.open_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.city_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.province_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.head_img_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.user_id_)*/0
  , /*decltype(_impl_.sex_)*/0} {}
struct WechatAllOauth2UserResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatAllOauth2UserResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatAllOauth2UserResponse_ItemDefaultTypeInternal() {}
  union {
    WechatAllOauth2UserResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatAllOauth2UserResponse_ItemDefaultTypeInternal _WechatAllOauth2UserResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR WechatAllOauth2UserResponse::WechatAllOauth2UserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatAllOauth2UserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatAllOauth2UserResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatAllOauth2UserResponseDefaultTypeInternal() {}
  union {
    WechatAllOauth2UserResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatAllOauth2UserResponseDefaultTypeInternal _WechatAllOauth2UserResponse_default_instance_;
PROTOBUF_CONSTEXPR SignInByWechatOauth2Request::SignInByWechatOauth2Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ttl_)*/nullptr
  , /*decltype(_impl_.language_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignInByWechatOauth2RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignInByWechatOauth2RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignInByWechatOauth2RequestDefaultTypeInternal() {}
  union {
    SignInByWechatOauth2Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignInByWechatOauth2RequestDefaultTypeInternal _SignInByWechatOauth2Request_default_instance_;
PROTOBUF_CONSTEXPR WechatOauth2SignInStateResponse::WechatOauth2SignInStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.state_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatOauth2SignInStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatOauth2SignInStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatOauth2SignInStateResponseDefaultTypeInternal() {}
  union {
    WechatOauth2SignInStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatOauth2SignInStateResponseDefaultTypeInternal _WechatOauth2SignInStateResponse_default_instance_;
PROTOBUF_CONSTEXPR WechatOauth2SignInUrlRequest::WechatOauth2SignInUrlRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.redirect_uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WechatOauth2SignInUrlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatOauth2SignInUrlRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatOauth2SignInUrlRequestDefaultTypeInternal() {}
  union {
    WechatOauth2SignInUrlRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatOauth2SignInUrlRequestDefaultTypeInternal _WechatOauth2SignInUrlRequest_default_instance_;
PROTOBUF_CONSTEXPR WechatMiniProgramUser::WechatMiniProgramUser(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.app_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.open_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.union_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct WechatMiniProgramUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WechatMiniProgramUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WechatMiniProgramUserDefaultTypeInternal() {}
  union {
    WechatMiniProgramUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WechatMiniProgramUserDefaultTypeInternal _WechatMiniProgramUser_default_instance_;
PROTOBUF_CONSTEXPR AttachmentShowRequest::AttachmentShowRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ttl_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachmentShowRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentShowRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentShowRequestDefaultTypeInternal() {}
  union {
    AttachmentShowRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentShowRequestDefaultTypeInternal _AttachmentShowRequest_default_instance_;
PROTOBUF_CONSTEXPR AttachmentShowResponse::AttachmentShowResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachmentShowResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentShowResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentShowResponseDefaultTypeInternal() {}
  union {
    AttachmentShowResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentShowResponseDefaultTypeInternal _AttachmentShowResponse_default_instance_;
PROTOBUF_CONSTEXPR AttachmentIndexResponse_Item::AttachmentIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bucket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachmentIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentIndexResponse_ItemDefaultTypeInternal() {}
  union {
    AttachmentIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentIndexResponse_ItemDefaultTypeInternal _AttachmentIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR AttachmentIndexResponse::AttachmentIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachmentIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachmentIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachmentIndexResponseDefaultTypeInternal() {}
  union {
    AttachmentIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachmentIndexResponseDefaultTypeInternal _AttachmentIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR LocaleByLangRequest::LocaleByLangRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleByLangRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleByLangRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleByLangRequestDefaultTypeInternal() {}
  union {
    LocaleByLangRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleByLangRequestDefaultTypeInternal _LocaleByLangRequest_default_instance_;
PROTOBUF_CONSTEXPR LocaleListResponse::LocaleListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleListResponseDefaultTypeInternal() {}
  union {
    LocaleListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleListResponseDefaultTypeInternal _LocaleListResponse_default_instance_;
PROTOBUF_CONSTEXPR LocaleIndexResponse_Item::LocaleIndexResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.updated_at_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleIndexResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleIndexResponse_ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleIndexResponse_ItemDefaultTypeInternal() {}
  union {
    LocaleIndexResponse_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleIndexResponse_ItemDefaultTypeInternal _LocaleIndexResponse_Item_default_instance_;
PROTOBUF_CONSTEXPR LocaleIndexResponse::LocaleIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleIndexResponseDefaultTypeInternal() {}
  union {
    LocaleIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleIndexResponseDefaultTypeInternal _LocaleIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR LocaleByCodeRequest::LocaleByCodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleByCodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleByCodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleByCodeRequestDefaultTypeInternal() {}
  union {
    LocaleByCodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleByCodeRequestDefaultTypeInternal _LocaleByCodeRequest_default_instance_;
PROTOBUF_CONSTEXPR LocaleByLangAndCodeRequest::LocaleByLangAndCodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleByLangAndCodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleByLangAndCodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleByLangAndCodeRequestDefaultTypeInternal() {}
  union {
    LocaleByLangAndCodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleByLangAndCodeRequestDefaultTypeInternal _LocaleByLangAndCodeRequest_default_instance_;
PROTOBUF_CONSTEXPR LocaleCreateRequest::LocaleCreateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lang_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleCreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleCreateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleCreateRequestDefaultTypeInternal() {}
  union {
    LocaleCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleCreateRequestDefaultTypeInternal _LocaleCreateRequest_default_instance_;
PROTOBUF_CONSTEXPR LocaleUpdateRequest::LocaleUpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocaleUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocaleUpdateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocaleUpdateRequestDefaultTypeInternal() {}
  union {
    LocaleUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocaleUpdateRequestDefaultTypeInternal _LocaleUpdateRequest_default_instance_;
}  // namespace v1
}  // namespace auth
}  // namespace palm
static ::_pb::Metadata file_level_metadata_auth_2eproto[43];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_auth_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_auth_2eproto = nullptr;

const uint32_t TableStruct_auth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserDetail, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserDetail, _impl_.real_name_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::Oauth2State, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::Oauth2State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::Oauth2State, _impl_.goto__),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::Oauth2State, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::Oauth2State, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::Oauth2State, _impl_.id_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignInRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignInRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignInRequest, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignInRequest, _impl_.ttl_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignInRequest, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserQueryRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserQueryRequest, _impl_.home_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserQueryRequest, _impl_.user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignInResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignInResponse, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignInResponse, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignInResponse, _impl_.provider_type_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignInResponse, _impl_.roles_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignInResponse, _impl_.permissions_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignInResponse, _impl_.has_google_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignInResponse, _impl_.has_wechat_mini_program_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignInResponse, _impl_.has_wechat_oauth2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignUpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignUpRequest, _impl_.real_name_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignUpRequest, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignUpRequest, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignUpRequest, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignUpRequest, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignUpRequest, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSignUpRequest, _impl_.home_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserTokenRequest, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserResetPasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserResetPasswordRequest, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserResetPasswordRequest, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSetPasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSetPasswordRequest, _impl_.user_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSetPasswordRequest, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSetProfileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSetProfileRequest, _impl_.real_name_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSetProfileRequest, _impl_.avatar_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSetProfileRequest, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSetProfileRequest, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSetProfileRequest, _impl_.wechat_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserSetProfileRequest, _impl_.phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserGetProfileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserGetProfileResponse, _impl_.real_name_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserGetProfileResponse, _impl_.avatar_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserGetProfileResponse, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserGetProfileResponse, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserGetProfileResponse, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserGetProfileResponse, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserGetProfileResponse, _impl_.wechat_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserGetProfileResponse, _impl_.phone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserLogsResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserLogsResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserLogsResponse_Item, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserLogsResponse_Item, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserLogsResponse_Item, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserLogsResponse_Item, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserLogsResponse_Item, _impl_.resource_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserLogsResponse_Item, _impl_.created_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserLogsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserLogsResponse, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserLogsResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserChangePasswordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserChangePasswordRequest, _impl_.current_password_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserChangePasswordRequest, _impl_.new_password_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.real_name_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.updated_at_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.last_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.last_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.current_sign_in_at_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.current_sign_in_ip_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.sign_in_count_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.avatar_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.confirmed_at_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.locked_at_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse_Item, _impl_.deleted_at_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  0,
  3,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::UserIndexResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::SignInByGoogleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::SignInByGoogleRequest, _impl_.scopes_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::SignInByGoogleRequest, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::SignInByGoogleRequest, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::SignInByGoogleRequest, _impl_.redirect_uri_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::SignInByGoogleRequest, _impl_.nonce_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::SignInByGoogleRequest, _impl_.ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::GoogleSignInUrlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::GoogleSignInUrlRequest, _impl_.redirect_uri_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::GoogleSignInUrlRequest, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::GoogleSignInUrlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::GoogleSignInUrlResponse, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::GoogleSignInUrlResponse, _impl_.nonce_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatUserBindByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatUserBindByIdRequest, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatUserBindByIdRequest, _impl_.wechat_user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatUserBindByAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatUserBindByAccountRequest, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatUserBindByAccountRequest, _impl_.password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatUserQueryByOpenIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatUserQueryByOpenIdRequest, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatUserQueryByOpenIdRequest, _impl_.open_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatUserQueryByUnionIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatUserQueryByUnionIdRequest, _impl_.union_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, _impl_.union_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, _impl_.open_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, _impl_.avatar_url_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllMiniProgramUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllMiniProgramUserResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse_Item, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse_Item, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse_Item, _impl_.union_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse_Item, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse_Item, _impl_.open_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse_Item, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse_Item, _impl_.sex_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse_Item, _impl_.city_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse_Item, _impl_.province_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse_Item, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse_Item, _impl_.head_img_url_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse_Item, _impl_.privilege_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse_Item, _impl_.lang_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatAllOauth2UserResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::SignInByWechatOauth2Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::SignInByWechatOauth2Request, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::SignInByWechatOauth2Request, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::SignInByWechatOauth2Request, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::SignInByWechatOauth2Request, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::SignInByWechatOauth2Request, _impl_.ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatOauth2SignInStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatOauth2SignInStateResponse, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatOauth2SignInUrlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatOauth2SignInUrlRequest, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatOauth2SignInUrlRequest, _impl_.redirect_uri_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatOauth2SignInUrlRequest, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatMiniProgramUser, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatMiniProgramUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatMiniProgramUser, _impl_.app_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatMiniProgramUser, _impl_.open_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatMiniProgramUser, _impl_.union_id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatMiniProgramUser, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::WechatMiniProgramUser, _impl_.avatar_url_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentShowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentShowRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentShowRequest, _impl_.ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentShowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentShowResponse, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentShowResponse, _impl_.url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentIndexResponse_Item, _impl_.bucket_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentIndexResponse_Item, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentIndexResponse_Item, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentIndexResponse_Item, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentIndexResponse_Item, _impl_.content_type_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentIndexResponse_Item, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentIndexResponse_Item, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentIndexResponse, _impl_.pagination_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::AttachmentIndexResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleByLangRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleByLangRequest, _impl_.lang_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleListResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleIndexResponse_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleIndexResponse_Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleIndexResponse_Item, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleIndexResponse_Item, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleIndexResponse_Item, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleIndexResponse_Item, _impl_.updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleIndexResponse, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleIndexResponse, _impl_.pagination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleByCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleByCodeRequest, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleByLangAndCodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleByLangAndCodeRequest, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleByLangAndCodeRequest, _impl_.code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleCreateRequest, _impl_.lang_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleCreateRequest, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleCreateRequest, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleUpdateRequest, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::palm::auth::v1::LocaleUpdateRequest, _impl_.message_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::palm::auth::v1::UserDetail)},
  { 8, 18, -1, sizeof(::palm::auth::v1::Oauth2State)},
  { 22, -1, -1, sizeof(::palm::auth::v1::UserSignInRequest)},
  { 33, -1, -1, sizeof(::palm::auth::v1::UserQueryRequest)},
  { 43, -1, -1, sizeof(::palm::auth::v1::UserSignInResponse)},
  { 57, -1, -1, sizeof(::palm::auth::v1::UserSignUpRequest)},
  { 70, -1, -1, sizeof(::palm::auth::v1::UserTokenRequest)},
  { 77, -1, -1, sizeof(::palm::auth::v1::UserResetPasswordRequest)},
  { 85, -1, -1, sizeof(::palm::auth::v1::UserSetPasswordRequest)},
  { 93, -1, -1, sizeof(::palm::auth::v1::UserSetProfileRequest)},
  { 105, -1, -1, sizeof(::palm::auth::v1::UserGetProfileResponse)},
  { 119, -1, -1, sizeof(::palm::auth::v1::UserLogsResponse_Item)},
  { 132, -1, -1, sizeof(::palm::auth::v1::UserLogsResponse)},
  { 140, -1, -1, sizeof(::palm::auth::v1::UserChangePasswordRequest)},
  { 148, 170, -1, sizeof(::palm::auth::v1::UserIndexResponse_Item)},
  { 186, -1, -1, sizeof(::palm::auth::v1::UserIndexResponse)},
  { 194, -1, -1, sizeof(::palm::auth::v1::SignInByGoogleRequest)},
  { 206, -1, -1, sizeof(::palm::auth::v1::GoogleSignInUrlRequest)},
  { 214, -1, -1, sizeof(::palm::auth::v1::GoogleSignInUrlResponse)},
  { 222, -1, -1, sizeof(::palm::auth::v1::WechatUserBindByIdRequest)},
  { 230, -1, -1, sizeof(::palm::auth::v1::WechatUserBindByAccountRequest)},
  { 238, -1, -1, sizeof(::palm::auth::v1::WechatUserQueryByOpenIdRequest)},
  { 246, -1, -1, sizeof(::palm::auth::v1::WechatUserQueryByUnionIdRequest)},
  { 253, 266, -1, sizeof(::palm::auth::v1::WechatAllMiniProgramUserResponse_Item)},
  { 273, -1, -1, sizeof(::palm::auth::v1::WechatAllMiniProgramUserResponse)},
  { 280, 299, -1, sizeof(::palm::auth::v1::WechatAllOauth2UserResponse_Item)},
  { 312, -1, -1, sizeof(::palm::auth::v1::WechatAllOauth2UserResponse)},
  { 319, -1, -1, sizeof(::palm::auth::v1::SignInByWechatOauth2Request)},
  { 330, -1, -1, sizeof(::palm::auth::v1::WechatOauth2SignInStateResponse)},
  { 337, -1, -1, sizeof(::palm::auth::v1::WechatOauth2SignInUrlRequest)},
  { 346, 357, -1, sizeof(::palm::auth::v1::WechatMiniProgramUser)},
  { 362, -1, -1, sizeof(::palm::auth::v1::AttachmentShowRequest)},
  { 370, -1, -1, sizeof(::palm::auth::v1::AttachmentShowResponse)},
  { 378, -1, -1, sizeof(::palm::auth::v1::AttachmentIndexResponse_Item)},
  { 392, -1, -1, sizeof(::palm::auth::v1::AttachmentIndexResponse)},
  { 400, -1, -1, sizeof(::palm::auth::v1::LocaleByLangRequest)},
  { 407, -1, -1, sizeof(::palm::auth::v1::LocaleListResponse)},
  { 414, -1, -1, sizeof(::palm::auth::v1::LocaleIndexResponse_Item)},
  { 425, -1, -1, sizeof(::palm::auth::v1::LocaleIndexResponse)},
  { 433, -1, -1, sizeof(::palm::auth::v1::LocaleByCodeRequest)},
  { 440, -1, -1, sizeof(::palm::auth::v1::LocaleByLangAndCodeRequest)},
  { 448, -1, -1, sizeof(::palm::auth::v1::LocaleCreateRequest)},
  { 457, -1, -1, sizeof(::palm::auth::v1::LocaleUpdateRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::palm::auth::v1::_UserDetail_default_instance_._instance,
  &::palm::auth::v1::_Oauth2State_default_instance_._instance,
  &::palm::auth::v1::_UserSignInRequest_default_instance_._instance,
  &::palm::auth::v1::_UserQueryRequest_default_instance_._instance,
  &::palm::auth::v1::_UserSignInResponse_default_instance_._instance,
  &::palm::auth::v1::_UserSignUpRequest_default_instance_._instance,
  &::palm::auth::v1::_UserTokenRequest_default_instance_._instance,
  &::palm::auth::v1::_UserResetPasswordRequest_default_instance_._instance,
  &::palm::auth::v1::_UserSetPasswordRequest_default_instance_._instance,
  &::palm::auth::v1::_UserSetProfileRequest_default_instance_._instance,
  &::palm::auth::v1::_UserGetProfileResponse_default_instance_._instance,
  &::palm::auth::v1::_UserLogsResponse_Item_default_instance_._instance,
  &::palm::auth::v1::_UserLogsResponse_default_instance_._instance,
  &::palm::auth::v1::_UserChangePasswordRequest_default_instance_._instance,
  &::palm::auth::v1::_UserIndexResponse_Item_default_instance_._instance,
  &::palm::auth::v1::_UserIndexResponse_default_instance_._instance,
  &::palm::auth::v1::_SignInByGoogleRequest_default_instance_._instance,
  &::palm::auth::v1::_GoogleSignInUrlRequest_default_instance_._instance,
  &::palm::auth::v1::_GoogleSignInUrlResponse_default_instance_._instance,
  &::palm::auth::v1::_WechatUserBindByIdRequest_default_instance_._instance,
  &::palm::auth::v1::_WechatUserBindByAccountRequest_default_instance_._instance,
  &::palm::auth::v1::_WechatUserQueryByOpenIdRequest_default_instance_._instance,
  &::palm::auth::v1::_WechatUserQueryByUnionIdRequest_default_instance_._instance,
  &::palm::auth::v1::_WechatAllMiniProgramUserResponse_Item_default_instance_._instance,
  &::palm::auth::v1::_WechatAllMiniProgramUserResponse_default_instance_._instance,
  &::palm::auth::v1::_WechatAllOauth2UserResponse_Item_default_instance_._instance,
  &::palm::auth::v1::_WechatAllOauth2UserResponse_default_instance_._instance,
  &::palm::auth::v1::_SignInByWechatOauth2Request_default_instance_._instance,
  &::palm::auth::v1::_WechatOauth2SignInStateResponse_default_instance_._instance,
  &::palm::auth::v1::_WechatOauth2SignInUrlRequest_default_instance_._instance,
  &::palm::auth::v1::_WechatMiniProgramUser_default_instance_._instance,
  &::palm::auth::v1::_AttachmentShowRequest_default_instance_._instance,
  &::palm::auth::v1::_AttachmentShowResponse_default_instance_._instance,
  &::palm::auth::v1::_AttachmentIndexResponse_Item_default_instance_._instance,
  &::palm::auth::v1::_AttachmentIndexResponse_default_instance_._instance,
  &::palm::auth::v1::_LocaleByLangRequest_default_instance_._instance,
  &::palm::auth::v1::_LocaleListResponse_default_instance_._instance,
  &::palm::auth::v1::_LocaleIndexResponse_Item_default_instance_._instance,
  &::palm::auth::v1::_LocaleIndexResponse_default_instance_._instance,
  &::palm::auth::v1::_LocaleByCodeRequest_default_instance_._instance,
  &::palm::auth::v1::_LocaleByLangAndCodeRequest_default_instance_._instance,
  &::palm::auth::v1::_LocaleCreateRequest_default_instance_._instance,
  &::palm::auth::v1::_LocaleUpdateRequest_default_instance_._instance,
};

const char descriptor_table_protodef_auth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nauth.proto\022\014palm.auth.v1\032\033google/proto"
  "buf/empty.proto\032\037google/protobuf/timesta"
  "mp.proto\032\036google/protobuf/duration.proto"
  "\032\tnut.proto\032\nrbac.proto\032\014orchid.proto\"1\n"
  "\nUserDetail\022\020\n\010nickname\030\001 \001(\t\022\021\n\treal_na"
  "me\030\002 \001(\t\"Q\n\013Oauth2State\022\014\n\004goto\030\001 \001(\t\022\014\n"
  "\004host\030\002 \001(\t\022\021\n\004user\030\003 \001(\tH\000\210\001\001\022\n\n\002id\030\t \001"
  "(\tB\007\n\005_user\"z\n\021UserSignInRequest\022\022\n\010nick"
  "name\030\001 \001(\tH\000\022\017\n\005email\030\002 \001(\tH\000\022\020\n\010passwor"
  "d\030\t \001(\t\022&\n\003ttl\030\013 \001(\0132\031.google.protobuf.D"
  "urationB\006\n\004user\"M\n\020UserQueryRequest\022\022\n\010n"
  "ickname\030\001 \001(\tH\000\022\017\n\005email\030\002 \001(\tH\000\022\014\n\004home"
  "\030\t \001(\tB\006\n\004user\"\374\001\n\022UserSignInResponse\022\r\n"
  "\005token\030\001 \001(\t\0222\n\004user\030\002 \001(\0132$.palm.auth.v"
  "1.UserIndexResponse.Item\022\025\n\rprovider_typ"
  "e\030\t \001(\t\022\r\n\005roles\030\013 \003(\t\022-\n\013permissions\030\014 "
  "\003(\0132\030.palm.rbac.v1.Permission\022\022\n\nhas_goo"
  "gle\030\025 \001(\010\022\037\n\027has_wechat_mini_program\030\026 \001"
  "(\010\022\031\n\021has_wechat_oauth2\030\027 \001(\010\"\207\001\n\021UserSi"
  "gnUpRequest\022\021\n\treal_name\030\001 \001(\t\022\020\n\010nickna"
  "me\030\002 \001(\t\022\r\n\005email\030\003 \001(\t\022\020\n\010password\030\004 \001("
  "\t\022\014\n\004lang\030\013 \001(\t\022\020\n\010timezone\030\014 \001(\t\022\014\n\004hom"
  "e\030\025 \001(\t\"#\n\020UserTokenRequest\022\017\n\007payload\030\001"
  " \001(\t\";\n\030UserResetPasswordRequest\022\r\n\005toke"
  "n\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"8\n\026UserSetPass"
  "wordRequest\022\014\n\004user\030\001 \001(\005\022\020\n\010password\030\002 "
  "\001(\t\"y\n\025UserSetProfileRequest\022\021\n\treal_nam"
  "e\030\001 \001(\t\022\016\n\006avatar\030\002 \001(\t\022\020\n\010timezone\030\010 \001("
  "\t\022\014\n\004lang\030\t \001(\t\022\016\n\006wechat\030\013 \001(\t\022\r\n\005phone"
  "\030\014 \001(\t\"\233\001\n\026UserGetProfileResponse\022\021\n\trea"
  "l_name\030\001 \001(\t\022\016\n\006avatar\030\002 \001(\t\022\020\n\010nickname"
  "\030\003 \001(\t\022\r\n\005email\030\004 \001(\t\022\020\n\010timezone\030\010 \001(\t\022"
  "\014\n\004lang\030\t \001(\t\022\016\n\006wechat\030\013 \001(\t\022\r\n\005phone\030\014"
  " \001(\t\"\213\003\n\020UserLogsResponse\022+\n\npagination\030"
  "\001 \001(\0132\027.palm.nut.v1.Pagination\0222\n\005items\030"
  "\013 \003(\0132#.palm.auth.v1.UserLogsResponse.It"
  "em\032\225\002\n\004Item\022\n\n\002id\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\005"
  "\022\n\n\002ip\030\003 \001(\t\0228\n\005level\030\004 \001(\0162).palm.auth."
  "v1.UserLogsResponse.Item.Level\022\017\n\007messag"
  "e\030\005 \001(\t\022(\n\010resource\030\006 \001(\0132\026.palm.rbac.v1"
  ".Resource\022.\n\ncreated_at\030\013 \001(\0132\032.google.p"
  "rotobuf.Timestamp\"\?\n\005Level\022\t\n\005DEBUG\020\000\022\010\n"
  "\004INFO\020\001\022\013\n\007WARNING\020\002\022\t\n\005ERROR\020\003\022\t\n\005PANIC"
  "\020\004\"K\n\031UserChangePasswordRequest\022\030\n\020curre"
  "nt_password\030\001 \001(\t\022\024\n\014new_password\030\002 \001(\t\""
  "\217\006\n\021UserIndexResponse\022+\n\npagination\030\001 \001("
  "\0132\027.palm.nut.v1.Pagination\0223\n\005items\030\013 \003("
  "\0132$.palm.auth.v1.UserIndexResponse.Item\032"
  "\227\005\n\004Item\022\n\n\002id\030\001 \001(\005\022\r\n\005email\030\002 \001(\t\022\020\n\010n"
  "ickname\030\003 \001(\t\022\021\n\treal_name\030\004 \001(\t\022.\n\nupda"
  "ted_at\030\t \001(\0132\032.google.protobuf.Timestamp"
  "\0228\n\017last_sign_in_at\030\013 \001(\0132\032.google.proto"
  "buf.TimestampH\000\210\001\001\022\034\n\017last_sign_in_ip\030\014 "
  "\001(\tH\001\210\001\001\022;\n\022current_sign_in_at\030\r \001(\0132\032.g"
  "oogle.protobuf.TimestampH\002\210\001\001\022\037\n\022current"
  "_sign_in_ip\030\016 \001(\tH\003\210\001\001\022\025\n\rsign_in_count\030"
  "\023 \001(\005\022\014\n\004lang\030\025 \001(\t\022\020\n\010timezone\030\026 \001(\t\022\016\n"
  "\006avatar\030\027 \001(\t\0225\n\014confirmed_at\030\033 \001(\0132\032.go"
  "ogle.protobuf.TimestampH\004\210\001\001\0222\n\tlocked_a"
  "t\030\034 \001(\0132\032.google.protobuf.TimestampH\005\210\001\001"
  "\0223\n\ndeleted_at\030\035 \001(\0132\032.google.protobuf.T"
  "imestampH\006\210\001\001B\022\n\020_last_sign_in_atB\022\n\020_la"
  "st_sign_in_ipB\025\n\023_current_sign_in_atB\025\n\023"
  "_current_sign_in_ipB\017\n\r_confirmed_atB\014\n\n"
  "_locked_atB\r\n\013_deleted_at\"\221\001\n\025SignInByGo"
  "ogleRequest\022\016\n\006scopes\030\001 \003(\t\022\014\n\004code\030\002 \001("
  "\t\022\r\n\005state\030\003 \001(\t\022\024\n\014redirect_uri\030\004 \001(\t\022\r"
  "\n\005nonce\030\t \001(\t\022&\n\003ttl\030\013 \001(\0132\031.google.prot"
  "obuf.Duration\"X\n\026GoogleSignInUrlRequest\022"
  "\024\n\014redirect_uri\030\001 \001(\t\022(\n\005state\030\002 \001(\0132\031.p"
  "alm.auth.v1.Oauth2State\"5\n\027GoogleSignInU"
  "rlResponse\022\013\n\003url\030\001 \001(\t\022\r\n\005nonce\030\002 \001(\t\"D"
  "\n\031WechatUserBindByIdRequest\022\017\n\007user_id\030\001"
  " \001(\005\022\026\n\016wechat_user_id\030\002 \001(\005\"D\n\036WechatUs"
  "erBindByAccountRequest\022\020\n\010nickname\030\001 \001(\t"
  "\022\020\n\010password\030\002 \001(\t\"A\n\036WechatUserQueryByO"
  "penIdRequest\022\016\n\006app_id\030\001 \001(\t\022\017\n\007open_id\030"
  "\002 \001(\t\"3\n\037WechatUserQueryByUnionIdRequest"
  "\022\020\n\010union_id\030\001 \001(\t\"\213\002\n WechatAllMiniProg"
  "ramUserResponse\022B\n\005items\030\001 \003(\01323.palm.au"
  "th.v1.WechatAllMiniProgramUserResponse.I"
  "tem\032\242\001\n\004Item\022\n\n\002id\030\001 \001(\005\022\017\n\007user_id\030\002 \001("
  "\005\022\020\n\010union_id\030\003 \001(\t\022\016\n\006app_id\030\004 \001(\t\022\017\n\007o"
  "pen_id\030\005 \001(\t\022\025\n\010nickname\030\013 \001(\tH\000\210\001\001\022\027\n\na"
  "vatar_url\030\014 \001(\tH\001\210\001\001B\013\n\t_nicknameB\r\n\013_av"
  "atar_url\"\322\002\n\033WechatAllOauth2UserResponse"
  "\022=\n\005items\030\001 \003(\0132..palm.auth.v1.WechatAll"
  "Oauth2UserResponse.Item\032\363\001\n\004Item\022\n\n\002id\030\001"
  " \001(\005\022\017\n\007user_id\030\002 \001(\005\022\020\n\010union_id\030\003 \001(\t\022"
  "\016\n\006app_id\030\004 \001(\t\022\017\n\007open_id\030\005 \001(\t\022\020\n\010nick"
  "name\030\013 \001(\t\022\013\n\003sex\030\014 \001(\005\022\014\n\004city\030\r \001(\t\022\020\n"
  "\010province\030\016 \001(\t\022\017\n\007country\030\017 \001(\t\022\031\n\014head"
  "_img_url\030\020 \001(\tH\000\210\001\001\022\021\n\tprivilege\030\021 \003(\t\022\014"
  "\n\004lang\030\022 \001(\tB\017\n\r_head_img_url\"\273\001\n\033SignIn"
  "ByWechatOauth2Request\022\r\n\005state\030\001 \001(\t\022\014\n\004"
  "code\030\002 \001(\t\022\016\n\006app_id\030\003 \001(\t\022G\n\010language\030\010"
  " \001(\01625.palm.orchid.v1.WechatOauth2QrConn"
  "ectRequest.Language\022&\n\003ttl\030\013 \001(\0132\031.googl"
  "e.protobuf.Duration\"0\n\037WechatOauth2SignI"
  "nStateResponse\022\r\n\005state\030\001 \001(\t\"\215\001\n\034Wechat"
  "Oauth2SignInUrlRequest\022\016\n\006app_id\030\001 \001(\t\022\024"
  "\n\014redirect_uri\030\002 \001(\t\022G\n\010language\030\003 \001(\01625"
  ".palm.orchid.v1.WechatOauth2QrConnectReq"
  "uest.Language\"\226\001\n\025WechatMiniProgramUser\022"
  "\016\n\006app_id\030\013 \001(\t\022\017\n\007open_id\030\014 \001(\t\022\020\n\010unio"
  "n_id\030\r \001(\t\022\025\n\010nickname\030\025 \001(\tH\000\210\001\001\022\027\n\nava"
  "tar_url\030\026 \001(\tH\001\210\001\001B\013\n\t_nicknameB\r\n\013_avat"
  "ar_url\"K\n\025AttachmentShowRequest\022\n\n\002id\030\001 "
  "\001(\005\022&\n\003ttl\030\002 \001(\0132\031.google.protobuf.Durat"
  "ion\"_\n\026AttachmentShowResponse\0228\n\004item\030\001 "
  "\001(\0132*.palm.auth.v1.AttachmentIndexRespon"
  "se.Item\022\013\n\003url\030\002 \001(\t\"\311\002\n\027AttachmentIndex"
  "Response\022+\n\npagination\030\001 \001(\0132\027.palm.nut."
  "v1.Pagination\0229\n\005items\030\013 \003(\0132*.palm.auth"
  ".v1.AttachmentIndexResponse.Item\032\305\001\n\004Ite"
  "m\022\n\n\002id\030\001 \001(\005\022\016\n\006bucket\030\002 \001(\t\022\014\n\004name\030\003 "
  "\001(\t\022\r\n\005title\030\004 \001(\t\022\014\n\004size\030\005 \001(\003\022\024\n\014cont"
  "ent_type\030\006 \001(\t\0220\n\006status\030\007 \001(\0162 .palm.nu"
  "t.v1.MediaContent.Status\022.\n\nupdated_at\030\013"
  " \001(\0132\032.google.protobuf.Timestamp\"#\n\023Loca"
  "leByLangRequest\022\014\n\004lang\030\001 \001(\t\"K\n\022LocaleL"
  "istResponse\0225\n\005items\030\001 \003(\0132&.palm.auth.v"
  "1.LocaleIndexResponse.Item\"\352\001\n\023LocaleInd"
  "exResponse\0225\n\005items\030\001 \003(\0132&.palm.auth.v1"
  ".LocaleIndexResponse.Item\022+\n\npagination\030"
  "\t \001(\0132\027.palm.nut.v1.Pagination\032o\n\004Item\022\n"
  "\n\002id\030\001 \001(\005\022\014\n\004lang\030\002 \001(\t\022\014\n\004code\030\003 \001(\t\022\017"
  "\n\007message\030\004 \001(\t\022.\n\nupdated_at\030\t \001(\0132\032.go"
  "ogle.protobuf.Timestamp\"#\n\023LocaleByCodeR"
  "equest\022\014\n\004code\030\001 \001(\t\"8\n\032LocaleByLangAndC"
  "odeRequest\022\014\n\004lang\030\001 \001(\t\022\014\n\004code\030\002 \001(\t\"B"
  "\n\023LocaleCreateRequest\022\014\n\004lang\030\001 \001(\t\022\014\n\004c"
  "ode\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\"2\n\023LocaleUpda"
  "teRequest\022\n\n\002id\030\001 \001(\005\022\017\n\007message\030\002 \001(\t2\215"
  "\014\n\004User\022M\n\006SignIn\022\037.palm.auth.v1.UserSig"
  "nInRequest\032 .palm.auth.v1.UserSignInResp"
  "onse\"\000\022C\n\006SignUp\022\037.palm.auth.v1.UserSign"
  "UpRequest\032\026.google.protobuf.Empty\"\000\022J\n\016C"
  "onfirmByEmail\022\036.palm.auth.v1.UserQueryRe"
  "quest\032\026.google.protobuf.Empty\"\000\022J\n\016Confi"
  "rmByToken\022\036.palm.auth.v1.UserTokenReques"
  "t\032\026.google.protobuf.Empty\"\000\022I\n\rUnlockByE"
  "mail\022\036.palm.auth.v1.UserQueryRequest\032\026.g"
  "oogle.protobuf.Empty\"\000\022I\n\rUnlockByToken\022"
  "\036.palm.auth.v1.UserTokenRequest\032\026.google"
  ".protobuf.Empty\"\000\022J\n\016ForgotPassword\022\036.pa"
  "lm.auth.v1.UserQueryRequest\032\026.google.pro"
  "tobuf.Empty\"\000\022Q\n\rResetPassword\022&.palm.au"
  "th.v1.UserResetPasswordRequest\032\026.google."
  "protobuf.Empty\"\000\022H\n\007Refresh\022\031.google.pro"
  "tobuf.Duration\032 .palm.auth.v1.UserSignIn"
  "Response\"\000\022<\n\004Logs\022\022.palm.nut.v1.Pager\032\036"
  ".palm.auth.v1.UserLogsResponse\"\000\022K\n\nSetP"
  "rofile\022#.palm.auth.v1.UserSetProfileRequ"
  "est\032\026.google.protobuf.Empty\"\000\022S\n\016ChangeP"
  "assword\022\'.palm.auth.v1.UserChangePasswor"
  "dRequest\032\026.google.protobuf.Empty\"\000\022;\n\007Si"
  "gnOut\022\026.google.protobuf.Empty\032\026.google.p"
  "rotobuf.Empty\"\000\022>\n\005Index\022\022.palm.nut.v1.P"
  "ager\032\037.palm.auth.v1.UserIndexResponse\"\000\022"
  "F\n\004Show\022\026.palm.nut.v1.IdRequest\032$.palm.a"
  "uth.v1.UserIndexResponse.Item\"\000\022;\n\007Disab"
  "le\022\026.palm.nut.v1.IdRequest\032\026.google.prot"
  "obuf.Empty\"\000\022:\n\006Enable\022\026.palm.nut.v1.IdR"
  "equest\032\026.google.protobuf.Empty\"\000\0228\n\004Lock"
  "\022\026.palm.nut.v1.IdRequest\032\026.google.protob"
  "uf.Empty\"\000\022:\n\006Unlock\022\026.palm.nut.v1.IdReq"
  "uest\032\026.google.protobuf.Empty\"\000\022;\n\007Confir"
  "m\022\026.palm.nut.v1.IdRequest\032\026.google.proto"
  "buf.Empty\"\000\022:\n\006Delete\022\026.palm.nut.v1.IdRe"
  "quest\032\026.google.protobuf.Empty\"\000\022M\n\013SetPa"
  "ssword\022$.palm.auth.v1.UserSetPasswordReq"
  "uest\032\026.google.protobuf.Empty\"\0002\267\001\n\006Googl"
  "e\022Z\n\tSignInUrl\022$.palm.auth.v1.GoogleSign"
  "InUrlRequest\032%.palm.auth.v1.GoogleSignIn"
  "UrlResponse\"\000\022Q\n\006SignIn\022#.palm.auth.v1.S"
  "ignInByGoogleRequest\032 .palm.auth.v1.User"
  "SignInResponse\"\0002\325\014\n\006Wechat\022\\\n\021Oauth2Sig"
  "nInState\022\026.google.protobuf.Empty\032-.palm."
  "auth.v1.WechatOauth2SignInStateResponse\""
  "\000\022n\n\017Oauth2SignInUrl\022*.palm.auth.v1.Wech"
  "atOauth2SignInUrlRequest\032-.palm.orchid.v"
  "1.WechatOauth2QrConnectResponse\"\000\022_\n\016Sig"
  "nInByOauth2\022).palm.auth.v1.SignInByWecha"
  "tOauth2Request\032 .palm.auth.v1.UserSignIn"
  "Response\"\000\022T\n\rAllOauth2User\022\026.google.pro"
  "tobuf.Empty\032).palm.auth.v1.WechatAllOaut"
  "h2UserResponse\"\000\022E\n\021DestroyOauth2User\022\026."
  "palm.nut.v1.IdRequest\032\026.google.protobuf."
  "Empty\"\000\022W\n\022BindOauth2UserById\022\'.palm.aut"
  "h.v1.WechatUserBindByIdRequest\032\026.google."
  "protobuf.Empty\"\000\022a\n\027BindOauth2UserByAcco"
  "unt\022,.palm.auth.v1.WechatUserBindByAccou"
  "ntRequest\032\026.google.protobuf.Empty\"\000\022]\n\021G"
  "etOauth2UserById\022\026.palm.nut.v1.IdRequest"
  "\032..palm.auth.v1.WechatAllOauth2UserRespo"
  "nse.Item\"\000\022w\n\025GetOauth2UserByOpenId\022,.pa"
  "lm.auth.v1.WechatUserQueryByOpenIdReques"
  "t\032..palm.auth.v1.WechatAllOauth2UserResp"
  "onse.Item\"\000\022t\n\026GetOauth2UserByUnionId\022-."
  "palm.auth.v1.WechatUserQueryByUnionIdReq"
  "uest\032).palm.auth.v1.WechatAllOauth2UserR"
  "esponse\"\000\022^\n\022AllMiniProgramUser\022\026.google"
  ".protobuf.Empty\032..palm.auth.v1.WechatAll"
  "MiniProgramUserResponse\"\000\022J\n\026DestroyMini"
  "ProgramUser\022\026.palm.nut.v1.IdRequest\032\026.go"
  "ogle.protobuf.Empty\"\000\022\\\n\027BindMiniProgram"
  "UserById\022\'.palm.auth.v1.WechatUserBindBy"
  "IdRequest\032\026.google.protobuf.Empty\"\000\022g\n\026G"
  "etMiniProgramUserById\022\026.palm.nut.v1.IdRe"
  "quest\0323.palm.auth.v1.WechatAllMiniProgra"
  "mUserResponse.Item\"\000\022\201\001\n\032GetMiniProgramU"
  "serByOpenId\022,.palm.auth.v1.WechatUserQue"
  "ryByOpenIdRequest\0323.palm.auth.v1.WechatA"
  "llMiniProgramUserResponse.Item\"\000\022~\n\033GetM"
  "iniProgramUserByUnionId\022-.palm.auth.v1.W"
  "echatUserQueryByUnionIdRequest\032..palm.au"
  "th.v1.WechatAllMiniProgramUserResponse\"\000"
  "2\344\001\n\nAttachment\022D\n\005Index\022\022.palm.nut.v1.P"
  "ager\032%.palm.auth.v1.AttachmentIndexRespo"
  "nse\"\000\022;\n\007Destroy\022\026.palm.nut.v1.IdRequest"
  "\032\026.google.protobuf.Empty\"\000\022S\n\004Show\022#.pal"
  "m.auth.v1.AttachmentShowRequest\032$.palm.a"
  "uth.v1.AttachmentShowResponse\"\0002\346\004\n\006Loca"
  "le\022E\n\006Create\022!.palm.auth.v1.LocaleCreate"
  "Request\032\026.google.protobuf.Empty\"\000\022E\n\006Upd"
  "ate\022!.palm.auth.v1.LocaleUpdateRequest\032\026"
  ".google.protobuf.Empty\"\000\022c\n\rByLangAndCod"
  "e\022(.palm.auth.v1.LocaleByLangAndCodeRequ"
  "est\032&.palm.auth.v1.LocaleIndexResponse.I"
  "tem\"\000\022H\n\004ById\022\026.palm.nut.v1.IdRequest\032&."
  "palm.auth.v1.LocaleIndexResponse.Item\"\000\022"
  "O\n\006ByLang\022!.palm.auth.v1.LocaleByLangReq"
  "uest\032 .palm.auth.v1.LocaleListResponse\"\000"
  "\022O\n\006ByCode\022!.palm.auth.v1.LocaleByCodeRe"
  "quest\032 .palm.auth.v1.LocaleListResponse\""
  "\000\022@\n\005Index\022\022.palm.nut.v1.Pager\032!.palm.au"
  "th.v1.LocaleIndexResponse\"\000\022;\n\007Destroy\022\026"
  ".palm.nut.v1.IdRequest\032\026.google.protobuf"
  ".Empty\"\000B.\n*com.github.saturn_xiv.palm.p"
  "lugins.auth.v1P\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_auth_2eproto_deps[6] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_nut_2eproto,
  &::descriptor_table_orchid_2eproto,
  &::descriptor_table_rbac_2eproto,
};
static ::_pbi::once_flag descriptor_table_auth_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_auth_2eproto = {
    false, false, 9624, descriptor_table_protodef_auth_2eproto,
    "auth.proto",
    &descriptor_table_auth_2eproto_once, descriptor_table_auth_2eproto_deps, 6, 43,
    schemas, file_default_instances, TableStruct_auth_2eproto::offsets,
    file_level_metadata_auth_2eproto, file_level_enum_descriptors_auth_2eproto,
    file_level_service_descriptors_auth_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_auth_2eproto_getter() {
  return &descriptor_table_auth_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_auth_2eproto(&descriptor_table_auth_2eproto);
namespace palm {
namespace auth {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserLogsResponse_Item_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_auth_2eproto);
  return file_level_enum_descriptors_auth_2eproto[0];
}
bool UserLogsResponse_Item_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::DEBUG;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::INFO;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::WARNING;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::ERROR;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::PANIC;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::Level_MIN;
constexpr UserLogsResponse_Item_Level UserLogsResponse_Item::Level_MAX;
constexpr int UserLogsResponse_Item::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class UserDetail::_Internal {
 public:
};

UserDetail::UserDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.UserDetail)
}
UserDetail::UserDetail(const UserDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.real_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_real_name().empty()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.UserDetail)
}

inline void UserDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.real_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserDetail::~UserDetail() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.UserDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
  _impl_.real_name_.Destroy();
}

void UserDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.UserDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _impl_.real_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserDetail.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string real_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserDetail.real_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.UserDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserDetail.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  // string real_name = 2;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserDetail.real_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_real_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.UserDetail)
  return target;
}

size_t UserDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.UserDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string real_name = 2;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserDetail::GetClassData() const { return &_class_data_; }


void UserDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserDetail*>(&to_msg);
  auto& from = static_cast<const UserDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.UserDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_real_name().empty()) {
    _this->_internal_set_real_name(from._internal_real_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserDetail::CopyFrom(const UserDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.UserDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDetail::IsInitialized() const {
  return true;
}

void UserDetail::InternalSwap(UserDetail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.real_name_, lhs_arena,
      &other->_impl_.real_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[0]);
}

// ===================================================================

class Oauth2State::_Internal {
 public:
  using HasBits = decltype(std::declval<Oauth2State>()._impl_._has_bits_);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Oauth2State::Oauth2State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.Oauth2State)
}
Oauth2State::Oauth2State(const Oauth2State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Oauth2State* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.goto__){}
    , decltype(_impl_.host_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.goto__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.goto__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_goto_().empty()) {
    _this->_impl_.goto__.Set(from._internal_goto_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user()) {
    _this->_impl_.user_.Set(from._internal_user(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.Oauth2State)
}

inline void Oauth2State::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.goto__){}
    , decltype(_impl_.host_){}
    , decltype(_impl_.user_){}
    , decltype(_impl_.id_){}
  };
  _impl_.goto__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.goto__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Oauth2State::~Oauth2State() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.Oauth2State)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Oauth2State::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.goto__.Destroy();
  _impl_.host_.Destroy();
  _impl_.user_.Destroy();
  _impl_.id_.Destroy();
}

void Oauth2State::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Oauth2State::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.Oauth2State)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.goto__.ClearToEmpty();
  _impl_.host_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.user_.ClearNonDefaultToEmpty();
  }
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Oauth2State::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string goto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_goto_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.Oauth2State.goto"));
        } else
          goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.Oauth2State.host"));
        } else
          goto handle_unusual;
        continue;
      // optional string user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.Oauth2State.user"));
        } else
          goto handle_unusual;
        continue;
      // string id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.Oauth2State.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Oauth2State::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.Oauth2State)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string goto = 1;
  if (!this->_internal_goto_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goto_().data(), static_cast<int>(this->_internal_goto_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.Oauth2State.goto");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_goto_(), target);
  }

  // string host = 2;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.Oauth2State.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // optional string user = 3;
  if (_internal_has_user()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.Oauth2State.user");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user(), target);
  }

  // string id = 9;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.Oauth2State.id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.Oauth2State)
  return target;
}

size_t Oauth2State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.Oauth2State)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string goto = 1;
  if (!this->_internal_goto_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goto_());
  }

  // string host = 2;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // optional string user = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string id = 9;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Oauth2State::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Oauth2State::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Oauth2State::GetClassData() const { return &_class_data_; }


void Oauth2State::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Oauth2State*>(&to_msg);
  auto& from = static_cast<const Oauth2State&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.Oauth2State)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_goto_().empty()) {
    _this->_internal_set_goto_(from._internal_goto_());
  }
  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (from._internal_has_user()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Oauth2State::CopyFrom(const Oauth2State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.Oauth2State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Oauth2State::IsInitialized() const {
  return true;
}

void Oauth2State::InternalSwap(Oauth2State* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.goto__, lhs_arena,
      &other->_impl_.goto__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_, lhs_arena,
      &other->_impl_.user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Oauth2State::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[1]);
}

// ===================================================================

class UserSignInRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const UserSignInRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
UserSignInRequest::_Internal::ttl(const UserSignInRequest* msg) {
  return *msg->_impl_.ttl_;
}
void UserSignInRequest::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
}
UserSignInRequest::UserSignInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.UserSignInRequest)
}
UserSignInRequest::UserSignInRequest(const UserSignInRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSignInRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ttl()) {
    _this->_impl_.ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ttl_);
  }
  clear_has_user();
  switch (from.user_case()) {
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case kEmail: {
      _this->_internal_set_email(from._internal_email());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.UserSignInRequest)
}

inline void UserSignInRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_user();
}

UserSignInRequest::~UserSignInRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.UserSignInRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSignInRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.password_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ttl_;
  if (has_user()) {
    clear_user();
  }
}

void UserSignInRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSignInRequest::clear_user() {
// @@protoc_insertion_point(one_of_clear_start:palm.auth.v1.UserSignInRequest)
  switch (user_case()) {
    case kNickname: {
      _impl_.user_.nickname_.Destroy();
      break;
    }
    case kEmail: {
      _impl_.user_.email_.Destroy();
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = USER_NOT_SET;
}


void UserSignInRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.UserSignInRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
  clear_user();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignInRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSignInRequest.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSignInRequest.email"));
        } else
          goto handle_unusual;
        continue;
      // string password = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSignInRequest.password"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ttl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSignInRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.UserSignInRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (_internal_has_nickname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSignInRequest.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  // string email = 2;
  if (_internal_has_email()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSignInRequest.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string password = 9;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSignInRequest.password");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_password(), target);
  }

  // .google.protobuf.Duration ttl = 11;
  if (this->_internal_has_ttl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.UserSignInRequest)
  return target;
}

size_t UserSignInRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.UserSignInRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 9;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .google.protobuf.Duration ttl = 11;
  if (this->_internal_has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ttl_);
  }

  switch (user_case()) {
    // string nickname = 1;
    case kNickname: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
      break;
    }
    // string email = 2;
    case kEmail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignInRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSignInRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignInRequest::GetClassData() const { return &_class_data_; }


void UserSignInRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSignInRequest*>(&to_msg);
  auto& from = static_cast<const UserSignInRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.UserSignInRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_has_ttl()) {
    _this->_internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ttl());
  }
  switch (from.user_case()) {
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case kEmail: {
      _this->_internal_set_email(from._internal_email());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignInRequest::CopyFrom(const UserSignInRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.UserSignInRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignInRequest::IsInitialized() const {
  return true;
}

void UserSignInRequest::InternalSwap(UserSignInRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  swap(_impl_.ttl_, other->_impl_.ttl_);
  swap(_impl_.user_, other->_impl_.user_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignInRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[2]);
}

// ===================================================================

class UserQueryRequest::_Internal {
 public:
};

UserQueryRequest::UserQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.UserQueryRequest)
}
UserQueryRequest::UserQueryRequest(const UserQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserQueryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.home_){}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_home().empty()) {
    _this->_impl_.home_.Set(from._internal_home(), 
      _this->GetArenaForAllocation());
  }
  clear_has_user();
  switch (from.user_case()) {
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case kEmail: {
      _this->_internal_set_email(from._internal_email());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.UserQueryRequest)
}

inline void UserQueryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.home_){}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_user();
}

UserQueryRequest::~UserQueryRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.UserQueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.home_.Destroy();
  if (has_user()) {
    clear_user();
  }
}

void UserQueryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserQueryRequest::clear_user() {
// @@protoc_insertion_point(one_of_clear_start:palm.auth.v1.UserQueryRequest)
  switch (user_case()) {
    case kNickname: {
      _impl_.user_.nickname_.Destroy();
      break;
    }
    case kEmail: {
      _impl_.user_.email_.Destroy();
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = USER_NOT_SET;
}


void UserQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.UserQueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.home_.ClearToEmpty();
  clear_user();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserQueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserQueryRequest.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserQueryRequest.email"));
        } else
          goto handle_unusual;
        continue;
      // string home = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_home();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserQueryRequest.home"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserQueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.UserQueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (_internal_has_nickname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserQueryRequest.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  // string email = 2;
  if (_internal_has_email()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserQueryRequest.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string home = 9;
  if (!this->_internal_home().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_home().data(), static_cast<int>(this->_internal_home().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserQueryRequest.home");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_home(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.UserQueryRequest)
  return target;
}

size_t UserQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.UserQueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string home = 9;
  if (!this->_internal_home().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_home());
  }

  switch (user_case()) {
    // string nickname = 1;
    case kNickname: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
      break;
    }
    // string email = 2;
    case kEmail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserQueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserQueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserQueryRequest::GetClassData() const { return &_class_data_; }


void UserQueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserQueryRequest*>(&to_msg);
  auto& from = static_cast<const UserQueryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.UserQueryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_home().empty()) {
    _this->_internal_set_home(from._internal_home());
  }
  switch (from.user_case()) {
    case kNickname: {
      _this->_internal_set_nickname(from._internal_nickname());
      break;
    }
    case kEmail: {
      _this->_internal_set_email(from._internal_email());
      break;
    }
    case USER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserQueryRequest::CopyFrom(const UserQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.UserQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserQueryRequest::IsInitialized() const {
  return true;
}

void UserQueryRequest::InternalSwap(UserQueryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.home_, lhs_arena,
      &other->_impl_.home_, rhs_arena
  );
  swap(_impl_.user_, other->_impl_.user_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserQueryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[3]);
}

// ===================================================================

class UserSignInResponse::_Internal {
 public:
  static const ::palm::auth::v1::UserIndexResponse_Item& user(const UserSignInResponse* msg);
};

const ::palm::auth::v1::UserIndexResponse_Item&
UserSignInResponse::_Internal::user(const UserSignInResponse* msg) {
  return *msg->_impl_.user_;
}
void UserSignInResponse::clear_permissions() {
  _impl_.permissions_.Clear();
}
UserSignInResponse::UserSignInResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.UserSignInResponse)
}
UserSignInResponse::UserSignInResponse(const UserSignInResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSignInResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){from._impl_.roles_}
    , decltype(_impl_.permissions_){from._impl_.permissions_}
    , decltype(_impl_.token_){}
    , decltype(_impl_.provider_type_){}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.has_google_){}
    , decltype(_impl_.has_wechat_mini_program_){}
    , decltype(_impl_.has_wechat_oauth2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.provider_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provider_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_provider_type().empty()) {
    _this->_impl_.provider_type_.Set(from._internal_provider_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_user()) {
    _this->_impl_.user_ = new ::palm::auth::v1::UserIndexResponse_Item(*from._impl_.user_);
  }
  ::memcpy(&_impl_.has_google_, &from._impl_.has_google_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_wechat_oauth2_) -
    reinterpret_cast<char*>(&_impl_.has_google_)) + sizeof(_impl_.has_wechat_oauth2_));
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.UserSignInResponse)
}

inline void UserSignInResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){arena}
    , decltype(_impl_.permissions_){arena}
    , decltype(_impl_.token_){}
    , decltype(_impl_.provider_type_){}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.has_google_){false}
    , decltype(_impl_.has_wechat_mini_program_){false}
    , decltype(_impl_.has_wechat_oauth2_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.provider_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.provider_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserSignInResponse::~UserSignInResponse() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.UserSignInResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSignInResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roles_.~RepeatedPtrField();
  _impl_.permissions_.~RepeatedPtrField();
  _impl_.token_.Destroy();
  _impl_.provider_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_;
}

void UserSignInResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSignInResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.UserSignInResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roles_.Clear();
  _impl_.permissions_.Clear();
  _impl_.token_.ClearToEmpty();
  _impl_.provider_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  ::memset(&_impl_.has_google_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_wechat_oauth2_) -
      reinterpret_cast<char*>(&_impl_.has_google_)) + sizeof(_impl_.has_wechat_oauth2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignInResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSignInResponse.token"));
        } else
          goto handle_unusual;
        continue;
      // .palm.auth.v1.UserIndexResponse.Item user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string provider_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_provider_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSignInResponse.provider_type"));
        } else
          goto handle_unusual;
        continue;
      // repeated string roles = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_roles();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSignInResponse.roles"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.rbac.v1.Permission permissions = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool has_google = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.has_google_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_wechat_mini_program = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.has_wechat_mini_program_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_wechat_oauth2 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.has_wechat_oauth2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSignInResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.UserSignInResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSignInResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // .palm.auth.v1.UserIndexResponse.Item user = 2;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // string provider_type = 9;
  if (!this->_internal_provider_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider_type().data(), static_cast<int>(this->_internal_provider_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSignInResponse.provider_type");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_provider_type(), target);
  }

  // repeated string roles = 11;
  for (int i = 0, n = this->_internal_roles_size(); i < n; i++) {
    const auto& s = this->_internal_roles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSignInResponse.roles");
    target = stream->WriteString(11, s, target);
  }

  // repeated .palm.rbac.v1.Permission permissions = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_permissions_size()); i < n; i++) {
    const auto& repfield = this->_internal_permissions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool has_google = 21;
  if (this->_internal_has_google() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_has_google(), target);
  }

  // bool has_wechat_mini_program = 22;
  if (this->_internal_has_wechat_mini_program() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_has_wechat_mini_program(), target);
  }

  // bool has_wechat_oauth2 = 23;
  if (this->_internal_has_wechat_oauth2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_has_wechat_oauth2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.UserSignInResponse)
  return target;
}

size_t UserSignInResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.UserSignInResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roles = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.roles_.size());
  for (int i = 0, n = _impl_.roles_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.roles_.Get(i));
  }

  // repeated .palm.rbac.v1.Permission permissions = 12;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->_impl_.permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string provider_type = 9;
  if (!this->_internal_provider_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider_type());
  }

  // .palm.auth.v1.UserIndexResponse.Item user = 2;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  // bool has_google = 21;
  if (this->_internal_has_google() != 0) {
    total_size += 2 + 1;
  }

  // bool has_wechat_mini_program = 22;
  if (this->_internal_has_wechat_mini_program() != 0) {
    total_size += 2 + 1;
  }

  // bool has_wechat_oauth2 = 23;
  if (this->_internal_has_wechat_oauth2() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignInResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSignInResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignInResponse::GetClassData() const { return &_class_data_; }


void UserSignInResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSignInResponse*>(&to_msg);
  auto& from = static_cast<const UserSignInResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.UserSignInResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.roles_.MergeFrom(from._impl_.roles_);
  _this->_impl_.permissions_.MergeFrom(from._impl_.permissions_);
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_provider_type().empty()) {
    _this->_internal_set_provider_type(from._internal_provider_type());
  }
  if (from._internal_has_user()) {
    _this->_internal_mutable_user()->::palm::auth::v1::UserIndexResponse_Item::MergeFrom(
        from._internal_user());
  }
  if (from._internal_has_google() != 0) {
    _this->_internal_set_has_google(from._internal_has_google());
  }
  if (from._internal_has_wechat_mini_program() != 0) {
    _this->_internal_set_has_wechat_mini_program(from._internal_has_wechat_mini_program());
  }
  if (from._internal_has_wechat_oauth2() != 0) {
    _this->_internal_set_has_wechat_oauth2(from._internal_has_wechat_oauth2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignInResponse::CopyFrom(const UserSignInResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.UserSignInResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignInResponse::IsInitialized() const {
  return true;
}

void UserSignInResponse::InternalSwap(UserSignInResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.roles_.InternalSwap(&other->_impl_.roles_);
  _impl_.permissions_.InternalSwap(&other->_impl_.permissions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.provider_type_, lhs_arena,
      &other->_impl_.provider_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserSignInResponse, _impl_.has_wechat_oauth2_)
      + sizeof(UserSignInResponse::_impl_.has_wechat_oauth2_)
      - PROTOBUF_FIELD_OFFSET(UserSignInResponse, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignInResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[4]);
}

// ===================================================================

class UserSignUpRequest::_Internal {
 public:
};

UserSignUpRequest::UserSignUpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.UserSignUpRequest)
}
UserSignUpRequest::UserSignUpRequest(const UserSignUpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSignUpRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.real_name_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.home_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_real_name().empty()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timezone().empty()) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), 
      _this->GetArenaForAllocation());
  }
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_home().empty()) {
    _this->_impl_.home_.Set(from._internal_home(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.UserSignUpRequest)
}

inline void UserSignUpRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.real_name_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.home_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.home_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.home_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserSignUpRequest::~UserSignUpRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.UserSignUpRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSignUpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.real_name_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.email_.Destroy();
  _impl_.password_.Destroy();
  _impl_.lang_.Destroy();
  _impl_.timezone_.Destroy();
  _impl_.home_.Destroy();
}

void UserSignUpRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSignUpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.UserSignUpRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.real_name_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.lang_.ClearToEmpty();
  _impl_.timezone_.ClearToEmpty();
  _impl_.home_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSignUpRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string real_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSignUpRequest.real_name"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSignUpRequest.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSignUpRequest.email"));
        } else
          goto handle_unusual;
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSignUpRequest.password"));
        } else
          goto handle_unusual;
        continue;
      // string lang = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSignUpRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      // string timezone = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSignUpRequest.timezone"));
        } else
          goto handle_unusual;
        continue;
      // string home = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_home();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSignUpRequest.home"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSignUpRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.UserSignUpRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSignUpRequest.real_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_real_name(), target);
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSignUpRequest.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSignUpRequest.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSignUpRequest.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  // string lang = 11;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSignUpRequest.lang");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_lang(), target);
  }

  // string timezone = 12;
  if (!this->_internal_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSignUpRequest.timezone");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_timezone(), target);
  }

  // string home = 21;
  if (!this->_internal_home().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_home().data(), static_cast<int>(this->_internal_home().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSignUpRequest.home");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_home(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.UserSignUpRequest)
  return target;
}

size_t UserSignUpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.UserSignUpRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string email = 3;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // string lang = 11;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string timezone = 12;
  if (!this->_internal_timezone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  // string home = 21;
  if (!this->_internal_home().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_home());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSignUpRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSignUpRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSignUpRequest::GetClassData() const { return &_class_data_; }


void UserSignUpRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSignUpRequest*>(&to_msg);
  auto& from = static_cast<const UserSignUpRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.UserSignUpRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_real_name().empty()) {
    _this->_internal_set_real_name(from._internal_real_name());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_timezone().empty()) {
    _this->_internal_set_timezone(from._internal_timezone());
  }
  if (!from._internal_home().empty()) {
    _this->_internal_set_home(from._internal_home());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSignUpRequest::CopyFrom(const UserSignUpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.UserSignUpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSignUpRequest::IsInitialized() const {
  return true;
}

void UserSignUpRequest::InternalSwap(UserSignUpRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.real_name_, lhs_arena,
      &other->_impl_.real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_, lhs_arena,
      &other->_impl_.timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.home_, lhs_arena,
      &other->_impl_.home_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSignUpRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[5]);
}

// ===================================================================

class UserTokenRequest::_Internal {
 public:
};

UserTokenRequest::UserTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.UserTokenRequest)
}
UserTokenRequest::UserTokenRequest(const UserTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserTokenRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.UserTokenRequest)
}

inline void UserTokenRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserTokenRequest::~UserTokenRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.UserTokenRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void UserTokenRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.UserTokenRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserTokenRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserTokenRequest.payload"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserTokenRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.UserTokenRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string payload = 1;
  if (!this->_internal_payload().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserTokenRequest.payload");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.UserTokenRequest)
  return target;
}

size_t UserTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.UserTokenRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserTokenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserTokenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserTokenRequest::GetClassData() const { return &_class_data_; }


void UserTokenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserTokenRequest*>(&to_msg);
  auto& from = static_cast<const UserTokenRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.UserTokenRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserTokenRequest::CopyFrom(const UserTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.UserTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTokenRequest::IsInitialized() const {
  return true;
}

void UserTokenRequest::InternalSwap(UserTokenRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserTokenRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[6]);
}

// ===================================================================

class UserResetPasswordRequest::_Internal {
 public:
};

UserResetPasswordRequest::UserResetPasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.UserResetPasswordRequest)
}
UserResetPasswordRequest::UserResetPasswordRequest(const UserResetPasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserResetPasswordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.UserResetPasswordRequest)
}

inline void UserResetPasswordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserResetPasswordRequest::~UserResetPasswordRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.UserResetPasswordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserResetPasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  _impl_.password_.Destroy();
}

void UserResetPasswordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserResetPasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.UserResetPasswordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserResetPasswordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserResetPasswordRequest.token"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserResetPasswordRequest.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserResetPasswordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.UserResetPasswordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserResetPasswordRequest.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserResetPasswordRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.UserResetPasswordRequest)
  return target;
}

size_t UserResetPasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.UserResetPasswordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserResetPasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserResetPasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserResetPasswordRequest::GetClassData() const { return &_class_data_; }


void UserResetPasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserResetPasswordRequest*>(&to_msg);
  auto& from = static_cast<const UserResetPasswordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.UserResetPasswordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserResetPasswordRequest::CopyFrom(const UserResetPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.UserResetPasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserResetPasswordRequest::IsInitialized() const {
  return true;
}

void UserResetPasswordRequest::InternalSwap(UserResetPasswordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserResetPasswordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[7]);
}

// ===================================================================

class UserSetPasswordRequest::_Internal {
 public:
};

UserSetPasswordRequest::UserSetPasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.UserSetPasswordRequest)
}
UserSetPasswordRequest::UserSetPasswordRequest(const UserSetPasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSetPasswordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.user_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.UserSetPasswordRequest)
}

inline void UserSetPasswordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.password_){}
    , decltype(_impl_.user_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserSetPasswordRequest::~UserSetPasswordRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.UserSetPasswordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSetPasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.password_.Destroy();
}

void UserSetPasswordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSetPasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.UserSetPasswordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.password_.ClearToEmpty();
  _impl_.user_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSetPasswordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSetPasswordRequest.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSetPasswordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.UserSetPasswordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_user(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSetPasswordRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.UserSetPasswordRequest)
  return target;
}

size_t UserSetPasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.UserSetPasswordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSetPasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSetPasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSetPasswordRequest::GetClassData() const { return &_class_data_; }


void UserSetPasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSetPasswordRequest*>(&to_msg);
  auto& from = static_cast<const UserSetPasswordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.UserSetPasswordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSetPasswordRequest::CopyFrom(const UserSetPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.UserSetPasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSetPasswordRequest::IsInitialized() const {
  return true;
}

void UserSetPasswordRequest::InternalSwap(UserSetPasswordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSetPasswordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[8]);
}

// ===================================================================

class UserSetProfileRequest::_Internal {
 public:
};

UserSetProfileRequest::UserSetProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.UserSetProfileRequest)
}
UserSetProfileRequest::UserSetProfileRequest(const UserSetProfileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserSetProfileRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.real_name_){}
    , decltype(_impl_.avatar_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.wechat_){}
    , decltype(_impl_.phone_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_real_name().empty()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avatar().empty()) {
    _this->_impl_.avatar_.Set(from._internal_avatar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timezone().empty()) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.wechat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wechat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wechat().empty()) {
    _this->_impl_.wechat_.Set(from._internal_wechat(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_phone().empty()) {
    _this->_impl_.phone_.Set(from._internal_phone(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.UserSetProfileRequest)
}

inline void UserSetProfileRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.real_name_){}
    , decltype(_impl_.avatar_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.wechat_){}
    , decltype(_impl_.phone_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.wechat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wechat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserSetProfileRequest::~UserSetProfileRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.UserSetProfileRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserSetProfileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.real_name_.Destroy();
  _impl_.avatar_.Destroy();
  _impl_.timezone_.Destroy();
  _impl_.lang_.Destroy();
  _impl_.wechat_.Destroy();
  _impl_.phone_.Destroy();
}

void UserSetProfileRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserSetProfileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.UserSetProfileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.real_name_.ClearToEmpty();
  _impl_.avatar_.ClearToEmpty();
  _impl_.timezone_.ClearToEmpty();
  _impl_.lang_.ClearToEmpty();
  _impl_.wechat_.ClearToEmpty();
  _impl_.phone_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserSetProfileRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string real_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSetProfileRequest.real_name"));
        } else
          goto handle_unusual;
        continue;
      // string avatar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_avatar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSetProfileRequest.avatar"));
        } else
          goto handle_unusual;
        continue;
      // string timezone = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSetProfileRequest.timezone"));
        } else
          goto handle_unusual;
        continue;
      // string lang = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSetProfileRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      // string wechat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_wechat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSetProfileRequest.wechat"));
        } else
          goto handle_unusual;
        continue;
      // string phone = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_phone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserSetProfileRequest.phone"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserSetProfileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.UserSetProfileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSetProfileRequest.real_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_real_name(), target);
  }

  // string avatar = 2;
  if (!this->_internal_avatar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSetProfileRequest.avatar");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_avatar(), target);
  }

  // string timezone = 8;
  if (!this->_internal_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSetProfileRequest.timezone");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_timezone(), target);
  }

  // string lang = 9;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSetProfileRequest.lang");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_lang(), target);
  }

  // string wechat = 11;
  if (!this->_internal_wechat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wechat().data(), static_cast<int>(this->_internal_wechat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSetProfileRequest.wechat");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_wechat(), target);
  }

  // string phone = 12;
  if (!this->_internal_phone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserSetProfileRequest.phone");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.UserSetProfileRequest)
  return target;
}

size_t UserSetProfileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.UserSetProfileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  // string avatar = 2;
  if (!this->_internal_avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // string timezone = 8;
  if (!this->_internal_timezone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  // string lang = 9;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string wechat = 11;
  if (!this->_internal_wechat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wechat());
  }

  // string phone = 12;
  if (!this->_internal_phone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserSetProfileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserSetProfileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserSetProfileRequest::GetClassData() const { return &_class_data_; }


void UserSetProfileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserSetProfileRequest*>(&to_msg);
  auto& from = static_cast<const UserSetProfileRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.UserSetProfileRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_real_name().empty()) {
    _this->_internal_set_real_name(from._internal_real_name());
  }
  if (!from._internal_avatar().empty()) {
    _this->_internal_set_avatar(from._internal_avatar());
  }
  if (!from._internal_timezone().empty()) {
    _this->_internal_set_timezone(from._internal_timezone());
  }
  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_wechat().empty()) {
    _this->_internal_set_wechat(from._internal_wechat());
  }
  if (!from._internal_phone().empty()) {
    _this->_internal_set_phone(from._internal_phone());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserSetProfileRequest::CopyFrom(const UserSetProfileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.UserSetProfileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSetProfileRequest::IsInitialized() const {
  return true;
}

void UserSetProfileRequest::InternalSwap(UserSetProfileRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.real_name_, lhs_arena,
      &other->_impl_.real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_, lhs_arena,
      &other->_impl_.avatar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_, lhs_arena,
      &other->_impl_.timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.wechat_, lhs_arena,
      &other->_impl_.wechat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phone_, lhs_arena,
      &other->_impl_.phone_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSetProfileRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[9]);
}

// ===================================================================

class UserGetProfileResponse::_Internal {
 public:
};

UserGetProfileResponse::UserGetProfileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.UserGetProfileResponse)
}
UserGetProfileResponse::UserGetProfileResponse(const UserGetProfileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserGetProfileResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.real_name_){}
    , decltype(_impl_.avatar_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.wechat_){}
    , decltype(_impl_.phone_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_real_name().empty()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avatar().empty()) {
    _this->_impl_.avatar_.Set(from._internal_avatar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timezone().empty()) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.wechat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wechat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_wechat().empty()) {
    _this->_impl_.wechat_.Set(from._internal_wechat(), 
      _this->GetArenaForAllocation());
  }
  _impl_.phone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_phone().empty()) {
    _this->_impl_.phone_.Set(from._internal_phone(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.UserGetProfileResponse)
}

inline void UserGetProfileResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.real_name_){}
    , decltype(_impl_.avatar_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.wechat_){}
    , decltype(_impl_.phone_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.wechat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wechat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserGetProfileResponse::~UserGetProfileResponse() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.UserGetProfileResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserGetProfileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.real_name_.Destroy();
  _impl_.avatar_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.email_.Destroy();
  _impl_.timezone_.Destroy();
  _impl_.lang_.Destroy();
  _impl_.wechat_.Destroy();
  _impl_.phone_.Destroy();
}

void UserGetProfileResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserGetProfileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.UserGetProfileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.real_name_.ClearToEmpty();
  _impl_.avatar_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.timezone_.ClearToEmpty();
  _impl_.lang_.ClearToEmpty();
  _impl_.wechat_.ClearToEmpty();
  _impl_.phone_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserGetProfileResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string real_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserGetProfileResponse.real_name"));
        } else
          goto handle_unusual;
        continue;
      // string avatar = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_avatar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserGetProfileResponse.avatar"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserGetProfileResponse.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string email = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserGetProfileResponse.email"));
        } else
          goto handle_unusual;
        continue;
      // string timezone = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserGetProfileResponse.timezone"));
        } else
          goto handle_unusual;
        continue;
      // string lang = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserGetProfileResponse.lang"));
        } else
          goto handle_unusual;
        continue;
      // string wechat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_wechat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserGetProfileResponse.wechat"));
        } else
          goto handle_unusual;
        continue;
      // string phone = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_phone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserGetProfileResponse.phone"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserGetProfileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.UserGetProfileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserGetProfileResponse.real_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_real_name(), target);
  }

  // string avatar = 2;
  if (!this->_internal_avatar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserGetProfileResponse.avatar");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_avatar(), target);
  }

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserGetProfileResponse.nickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nickname(), target);
  }

  // string email = 4;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserGetProfileResponse.email");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_email(), target);
  }

  // string timezone = 8;
  if (!this->_internal_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserGetProfileResponse.timezone");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_timezone(), target);
  }

  // string lang = 9;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserGetProfileResponse.lang");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_lang(), target);
  }

  // string wechat = 11;
  if (!this->_internal_wechat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_wechat().data(), static_cast<int>(this->_internal_wechat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserGetProfileResponse.wechat");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_wechat(), target);
  }

  // string phone = 12;
  if (!this->_internal_phone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserGetProfileResponse.phone");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_phone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.UserGetProfileResponse)
  return target;
}

size_t UserGetProfileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.UserGetProfileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string real_name = 1;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  // string avatar = 2;
  if (!this->_internal_avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string email = 4;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string timezone = 8;
  if (!this->_internal_timezone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  // string lang = 9;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string wechat = 11;
  if (!this->_internal_wechat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_wechat());
  }

  // string phone = 12;
  if (!this->_internal_phone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserGetProfileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserGetProfileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserGetProfileResponse::GetClassData() const { return &_class_data_; }


void UserGetProfileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserGetProfileResponse*>(&to_msg);
  auto& from = static_cast<const UserGetProfileResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.UserGetProfileResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_real_name().empty()) {
    _this->_internal_set_real_name(from._internal_real_name());
  }
  if (!from._internal_avatar().empty()) {
    _this->_internal_set_avatar(from._internal_avatar());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_timezone().empty()) {
    _this->_internal_set_timezone(from._internal_timezone());
  }
  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_wechat().empty()) {
    _this->_internal_set_wechat(from._internal_wechat());
  }
  if (!from._internal_phone().empty()) {
    _this->_internal_set_phone(from._internal_phone());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserGetProfileResponse::CopyFrom(const UserGetProfileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.UserGetProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGetProfileResponse::IsInitialized() const {
  return true;
}

void UserGetProfileResponse::InternalSwap(UserGetProfileResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.real_name_, lhs_arena,
      &other->_impl_.real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_, lhs_arena,
      &other->_impl_.avatar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_, lhs_arena,
      &other->_impl_.timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.wechat_, lhs_arena,
      &other->_impl_.wechat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phone_, lhs_arena,
      &other->_impl_.phone_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserGetProfileResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[10]);
}

// ===================================================================

class UserLogsResponse_Item::_Internal {
 public:
  static const ::palm::rbac::v1::Resource& resource(const UserLogsResponse_Item* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const UserLogsResponse_Item* msg);
};

const ::palm::rbac::v1::Resource&
UserLogsResponse_Item::_Internal::resource(const UserLogsResponse_Item* msg) {
  return *msg->_impl_.resource_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserLogsResponse_Item::_Internal::created_at(const UserLogsResponse_Item* msg) {
  return *msg->_impl_.created_at_;
}
void UserLogsResponse_Item::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
void UserLogsResponse_Item::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
}
UserLogsResponse_Item::UserLogsResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.UserLogsResponse.Item)
}
UserLogsResponse_Item::UserLogsResponse_Item(const UserLogsResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLogsResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::palm::rbac::v1::Resource(*from._impl_.resource_);
  }
  if (from._internal_has_created_at()) {
    _this->_impl_.created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.created_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.UserLogsResponse.Item)
}

inline void UserLogsResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.created_at_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.user_id_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserLogsResponse_Item::~UserLogsResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.UserLogsResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLogsResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.resource_;
  if (this != internal_default_instance()) delete _impl_.created_at_;
}

void UserLogsResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLogsResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.UserLogsResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.created_at_ != nullptr) {
    delete _impl_.created_at_;
  }
  _impl_.created_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLogsResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserLogsResponse.Item.ip"));
        } else
          goto handle_unusual;
        continue;
      // .palm.auth.v1.UserLogsResponse.Item.Level level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::palm::auth::v1::UserLogsResponse_Item_Level>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserLogsResponse.Item.message"));
        } else
          goto handle_unusual;
        continue;
      // .palm.rbac.v1.Resource resource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLogsResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.UserLogsResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserLogsResponse.Item.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // .palm.auth.v1.UserLogsResponse.Item.Level level = 4;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_level(), target);
  }

  // string message = 5;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserLogsResponse.Item.message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_message(), target);
  }

  // .palm.rbac.v1.Resource resource = 6;
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 11;
  if (this->_internal_has_created_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.UserLogsResponse.Item)
  return target;
}

size_t UserLogsResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.UserLogsResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string message = 5;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .palm.rbac.v1.Resource resource = 6;
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  // .google.protobuf.Timestamp created_at = 11;
  if (this->_internal_has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.created_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
  }

  // .palm.auth.v1.UserLogsResponse.Item.Level level = 4;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLogsResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLogsResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLogsResponse_Item::GetClassData() const { return &_class_data_; }


void UserLogsResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLogsResponse_Item*>(&to_msg);
  auto& from = static_cast<const UserLogsResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.UserLogsResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::palm::rbac::v1::Resource::MergeFrom(
        from._internal_resource());
  }
  if (from._internal_has_created_at()) {
    _this->_internal_mutable_created_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_created_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLogsResponse_Item::CopyFrom(const UserLogsResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.UserLogsResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogsResponse_Item::IsInitialized() const {
  return true;
}

void UserLogsResponse_Item::InternalSwap(UserLogsResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserLogsResponse_Item, _impl_.level_)
      + sizeof(UserLogsResponse_Item::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(UserLogsResponse_Item, _impl_.resource_)>(
          reinterpret_cast<char*>(&_impl_.resource_),
          reinterpret_cast<char*>(&other->_impl_.resource_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLogsResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[11]);
}

// ===================================================================

class UserLogsResponse::_Internal {
 public:
  static const ::palm::nut::v1::Pagination& pagination(const UserLogsResponse* msg);
};

const ::palm::nut::v1::Pagination&
UserLogsResponse::_Internal::pagination(const UserLogsResponse* msg) {
  return *msg->_impl_.pagination_;
}
void UserLogsResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
UserLogsResponse::UserLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.UserLogsResponse)
}
UserLogsResponse::UserLogsResponse(const UserLogsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserLogsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::palm::nut::v1::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.UserLogsResponse)
}

inline void UserLogsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserLogsResponse::~UserLogsResponse() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.UserLogsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserLogsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void UserLogsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserLogsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.UserLogsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserLogsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.nut.v1.Pagination pagination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.auth.v1.UserLogsResponse.Item items = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserLogsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.UserLogsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.nut.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.auth.v1.UserLogsResponse.Item items = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.UserLogsResponse)
  return target;
}

size_t UserLogsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.UserLogsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.auth.v1.UserLogsResponse.Item items = 11;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.nut.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserLogsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserLogsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserLogsResponse::GetClassData() const { return &_class_data_; }


void UserLogsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserLogsResponse*>(&to_msg);
  auto& from = static_cast<const UserLogsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.UserLogsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::palm::nut::v1::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserLogsResponse::CopyFrom(const UserLogsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.UserLogsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogsResponse::IsInitialized() const {
  return true;
}

void UserLogsResponse::InternalSwap(UserLogsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserLogsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[12]);
}

// ===================================================================

class UserChangePasswordRequest::_Internal {
 public:
};

UserChangePasswordRequest::UserChangePasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.UserChangePasswordRequest)
}
UserChangePasswordRequest::UserChangePasswordRequest(const UserChangePasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserChangePasswordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.current_password_){}
    , decltype(_impl_.new_password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.current_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_current_password().empty()) {
    _this->_impl_.current_password_.Set(from._internal_current_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.new_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_password().empty()) {
    _this->_impl_.new_password_.Set(from._internal_new_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.UserChangePasswordRequest)
}

inline void UserChangePasswordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.current_password_){}
    , decltype(_impl_.new_password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.current_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.new_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserChangePasswordRequest::~UserChangePasswordRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.UserChangePasswordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserChangePasswordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.current_password_.Destroy();
  _impl_.new_password_.Destroy();
}

void UserChangePasswordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserChangePasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.UserChangePasswordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.current_password_.ClearToEmpty();
  _impl_.new_password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserChangePasswordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string current_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_current_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserChangePasswordRequest.current_password"));
        } else
          goto handle_unusual;
        continue;
      // string new_password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserChangePasswordRequest.new_password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserChangePasswordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.UserChangePasswordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string current_password = 1;
  if (!this->_internal_current_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_password().data(), static_cast<int>(this->_internal_current_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserChangePasswordRequest.current_password");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_current_password(), target);
  }

  // string new_password = 2;
  if (!this->_internal_new_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_password().data(), static_cast<int>(this->_internal_new_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserChangePasswordRequest.new_password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.UserChangePasswordRequest)
  return target;
}

size_t UserChangePasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.UserChangePasswordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string current_password = 1;
  if (!this->_internal_current_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_password());
  }

  // string new_password = 2;
  if (!this->_internal_new_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserChangePasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserChangePasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserChangePasswordRequest::GetClassData() const { return &_class_data_; }


void UserChangePasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserChangePasswordRequest*>(&to_msg);
  auto& from = static_cast<const UserChangePasswordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.UserChangePasswordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_current_password().empty()) {
    _this->_internal_set_current_password(from._internal_current_password());
  }
  if (!from._internal_new_password().empty()) {
    _this->_internal_set_new_password(from._internal_new_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserChangePasswordRequest::CopyFrom(const UserChangePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.UserChangePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChangePasswordRequest::IsInitialized() const {
  return true;
}

void UserChangePasswordRequest::InternalSwap(UserChangePasswordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_password_, lhs_arena,
      &other->_impl_.current_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.new_password_, lhs_arena,
      &other->_impl_.new_password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UserChangePasswordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[13]);
}

// ===================================================================

class UserIndexResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<UserIndexResponse_Item>()._impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const UserIndexResponse_Item* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_sign_in_at(const UserIndexResponse_Item* msg);
  static void set_has_last_sign_in_at(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_sign_in_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& current_sign_in_at(const UserIndexResponse_Item* msg);
  static void set_has_current_sign_in_at(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_current_sign_in_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& confirmed_at(const UserIndexResponse_Item* msg);
  static void set_has_confirmed_at(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& locked_at(const UserIndexResponse_Item* msg);
  static void set_has_locked_at(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted_at(const UserIndexResponse_Item* msg);
  static void set_has_deleted_at(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::updated_at(const UserIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::last_sign_in_at(const UserIndexResponse_Item* msg) {
  return *msg->_impl_.last_sign_in_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::current_sign_in_at(const UserIndexResponse_Item* msg) {
  return *msg->_impl_.current_sign_in_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::confirmed_at(const UserIndexResponse_Item* msg) {
  return *msg->_impl_.confirmed_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::locked_at(const UserIndexResponse_Item* msg) {
  return *msg->_impl_.locked_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UserIndexResponse_Item::_Internal::deleted_at(const UserIndexResponse_Item* msg) {
  return *msg->_impl_.deleted_at_;
}
void UserIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
void UserIndexResponse_Item::clear_last_sign_in_at() {
  if (_impl_.last_sign_in_at_ != nullptr) _impl_.last_sign_in_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void UserIndexResponse_Item::clear_current_sign_in_at() {
  if (_impl_.current_sign_in_at_ != nullptr) _impl_.current_sign_in_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void UserIndexResponse_Item::clear_confirmed_at() {
  if (_impl_.confirmed_at_ != nullptr) _impl_.confirmed_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void UserIndexResponse_Item::clear_locked_at() {
  if (_impl_.locked_at_ != nullptr) _impl_.locked_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void UserIndexResponse_Item::clear_deleted_at() {
  if (_impl_.deleted_at_ != nullptr) _impl_.deleted_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
UserIndexResponse_Item::UserIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.UserIndexResponse.Item)
}
UserIndexResponse_Item::UserIndexResponse_Item(const UserIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.email_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.last_sign_in_ip_){}
    , decltype(_impl_.current_sign_in_ip_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.avatar_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.last_sign_in_at_){nullptr}
    , decltype(_impl_.current_sign_in_at_){nullptr}
    , decltype(_impl_.confirmed_at_){nullptr}
    , decltype(_impl_.locked_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.sign_in_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_real_name().empty()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.last_sign_in_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_sign_in_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_last_sign_in_ip()) {
    _this->_impl_.last_sign_in_ip_.Set(from._internal_last_sign_in_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.current_sign_in_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_sign_in_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_current_sign_in_ip()) {
    _this->_impl_.current_sign_in_ip_.Set(from._internal_current_sign_in_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timezone().empty()) {
    _this->_impl_.timezone_.Set(from._internal_timezone(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avatar().empty()) {
    _this->_impl_.avatar_.Set(from._internal_avatar(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  if (from._internal_has_last_sign_in_at()) {
    _this->_impl_.last_sign_in_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_sign_in_at_);
  }
  if (from._internal_has_current_sign_in_at()) {
    _this->_impl_.current_sign_in_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.current_sign_in_at_);
  }
  if (from._internal_has_confirmed_at()) {
    _this->_impl_.confirmed_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.confirmed_at_);
  }
  if (from._internal_has_locked_at()) {
    _this->_impl_.locked_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.locked_at_);
  }
  if (from._internal_has_deleted_at()) {
    _this->_impl_.deleted_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deleted_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sign_in_count_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sign_in_count_));
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.UserIndexResponse.Item)
}

inline void UserIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.email_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.real_name_){}
    , decltype(_impl_.last_sign_in_ip_){}
    , decltype(_impl_.current_sign_in_ip_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.timezone_){}
    , decltype(_impl_.avatar_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.last_sign_in_at_){nullptr}
    , decltype(_impl_.current_sign_in_at_){nullptr}
    , decltype(_impl_.confirmed_at_){nullptr}
    , decltype(_impl_.locked_at_){nullptr}
    , decltype(_impl_.deleted_at_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.sign_in_count_){0}
  };
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_sign_in_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_sign_in_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.current_sign_in_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_sign_in_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserIndexResponse_Item::~UserIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.UserIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.real_name_.Destroy();
  _impl_.last_sign_in_ip_.Destroy();
  _impl_.current_sign_in_ip_.Destroy();
  _impl_.lang_.Destroy();
  _impl_.timezone_.Destroy();
  _impl_.avatar_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
  if (this != internal_default_instance()) delete _impl_.last_sign_in_at_;
  if (this != internal_default_instance()) delete _impl_.current_sign_in_at_;
  if (this != internal_default_instance()) delete _impl_.confirmed_at_;
  if (this != internal_default_instance()) delete _impl_.locked_at_;
  if (this != internal_default_instance()) delete _impl_.deleted_at_;
}

void UserIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.UserIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.real_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.last_sign_in_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.current_sign_in_ip_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.lang_.ClearToEmpty();
  _impl_.timezone_.ClearToEmpty();
  _impl_.avatar_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  if (cached_has_bits & 0x0000007cu) {
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.last_sign_in_at_ != nullptr);
      _impl_.last_sign_in_at_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.current_sign_in_at_ != nullptr);
      _impl_.current_sign_in_at_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.confirmed_at_ != nullptr);
      _impl_.confirmed_at_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.locked_at_ != nullptr);
      _impl_.locked_at_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.deleted_at_ != nullptr);
      _impl_.deleted_at_->Clear();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sign_in_count_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sign_in_count_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string email = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserIndexResponse.Item.email"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserIndexResponse.Item.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string real_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserIndexResponse.Item.real_name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp last_sign_in_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_sign_in_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string last_sign_in_ip = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_last_sign_in_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserIndexResponse.Item.last_sign_in_ip"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp current_sign_in_at = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_sign_in_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string current_sign_in_ip = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_current_sign_in_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserIndexResponse.Item.current_sign_in_ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 sign_in_count = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.sign_in_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserIndexResponse.Item.lang"));
        } else
          goto handle_unusual;
        continue;
      // string timezone = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserIndexResponse.Item.timezone"));
        } else
          goto handle_unusual;
        continue;
      // string avatar = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_avatar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.UserIndexResponse.Item.avatar"));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp confirmed_at = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_confirmed_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp locked_at = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_locked_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp deleted_at = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.UserIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserIndexResponse.Item.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserIndexResponse.Item.nickname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nickname(), target);
  }

  // string real_name = 4;
  if (!this->_internal_real_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserIndexResponse.Item.real_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_real_name(), target);
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp last_sign_in_at = 11;
  if (_internal_has_last_sign_in_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::last_sign_in_at(this),
        _Internal::last_sign_in_at(this).GetCachedSize(), target, stream);
  }

  // optional string last_sign_in_ip = 12;
  if (_internal_has_last_sign_in_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_sign_in_ip().data(), static_cast<int>(this->_internal_last_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserIndexResponse.Item.last_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_last_sign_in_ip(), target);
  }

  // optional .google.protobuf.Timestamp current_sign_in_at = 13;
  if (_internal_has_current_sign_in_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::current_sign_in_at(this),
        _Internal::current_sign_in_at(this).GetCachedSize(), target, stream);
  }

  // optional string current_sign_in_ip = 14;
  if (_internal_has_current_sign_in_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_sign_in_ip().data(), static_cast<int>(this->_internal_current_sign_in_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserIndexResponse.Item.current_sign_in_ip");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_current_sign_in_ip(), target);
  }

  // int32 sign_in_count = 19;
  if (this->_internal_sign_in_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_sign_in_count(), target);
  }

  // string lang = 21;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserIndexResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_lang(), target);
  }

  // string timezone = 22;
  if (!this->_internal_timezone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserIndexResponse.Item.timezone");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_timezone(), target);
  }

  // string avatar = 23;
  if (!this->_internal_avatar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.UserIndexResponse.Item.avatar");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_avatar(), target);
  }

  // optional .google.protobuf.Timestamp confirmed_at = 27;
  if (_internal_has_confirmed_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::confirmed_at(this),
        _Internal::confirmed_at(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp locked_at = 28;
  if (_internal_has_locked_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::locked_at(this),
        _Internal::locked_at(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp deleted_at = 29;
  if (_internal_has_deleted_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::deleted_at(this),
        _Internal::deleted_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.UserIndexResponse.Item)
  return target;
}

size_t UserIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.UserIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string nickname = 3;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string real_name = 4;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_real_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string last_sign_in_ip = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_last_sign_in_ip());
    }

    // optional string current_sign_in_ip = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_current_sign_in_ip());
    }

  }
  // string lang = 21;
  if (!this->_internal_lang().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string timezone = 22;
  if (!this->_internal_timezone().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timezone());
  }

  // string avatar = 23;
  if (!this->_internal_avatar().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  if (cached_has_bits & 0x0000007cu) {
    // optional .google.protobuf.Timestamp last_sign_in_at = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_sign_in_at_);
    }

    // optional .google.protobuf.Timestamp current_sign_in_at = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.current_sign_in_at_);
    }

    // optional .google.protobuf.Timestamp confirmed_at = 27;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.confirmed_at_);
    }

    // optional .google.protobuf.Timestamp locked_at = 28;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.locked_at_);
    }

    // optional .google.protobuf.Timestamp deleted_at = 29;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deleted_at_);
    }

  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 sign_in_count = 19;
  if (this->_internal_sign_in_count() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_sign_in_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserIndexResponse_Item::GetClassData() const { return &_class_data_; }


void UserIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const UserIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.UserIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_real_name().empty()) {
    _this->_internal_set_real_name(from._internal_real_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_last_sign_in_ip(from._internal_last_sign_in_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_current_sign_in_ip(from._internal_current_sign_in_ip());
    }
  }
  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_timezone().empty()) {
    _this->_internal_set_timezone(from._internal_timezone());
  }
  if (!from._internal_avatar().empty()) {
    _this->_internal_set_avatar(from._internal_avatar());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (cached_has_bits & 0x0000007cu) {
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_last_sign_in_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_last_sign_in_at());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_current_sign_in_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_current_sign_in_at());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_confirmed_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_confirmed_at());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_locked_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_locked_at());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_deleted_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_deleted_at());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_sign_in_count() != 0) {
    _this->_internal_set_sign_in_count(from._internal_sign_in_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserIndexResponse_Item::CopyFrom(const UserIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.UserIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIndexResponse_Item::IsInitialized() const {
  return true;
}

void UserIndexResponse_Item::InternalSwap(UserIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.real_name_, lhs_arena,
      &other->_impl_.real_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_sign_in_ip_, lhs_arena,
      &other->_impl_.last_sign_in_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_sign_in_ip_, lhs_arena,
      &other->_impl_.current_sign_in_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.timezone_, lhs_arena,
      &other->_impl_.timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_, lhs_arena,
      &other->_impl_.avatar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserIndexResponse_Item, _impl_.sign_in_count_)
      + sizeof(UserIndexResponse_Item::_impl_.sign_in_count_)
      - PROTOBUF_FIELD_OFFSET(UserIndexResponse_Item, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[14]);
}

// ===================================================================

class UserIndexResponse::_Internal {
 public:
  static const ::palm::nut::v1::Pagination& pagination(const UserIndexResponse* msg);
};

const ::palm::nut::v1::Pagination&
UserIndexResponse::_Internal::pagination(const UserIndexResponse* msg) {
  return *msg->_impl_.pagination_;
}
void UserIndexResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
UserIndexResponse::UserIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.UserIndexResponse)
}
UserIndexResponse::UserIndexResponse(const UserIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::palm::nut::v1::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.UserIndexResponse)
}

inline void UserIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserIndexResponse::~UserIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.UserIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void UserIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.UserIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.nut.v1.Pagination pagination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.auth.v1.UserIndexResponse.Item items = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.UserIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.nut.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.auth.v1.UserIndexResponse.Item items = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.UserIndexResponse)
  return target;
}

size_t UserIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.UserIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.auth.v1.UserIndexResponse.Item items = 11;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.nut.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserIndexResponse::GetClassData() const { return &_class_data_; }


void UserIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserIndexResponse*>(&to_msg);
  auto& from = static_cast<const UserIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.UserIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::palm::nut::v1::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserIndexResponse::CopyFrom(const UserIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.UserIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIndexResponse::IsInitialized() const {
  return true;
}

void UserIndexResponse::InternalSwap(UserIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[15]);
}

// ===================================================================

class SignInByGoogleRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const SignInByGoogleRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
SignInByGoogleRequest::_Internal::ttl(const SignInByGoogleRequest* msg) {
  return *msg->_impl_.ttl_;
}
void SignInByGoogleRequest::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
}
SignInByGoogleRequest::SignInByGoogleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.SignInByGoogleRequest)
}
SignInByGoogleRequest::SignInByGoogleRequest(const SignInByGoogleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignInByGoogleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){from._impl_.scopes_}
    , decltype(_impl_.code_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.redirect_uri_){}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.ttl_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  _impl_.redirect_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redirect_uri().empty()) {
    _this->_impl_.redirect_uri_.Set(from._internal_redirect_uri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce().empty()) {
    _this->_impl_.nonce_.Set(from._internal_nonce(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ttl()) {
    _this->_impl_.ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ttl_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.SignInByGoogleRequest)
}

inline void SignInByGoogleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scopes_){arena}
    , decltype(_impl_.code_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.redirect_uri_){}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.ttl_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redirect_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignInByGoogleRequest::~SignInByGoogleRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.SignInByGoogleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignInByGoogleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scopes_.~RepeatedPtrField();
  _impl_.code_.Destroy();
  _impl_.state_.Destroy();
  _impl_.redirect_uri_.Destroy();
  _impl_.nonce_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ttl_;
}

void SignInByGoogleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignInByGoogleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.SignInByGoogleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scopes_.Clear();
  _impl_.code_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  _impl_.redirect_uri_.ClearToEmpty();
  _impl_.nonce_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignInByGoogleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string scopes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.SignInByGoogleRequest.scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.SignInByGoogleRequest.code"));
        } else
          goto handle_unusual;
        continue;
      // string state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.SignInByGoogleRequest.state"));
        } else
          goto handle_unusual;
        continue;
      // string redirect_uri = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_redirect_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.SignInByGoogleRequest.redirect_uri"));
        } else
          goto handle_unusual;
        continue;
      // string nonce = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.SignInByGoogleRequest.nonce"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ttl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignInByGoogleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.SignInByGoogleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string scopes = 1;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.SignInByGoogleRequest.scopes");
    target = stream->WriteString(1, s, target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.SignInByGoogleRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string state = 3;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.SignInByGoogleRequest.state");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_state(), target);
  }

  // string redirect_uri = 4;
  if (!this->_internal_redirect_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redirect_uri().data(), static_cast<int>(this->_internal_redirect_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.SignInByGoogleRequest.redirect_uri");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_redirect_uri(), target);
  }

  // string nonce = 9;
  if (!this->_internal_nonce().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.SignInByGoogleRequest.nonce");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_nonce(), target);
  }

  // .google.protobuf.Duration ttl = 11;
  if (this->_internal_has_ttl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.SignInByGoogleRequest)
  return target;
}

size_t SignInByGoogleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.SignInByGoogleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.scopes_.size());
  for (int i = 0, n = _impl_.scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.scopes_.Get(i));
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string state = 3;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string redirect_uri = 4;
  if (!this->_internal_redirect_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redirect_uri());
  }

  // string nonce = 9;
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  // .google.protobuf.Duration ttl = 11;
  if (this->_internal_has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ttl_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignInByGoogleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignInByGoogleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignInByGoogleRequest::GetClassData() const { return &_class_data_; }


void SignInByGoogleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignInByGoogleRequest*>(&to_msg);
  auto& from = static_cast<const SignInByGoogleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.SignInByGoogleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scopes_.MergeFrom(from._impl_.scopes_);
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (!from._internal_redirect_uri().empty()) {
    _this->_internal_set_redirect_uri(from._internal_redirect_uri());
  }
  if (!from._internal_nonce().empty()) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_has_ttl()) {
    _this->_internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ttl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignInByGoogleRequest::CopyFrom(const SignInByGoogleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.SignInByGoogleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInByGoogleRequest::IsInitialized() const {
  return true;
}

void SignInByGoogleRequest::InternalSwap(SignInByGoogleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scopes_.InternalSwap(&other->_impl_.scopes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.redirect_uri_, lhs_arena,
      &other->_impl_.redirect_uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nonce_, lhs_arena,
      &other->_impl_.nonce_, rhs_arena
  );
  swap(_impl_.ttl_, other->_impl_.ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignInByGoogleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[16]);
}

// ===================================================================

class GoogleSignInUrlRequest::_Internal {
 public:
  static const ::palm::auth::v1::Oauth2State& state(const GoogleSignInUrlRequest* msg);
};

const ::palm::auth::v1::Oauth2State&
GoogleSignInUrlRequest::_Internal::state(const GoogleSignInUrlRequest* msg) {
  return *msg->_impl_.state_;
}
GoogleSignInUrlRequest::GoogleSignInUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.GoogleSignInUrlRequest)
}
GoogleSignInUrlRequest::GoogleSignInUrlRequest(const GoogleSignInUrlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GoogleSignInUrlRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.redirect_uri_){}
    , decltype(_impl_.state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.redirect_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redirect_uri().empty()) {
    _this->_impl_.redirect_uri_.Set(from._internal_redirect_uri(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_state()) {
    _this->_impl_.state_ = new ::palm::auth::v1::Oauth2State(*from._impl_.state_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.GoogleSignInUrlRequest)
}

inline void GoogleSignInUrlRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.redirect_uri_){}
    , decltype(_impl_.state_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.redirect_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GoogleSignInUrlRequest::~GoogleSignInUrlRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.GoogleSignInUrlRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GoogleSignInUrlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.redirect_uri_.Destroy();
  if (this != internal_default_instance()) delete _impl_.state_;
}

void GoogleSignInUrlRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GoogleSignInUrlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.GoogleSignInUrlRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.redirect_uri_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.state_ != nullptr) {
    delete _impl_.state_;
  }
  _impl_.state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleSignInUrlRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string redirect_uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_redirect_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.GoogleSignInUrlRequest.redirect_uri"));
        } else
          goto handle_unusual;
        continue;
      // .palm.auth.v1.Oauth2State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GoogleSignInUrlRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.GoogleSignInUrlRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string redirect_uri = 1;
  if (!this->_internal_redirect_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redirect_uri().data(), static_cast<int>(this->_internal_redirect_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.GoogleSignInUrlRequest.redirect_uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_redirect_uri(), target);
  }

  // .palm.auth.v1.Oauth2State state = 2;
  if (this->_internal_has_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::state(this),
        _Internal::state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.GoogleSignInUrlRequest)
  return target;
}

size_t GoogleSignInUrlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.GoogleSignInUrlRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string redirect_uri = 1;
  if (!this->_internal_redirect_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redirect_uri());
  }

  // .palm.auth.v1.Oauth2State state = 2;
  if (this->_internal_has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoogleSignInUrlRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GoogleSignInUrlRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoogleSignInUrlRequest::GetClassData() const { return &_class_data_; }


void GoogleSignInUrlRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GoogleSignInUrlRequest*>(&to_msg);
  auto& from = static_cast<const GoogleSignInUrlRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.GoogleSignInUrlRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_redirect_uri().empty()) {
    _this->_internal_set_redirect_uri(from._internal_redirect_uri());
  }
  if (from._internal_has_state()) {
    _this->_internal_mutable_state()->::palm::auth::v1::Oauth2State::MergeFrom(
        from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleSignInUrlRequest::CopyFrom(const GoogleSignInUrlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.GoogleSignInUrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleSignInUrlRequest::IsInitialized() const {
  return true;
}

void GoogleSignInUrlRequest::InternalSwap(GoogleSignInUrlRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.redirect_uri_, lhs_arena,
      &other->_impl_.redirect_uri_, rhs_arena
  );
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleSignInUrlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[17]);
}

// ===================================================================

class GoogleSignInUrlResponse::_Internal {
 public:
};

GoogleSignInUrlResponse::GoogleSignInUrlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.GoogleSignInUrlResponse)
}
GoogleSignInUrlResponse::GoogleSignInUrlResponse(const GoogleSignInUrlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GoogleSignInUrlResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.nonce_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nonce().empty()) {
    _this->_impl_.nonce_.Set(from._internal_nonce(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.GoogleSignInUrlResponse)
}

inline void GoogleSignInUrlResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.nonce_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GoogleSignInUrlResponse::~GoogleSignInUrlResponse() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.GoogleSignInUrlResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GoogleSignInUrlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  _impl_.nonce_.Destroy();
}

void GoogleSignInUrlResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GoogleSignInUrlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.GoogleSignInUrlResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  _impl_.nonce_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoogleSignInUrlResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.GoogleSignInUrlResponse.url"));
        } else
          goto handle_unusual;
        continue;
      // string nonce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.GoogleSignInUrlResponse.nonce"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GoogleSignInUrlResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.GoogleSignInUrlResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.GoogleSignInUrlResponse.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string nonce = 2;
  if (!this->_internal_nonce().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nonce().data(), static_cast<int>(this->_internal_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.GoogleSignInUrlResponse.nonce");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.GoogleSignInUrlResponse)
  return target;
}

size_t GoogleSignInUrlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.GoogleSignInUrlResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string nonce = 2;
  if (!this->_internal_nonce().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nonce());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoogleSignInUrlResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GoogleSignInUrlResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoogleSignInUrlResponse::GetClassData() const { return &_class_data_; }


void GoogleSignInUrlResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GoogleSignInUrlResponse*>(&to_msg);
  auto& from = static_cast<const GoogleSignInUrlResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.GoogleSignInUrlResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (!from._internal_nonce().empty()) {
    _this->_internal_set_nonce(from._internal_nonce());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoogleSignInUrlResponse::CopyFrom(const GoogleSignInUrlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.GoogleSignInUrlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoogleSignInUrlResponse::IsInitialized() const {
  return true;
}

void GoogleSignInUrlResponse::InternalSwap(GoogleSignInUrlResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nonce_, lhs_arena,
      &other->_impl_.nonce_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GoogleSignInUrlResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[18]);
}

// ===================================================================

class WechatUserBindByIdRequest::_Internal {
 public:
};

WechatUserBindByIdRequest::WechatUserBindByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.WechatUserBindByIdRequest)
}
WechatUserBindByIdRequest::WechatUserBindByIdRequest(const WechatUserBindByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatUserBindByIdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.wechat_user_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wechat_user_id_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.wechat_user_id_));
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.WechatUserBindByIdRequest)
}

inline void WechatUserBindByIdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){0}
    , decltype(_impl_.wechat_user_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WechatUserBindByIdRequest::~WechatUserBindByIdRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.WechatUserBindByIdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatUserBindByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WechatUserBindByIdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatUserBindByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.WechatUserBindByIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.wechat_user_id_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.wechat_user_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatUserBindByIdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 wechat_user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.wechat_user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatUserBindByIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.WechatUserBindByIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_user_id(), target);
  }

  // int32 wechat_user_id = 2;
  if (this->_internal_wechat_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_wechat_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.WechatUserBindByIdRequest)
  return target;
}

size_t WechatUserBindByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.WechatUserBindByIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user_id = 1;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
  }

  // int32 wechat_user_id = 2;
  if (this->_internal_wechat_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_wechat_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatUserBindByIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatUserBindByIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatUserBindByIdRequest::GetClassData() const { return &_class_data_; }


void WechatUserBindByIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatUserBindByIdRequest*>(&to_msg);
  auto& from = static_cast<const WechatUserBindByIdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.WechatUserBindByIdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_wechat_user_id() != 0) {
    _this->_internal_set_wechat_user_id(from._internal_wechat_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatUserBindByIdRequest::CopyFrom(const WechatUserBindByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.WechatUserBindByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatUserBindByIdRequest::IsInitialized() const {
  return true;
}

void WechatUserBindByIdRequest::InternalSwap(WechatUserBindByIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WechatUserBindByIdRequest, _impl_.wechat_user_id_)
      + sizeof(WechatUserBindByIdRequest::_impl_.wechat_user_id_)
      - PROTOBUF_FIELD_OFFSET(WechatUserBindByIdRequest, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatUserBindByIdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[19]);
}

// ===================================================================

class WechatUserBindByAccountRequest::_Internal {
 public:
};

WechatUserBindByAccountRequest::WechatUserBindByAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.WechatUserBindByAccountRequest)
}
WechatUserBindByAccountRequest::WechatUserBindByAccountRequest(const WechatUserBindByAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatUserBindByAccountRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.WechatUserBindByAccountRequest)
}

inline void WechatUserBindByAccountRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.password_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatUserBindByAccountRequest::~WechatUserBindByAccountRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.WechatUserBindByAccountRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatUserBindByAccountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
  _impl_.password_.Destroy();
}

void WechatUserBindByAccountRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatUserBindByAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.WechatUserBindByAccountRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatUserBindByAccountRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string nickname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatUserBindByAccountRequest.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatUserBindByAccountRequest.password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatUserBindByAccountRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.WechatUserBindByAccountRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatUserBindByAccountRequest.nickname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nickname(), target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatUserBindByAccountRequest.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.WechatUserBindByAccountRequest)
  return target;
}

size_t WechatUserBindByAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.WechatUserBindByAccountRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 1;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatUserBindByAccountRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatUserBindByAccountRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatUserBindByAccountRequest::GetClassData() const { return &_class_data_; }


void WechatUserBindByAccountRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatUserBindByAccountRequest*>(&to_msg);
  auto& from = static_cast<const WechatUserBindByAccountRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.WechatUserBindByAccountRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatUserBindByAccountRequest::CopyFrom(const WechatUserBindByAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.WechatUserBindByAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatUserBindByAccountRequest::IsInitialized() const {
  return true;
}

void WechatUserBindByAccountRequest::InternalSwap(WechatUserBindByAccountRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatUserBindByAccountRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[20]);
}

// ===================================================================

class WechatUserQueryByOpenIdRequest::_Internal {
 public:
};

WechatUserQueryByOpenIdRequest::WechatUserQueryByOpenIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.WechatUserQueryByOpenIdRequest)
}
WechatUserQueryByOpenIdRequest::WechatUserQueryByOpenIdRequest(const WechatUserQueryByOpenIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatUserQueryByOpenIdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_open_id().empty()) {
    _this->_impl_.open_id_.Set(from._internal_open_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.WechatUserQueryByOpenIdRequest)
}

inline void WechatUserQueryByOpenIdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatUserQueryByOpenIdRequest::~WechatUserQueryByOpenIdRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.WechatUserQueryByOpenIdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatUserQueryByOpenIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_id_.Destroy();
  _impl_.open_id_.Destroy();
}

void WechatUserQueryByOpenIdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatUserQueryByOpenIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.WechatUserQueryByOpenIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_id_.ClearToEmpty();
  _impl_.open_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatUserQueryByOpenIdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatUserQueryByOpenIdRequest.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string open_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_open_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatUserQueryByOpenIdRequest.open_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatUserQueryByOpenIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.WechatUserQueryByOpenIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatUserQueryByOpenIdRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string open_id = 2;
  if (!this->_internal_open_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_id().data(), static_cast<int>(this->_internal_open_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatUserQueryByOpenIdRequest.open_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_open_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.WechatUserQueryByOpenIdRequest)
  return target;
}

size_t WechatUserQueryByOpenIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.WechatUserQueryByOpenIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string open_id = 2;
  if (!this->_internal_open_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatUserQueryByOpenIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatUserQueryByOpenIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatUserQueryByOpenIdRequest::GetClassData() const { return &_class_data_; }


void WechatUserQueryByOpenIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatUserQueryByOpenIdRequest*>(&to_msg);
  auto& from = static_cast<const WechatUserQueryByOpenIdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.WechatUserQueryByOpenIdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_open_id().empty()) {
    _this->_internal_set_open_id(from._internal_open_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatUserQueryByOpenIdRequest::CopyFrom(const WechatUserQueryByOpenIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.WechatUserQueryByOpenIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatUserQueryByOpenIdRequest::IsInitialized() const {
  return true;
}

void WechatUserQueryByOpenIdRequest::InternalSwap(WechatUserQueryByOpenIdRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.open_id_, lhs_arena,
      &other->_impl_.open_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatUserQueryByOpenIdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[21]);
}

// ===================================================================

class WechatUserQueryByUnionIdRequest::_Internal {
 public:
};

WechatUserQueryByUnionIdRequest::WechatUserQueryByUnionIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.WechatUserQueryByUnionIdRequest)
}
WechatUserQueryByUnionIdRequest::WechatUserQueryByUnionIdRequest(const WechatUserQueryByUnionIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatUserQueryByUnionIdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.union_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_union_id().empty()) {
    _this->_impl_.union_id_.Set(from._internal_union_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.WechatUserQueryByUnionIdRequest)
}

inline void WechatUserQueryByUnionIdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.union_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatUserQueryByUnionIdRequest::~WechatUserQueryByUnionIdRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.WechatUserQueryByUnionIdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatUserQueryByUnionIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.union_id_.Destroy();
}

void WechatUserQueryByUnionIdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatUserQueryByUnionIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.WechatUserQueryByUnionIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.union_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatUserQueryByUnionIdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string union_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_union_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatUserQueryByUnionIdRequest.union_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatUserQueryByUnionIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.WechatUserQueryByUnionIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string union_id = 1;
  if (!this->_internal_union_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_union_id().data(), static_cast<int>(this->_internal_union_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatUserQueryByUnionIdRequest.union_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_union_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.WechatUserQueryByUnionIdRequest)
  return target;
}

size_t WechatUserQueryByUnionIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.WechatUserQueryByUnionIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string union_id = 1;
  if (!this->_internal_union_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_union_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatUserQueryByUnionIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatUserQueryByUnionIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatUserQueryByUnionIdRequest::GetClassData() const { return &_class_data_; }


void WechatUserQueryByUnionIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatUserQueryByUnionIdRequest*>(&to_msg);
  auto& from = static_cast<const WechatUserQueryByUnionIdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.WechatUserQueryByUnionIdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_union_id().empty()) {
    _this->_internal_set_union_id(from._internal_union_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatUserQueryByUnionIdRequest::CopyFrom(const WechatUserQueryByUnionIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.WechatUserQueryByUnionIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatUserQueryByUnionIdRequest::IsInitialized() const {
  return true;
}

void WechatUserQueryByUnionIdRequest::InternalSwap(WechatUserQueryByUnionIdRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.union_id_, lhs_arena,
      &other->_impl_.union_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatUserQueryByUnionIdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[22]);
}

// ===================================================================

class WechatAllMiniProgramUserResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<WechatAllMiniProgramUserResponse_Item>()._impl_._has_bits_);
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_avatar_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WechatAllMiniProgramUserResponse_Item::WechatAllMiniProgramUserResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.WechatAllMiniProgramUserResponse.Item)
}
WechatAllMiniProgramUserResponse_Item::WechatAllMiniProgramUserResponse_Item(const WechatAllMiniProgramUserResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatAllMiniProgramUserResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.avatar_url_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.user_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_union_id().empty()) {
    _this->_impl_.union_id_.Set(from._internal_union_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_open_id().empty()) {
    _this->_impl_.open_id_.Set(from._internal_open_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatar_url()) {
    _this->_impl_.avatar_url_.Set(from._internal_avatar_url(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.user_id_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.user_id_));
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.WechatAllMiniProgramUserResponse.Item)
}

inline void WechatAllMiniProgramUserResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.avatar_url_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.user_id_){0}
  };
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatAllMiniProgramUserResponse_Item::~WechatAllMiniProgramUserResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.WechatAllMiniProgramUserResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatAllMiniProgramUserResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.union_id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.open_id_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.avatar_url_.Destroy();
}

void WechatAllMiniProgramUserResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatAllMiniProgramUserResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.WechatAllMiniProgramUserResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.union_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.open_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.nickname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.avatar_url_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.user_id_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.user_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatAllMiniProgramUserResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string union_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_union_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatAllMiniProgramUserResponse.Item.union_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatAllMiniProgramUserResponse.Item.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string open_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_open_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatAllMiniProgramUserResponse.Item.open_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string nickname = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatAllMiniProgramUserResponse.Item.nickname"));
        } else
          goto handle_unusual;
        continue;
      // optional string avatar_url = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatAllMiniProgramUserResponse.Item.avatar_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatAllMiniProgramUserResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.WechatAllMiniProgramUserResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  // string union_id = 3;
  if (!this->_internal_union_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_union_id().data(), static_cast<int>(this->_internal_union_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatAllMiniProgramUserResponse.Item.union_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_union_id(), target);
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatAllMiniProgramUserResponse.Item.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  // string open_id = 5;
  if (!this->_internal_open_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_id().data(), static_cast<int>(this->_internal_open_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatAllMiniProgramUserResponse.Item.open_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_open_id(), target);
  }

  // optional string nickname = 11;
  if (_internal_has_nickname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatAllMiniProgramUserResponse.Item.nickname");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_nickname(), target);
  }

  // optional string avatar_url = 12;
  if (_internal_has_avatar_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatAllMiniProgramUserResponse.Item.avatar_url");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_avatar_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.WechatAllMiniProgramUserResponse.Item)
  return target;
}

size_t WechatAllMiniProgramUserResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.WechatAllMiniProgramUserResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string union_id = 3;
  if (!this->_internal_union_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_union_id());
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string open_id = 5;
  if (!this->_internal_open_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string nickname = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional string avatar_url = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_avatar_url());
    }

  }
  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatAllMiniProgramUserResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatAllMiniProgramUserResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatAllMiniProgramUserResponse_Item::GetClassData() const { return &_class_data_; }


void WechatAllMiniProgramUserResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatAllMiniProgramUserResponse_Item*>(&to_msg);
  auto& from = static_cast<const WechatAllMiniProgramUserResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.WechatAllMiniProgramUserResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_union_id().empty()) {
    _this->_internal_set_union_id(from._internal_union_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_open_id().empty()) {
    _this->_internal_set_open_id(from._internal_open_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_avatar_url(from._internal_avatar_url());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatAllMiniProgramUserResponse_Item::CopyFrom(const WechatAllMiniProgramUserResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.WechatAllMiniProgramUserResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatAllMiniProgramUserResponse_Item::IsInitialized() const {
  return true;
}

void WechatAllMiniProgramUserResponse_Item::InternalSwap(WechatAllMiniProgramUserResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.union_id_, lhs_arena,
      &other->_impl_.union_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.open_id_, lhs_arena,
      &other->_impl_.open_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_url_, lhs_arena,
      &other->_impl_.avatar_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WechatAllMiniProgramUserResponse_Item, _impl_.user_id_)
      + sizeof(WechatAllMiniProgramUserResponse_Item::_impl_.user_id_)
      - PROTOBUF_FIELD_OFFSET(WechatAllMiniProgramUserResponse_Item, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatAllMiniProgramUserResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[23]);
}

// ===================================================================

class WechatAllMiniProgramUserResponse::_Internal {
 public:
};

WechatAllMiniProgramUserResponse::WechatAllMiniProgramUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.WechatAllMiniProgramUserResponse)
}
WechatAllMiniProgramUserResponse::WechatAllMiniProgramUserResponse(const WechatAllMiniProgramUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatAllMiniProgramUserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.WechatAllMiniProgramUserResponse)
}

inline void WechatAllMiniProgramUserResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WechatAllMiniProgramUserResponse::~WechatAllMiniProgramUserResponse() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.WechatAllMiniProgramUserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatAllMiniProgramUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void WechatAllMiniProgramUserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatAllMiniProgramUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.WechatAllMiniProgramUserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatAllMiniProgramUserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.auth.v1.WechatAllMiniProgramUserResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatAllMiniProgramUserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.WechatAllMiniProgramUserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.auth.v1.WechatAllMiniProgramUserResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.WechatAllMiniProgramUserResponse)
  return target;
}

size_t WechatAllMiniProgramUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.WechatAllMiniProgramUserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.auth.v1.WechatAllMiniProgramUserResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatAllMiniProgramUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatAllMiniProgramUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatAllMiniProgramUserResponse::GetClassData() const { return &_class_data_; }


void WechatAllMiniProgramUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatAllMiniProgramUserResponse*>(&to_msg);
  auto& from = static_cast<const WechatAllMiniProgramUserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.WechatAllMiniProgramUserResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatAllMiniProgramUserResponse::CopyFrom(const WechatAllMiniProgramUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.WechatAllMiniProgramUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatAllMiniProgramUserResponse::IsInitialized() const {
  return true;
}

void WechatAllMiniProgramUserResponse::InternalSwap(WechatAllMiniProgramUserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatAllMiniProgramUserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[24]);
}

// ===================================================================

class WechatAllOauth2UserResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<WechatAllOauth2UserResponse_Item>()._impl_._has_bits_);
  static void set_has_head_img_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WechatAllOauth2UserResponse_Item::WechatAllOauth2UserResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.WechatAllOauth2UserResponse.Item)
}
WechatAllOauth2UserResponse_Item::WechatAllOauth2UserResponse_Item(const WechatAllOauth2UserResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatAllOauth2UserResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.privilege_){from._impl_.privilege_}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.head_img_url_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.sex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_union_id().empty()) {
    _this->_impl_.union_id_.Set(from._internal_union_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_open_id().empty()) {
    _this->_impl_.open_id_.Set(from._internal_open_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_city().empty()) {
    _this->_impl_.city_.Set(from._internal_city(), 
      _this->GetArenaForAllocation());
  }
  _impl_.province_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.province_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_province().empty()) {
    _this->_impl_.province_.Set(from._internal_province(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.head_img_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.head_img_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_head_img_url()) {
    _this->_impl_.head_img_url_.Set(from._internal_head_img_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sex_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sex_));
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.WechatAllOauth2UserResponse.Item)
}

inline void WechatAllOauth2UserResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.privilege_){arena}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.city_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.head_img_url_){}
    , decltype(_impl_.lang_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.user_id_){0}
    , decltype(_impl_.sex_){0}
  };
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.city_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.city_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.province_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.province_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.head_img_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.head_img_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatAllOauth2UserResponse_Item::~WechatAllOauth2UserResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.WechatAllOauth2UserResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatAllOauth2UserResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.privilege_.~RepeatedPtrField();
  _impl_.union_id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.open_id_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.city_.Destroy();
  _impl_.province_.Destroy();
  _impl_.country_.Destroy();
  _impl_.head_img_url_.Destroy();
  _impl_.lang_.Destroy();
}

void WechatAllOauth2UserResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatAllOauth2UserResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.WechatAllOauth2UserResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.privilege_.Clear();
  _impl_.union_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.open_id_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.city_.ClearToEmpty();
  _impl_.province_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.head_img_url_.ClearNonDefaultToEmpty();
  }
  _impl_.lang_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sex_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sex_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatAllOauth2UserResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string union_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_union_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatAllOauth2UserResponse.Item.union_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatAllOauth2UserResponse.Item.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string open_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_open_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatAllOauth2UserResponse.Item.open_id"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatAllOauth2UserResponse.Item.nickname"));
        } else
          goto handle_unusual;
        continue;
      // int32 sex = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string city = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_city();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatAllOauth2UserResponse.Item.city"));
        } else
          goto handle_unusual;
        continue;
      // string province = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_province();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatAllOauth2UserResponse.Item.province"));
        } else
          goto handle_unusual;
        continue;
      // string country = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatAllOauth2UserResponse.Item.country"));
        } else
          goto handle_unusual;
        continue;
      // optional string head_img_url = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_head_img_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatAllOauth2UserResponse.Item.head_img_url"));
        } else
          goto handle_unusual;
        continue;
      // repeated string privilege = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_privilege();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string lang = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatAllOauth2UserResponse.Item.lang"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatAllOauth2UserResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.WechatAllOauth2UserResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  // string union_id = 3;
  if (!this->_internal_union_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_union_id().data(), static_cast<int>(this->_internal_union_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatAllOauth2UserResponse.Item.union_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_union_id(), target);
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatAllOauth2UserResponse.Item.app_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_id(), target);
  }

  // string open_id = 5;
  if (!this->_internal_open_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_id().data(), static_cast<int>(this->_internal_open_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatAllOauth2UserResponse.Item.open_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_open_id(), target);
  }

  // string nickname = 11;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatAllOauth2UserResponse.Item.nickname");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_nickname(), target);
  }

  // int32 sex = 12;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_sex(), target);
  }

  // string city = 13;
  if (!this->_internal_city().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatAllOauth2UserResponse.Item.city");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_city(), target);
  }

  // string province = 14;
  if (!this->_internal_province().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_province().data(), static_cast<int>(this->_internal_province().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatAllOauth2UserResponse.Item.province");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_province(), target);
  }

  // string country = 15;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatAllOauth2UserResponse.Item.country");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_country(), target);
  }

  // optional string head_img_url = 16;
  if (_internal_has_head_img_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_head_img_url().data(), static_cast<int>(this->_internal_head_img_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatAllOauth2UserResponse.Item.head_img_url");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_head_img_url(), target);
  }

  // repeated string privilege = 17;
  for (int i = 0, n = this->_internal_privilege_size(); i < n; i++) {
    const auto& s = this->_internal_privilege(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatAllOauth2UserResponse.Item.privilege");
    target = stream->WriteString(17, s, target);
  }

  // string lang = 18;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatAllOauth2UserResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_lang(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.WechatAllOauth2UserResponse.Item)
  return target;
}

size_t WechatAllOauth2UserResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.WechatAllOauth2UserResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string privilege = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.privilege_.size());
  for (int i = 0, n = _impl_.privilege_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.privilege_.Get(i));
  }

  // string union_id = 3;
  if (!this->_internal_union_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_union_id());
  }

  // string app_id = 4;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string open_id = 5;
  if (!this->_internal_open_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_id());
  }

  // string nickname = 11;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string city = 13;
  if (!this->_internal_city().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string province = 14;
  if (!this->_internal_province().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_province());
  }

  // string country = 15;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // optional string head_img_url = 16;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_head_img_url());
  }

  // string lang = 18;
  if (!this->_internal_lang().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_id());
  }

  // int32 sex = 12;
  if (this->_internal_sex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatAllOauth2UserResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatAllOauth2UserResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatAllOauth2UserResponse_Item::GetClassData() const { return &_class_data_; }


void WechatAllOauth2UserResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatAllOauth2UserResponse_Item*>(&to_msg);
  auto& from = static_cast<const WechatAllOauth2UserResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.WechatAllOauth2UserResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.privilege_.MergeFrom(from._impl_.privilege_);
  if (!from._internal_union_id().empty()) {
    _this->_internal_set_union_id(from._internal_union_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_open_id().empty()) {
    _this->_internal_set_open_id(from._internal_open_id());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_city().empty()) {
    _this->_internal_set_city(from._internal_city());
  }
  if (!from._internal_province().empty()) {
    _this->_internal_set_province(from._internal_province());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (from._internal_has_head_img_url()) {
    _this->_internal_set_head_img_url(from._internal_head_img_url());
  }
  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_sex() != 0) {
    _this->_internal_set_sex(from._internal_sex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatAllOauth2UserResponse_Item::CopyFrom(const WechatAllOauth2UserResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.WechatAllOauth2UserResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatAllOauth2UserResponse_Item::IsInitialized() const {
  return true;
}

void WechatAllOauth2UserResponse_Item::InternalSwap(WechatAllOauth2UserResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.privilege_.InternalSwap(&other->_impl_.privilege_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.union_id_, lhs_arena,
      &other->_impl_.union_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.open_id_, lhs_arena,
      &other->_impl_.open_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.city_, lhs_arena,
      &other->_impl_.city_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.province_, lhs_arena,
      &other->_impl_.province_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.head_img_url_, lhs_arena,
      &other->_impl_.head_img_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WechatAllOauth2UserResponse_Item, _impl_.sex_)
      + sizeof(WechatAllOauth2UserResponse_Item::_impl_.sex_)
      - PROTOBUF_FIELD_OFFSET(WechatAllOauth2UserResponse_Item, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatAllOauth2UserResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[25]);
}

// ===================================================================

class WechatAllOauth2UserResponse::_Internal {
 public:
};

WechatAllOauth2UserResponse::WechatAllOauth2UserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.WechatAllOauth2UserResponse)
}
WechatAllOauth2UserResponse::WechatAllOauth2UserResponse(const WechatAllOauth2UserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatAllOauth2UserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.WechatAllOauth2UserResponse)
}

inline void WechatAllOauth2UserResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WechatAllOauth2UserResponse::~WechatAllOauth2UserResponse() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.WechatAllOauth2UserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatAllOauth2UserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void WechatAllOauth2UserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatAllOauth2UserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.WechatAllOauth2UserResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatAllOauth2UserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.auth.v1.WechatAllOauth2UserResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatAllOauth2UserResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.WechatAllOauth2UserResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.auth.v1.WechatAllOauth2UserResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.WechatAllOauth2UserResponse)
  return target;
}

size_t WechatAllOauth2UserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.WechatAllOauth2UserResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.auth.v1.WechatAllOauth2UserResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatAllOauth2UserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatAllOauth2UserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatAllOauth2UserResponse::GetClassData() const { return &_class_data_; }


void WechatAllOauth2UserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatAllOauth2UserResponse*>(&to_msg);
  auto& from = static_cast<const WechatAllOauth2UserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.WechatAllOauth2UserResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatAllOauth2UserResponse::CopyFrom(const WechatAllOauth2UserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.WechatAllOauth2UserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatAllOauth2UserResponse::IsInitialized() const {
  return true;
}

void WechatAllOauth2UserResponse::InternalSwap(WechatAllOauth2UserResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatAllOauth2UserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[26]);
}

// ===================================================================

class SignInByWechatOauth2Request::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const SignInByWechatOauth2Request* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
SignInByWechatOauth2Request::_Internal::ttl(const SignInByWechatOauth2Request* msg) {
  return *msg->_impl_.ttl_;
}
void SignInByWechatOauth2Request::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
}
SignInByWechatOauth2Request::SignInByWechatOauth2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.SignInByWechatOauth2Request)
}
SignInByWechatOauth2Request::SignInByWechatOauth2Request(const SignInByWechatOauth2Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignInByWechatOauth2Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.language_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ttl()) {
    _this->_impl_.ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ttl_);
  }
  _this->_impl_.language_ = from._impl_.language_;
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.SignInByWechatOauth2Request)
}

inline void SignInByWechatOauth2Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.language_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignInByWechatOauth2Request::~SignInByWechatOauth2Request() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.SignInByWechatOauth2Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignInByWechatOauth2Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.state_.Destroy();
  _impl_.code_.Destroy();
  _impl_.app_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ttl_;
}

void SignInByWechatOauth2Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignInByWechatOauth2Request::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.SignInByWechatOauth2Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
  _impl_.language_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignInByWechatOauth2Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.SignInByWechatOauth2Request.state"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.SignInByWechatOauth2Request.code"));
        } else
          goto handle_unusual;
        continue;
      // string app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.SignInByWechatOauth2Request.app_id"));
        } else
          goto handle_unusual;
        continue;
      // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::palm::orchid::v1::WechatOauth2QrConnectRequest_Language>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ttl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SignInByWechatOauth2Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.SignInByWechatOauth2Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string state = 1;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.SignInByWechatOauth2Request.state");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_state(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.SignInByWechatOauth2Request.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string app_id = 3;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.SignInByWechatOauth2Request.app_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_app_id(), target);
  }

  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 8;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_language(), target);
  }

  // .google.protobuf.Duration ttl = 11;
  if (this->_internal_has_ttl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.SignInByWechatOauth2Request)
  return target;
}

size_t SignInByWechatOauth2Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.SignInByWechatOauth2Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string state = 1;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string app_id = 3;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // .google.protobuf.Duration ttl = 11;
  if (this->_internal_has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ttl_);
  }

  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 8;
  if (this->_internal_language() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignInByWechatOauth2Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignInByWechatOauth2Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignInByWechatOauth2Request::GetClassData() const { return &_class_data_; }


void SignInByWechatOauth2Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignInByWechatOauth2Request*>(&to_msg);
  auto& from = static_cast<const SignInByWechatOauth2Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.SignInByWechatOauth2Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (from._internal_has_ttl()) {
    _this->_internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ttl());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignInByWechatOauth2Request::CopyFrom(const SignInByWechatOauth2Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.SignInByWechatOauth2Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInByWechatOauth2Request::IsInitialized() const {
  return true;
}

void SignInByWechatOauth2Request::InternalSwap(SignInByWechatOauth2Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignInByWechatOauth2Request, _impl_.language_)
      + sizeof(SignInByWechatOauth2Request::_impl_.language_)
      - PROTOBUF_FIELD_OFFSET(SignInByWechatOauth2Request, _impl_.ttl_)>(
          reinterpret_cast<char*>(&_impl_.ttl_),
          reinterpret_cast<char*>(&other->_impl_.ttl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignInByWechatOauth2Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[27]);
}

// ===================================================================

class WechatOauth2SignInStateResponse::_Internal {
 public:
};

WechatOauth2SignInStateResponse::WechatOauth2SignInStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.WechatOauth2SignInStateResponse)
}
WechatOauth2SignInStateResponse::WechatOauth2SignInStateResponse(const WechatOauth2SignInStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatOauth2SignInStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.WechatOauth2SignInStateResponse)
}

inline void WechatOauth2SignInStateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatOauth2SignInStateResponse::~WechatOauth2SignInStateResponse() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.WechatOauth2SignInStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatOauth2SignInStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.state_.Destroy();
}

void WechatOauth2SignInStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatOauth2SignInStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.WechatOauth2SignInStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatOauth2SignInStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatOauth2SignInStateResponse.state"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatOauth2SignInStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.WechatOauth2SignInStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string state = 1;
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatOauth2SignInStateResponse.state");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.WechatOauth2SignInStateResponse)
  return target;
}

size_t WechatOauth2SignInStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.WechatOauth2SignInStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string state = 1;
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatOauth2SignInStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatOauth2SignInStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatOauth2SignInStateResponse::GetClassData() const { return &_class_data_; }


void WechatOauth2SignInStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatOauth2SignInStateResponse*>(&to_msg);
  auto& from = static_cast<const WechatOauth2SignInStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.WechatOauth2SignInStateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatOauth2SignInStateResponse::CopyFrom(const WechatOauth2SignInStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.WechatOauth2SignInStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatOauth2SignInStateResponse::IsInitialized() const {
  return true;
}

void WechatOauth2SignInStateResponse::InternalSwap(WechatOauth2SignInStateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.state_, lhs_arena,
      &other->_impl_.state_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatOauth2SignInStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[28]);
}

// ===================================================================

class WechatOauth2SignInUrlRequest::_Internal {
 public:
};

WechatOauth2SignInUrlRequest::WechatOauth2SignInUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.WechatOauth2SignInUrlRequest)
}
WechatOauth2SignInUrlRequest::WechatOauth2SignInUrlRequest(const WechatOauth2SignInUrlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatOauth2SignInUrlRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.redirect_uri_){}
    , decltype(_impl_.language_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.redirect_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redirect_uri().empty()) {
    _this->_impl_.redirect_uri_.Set(from._internal_redirect_uri(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.language_ = from._impl_.language_;
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.WechatOauth2SignInUrlRequest)
}

inline void WechatOauth2SignInUrlRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.app_id_){}
    , decltype(_impl_.redirect_uri_){}
    , decltype(_impl_.language_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redirect_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redirect_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatOauth2SignInUrlRequest::~WechatOauth2SignInUrlRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.WechatOauth2SignInUrlRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatOauth2SignInUrlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_id_.Destroy();
  _impl_.redirect_uri_.Destroy();
}

void WechatOauth2SignInUrlRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatOauth2SignInUrlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.WechatOauth2SignInUrlRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_id_.ClearToEmpty();
  _impl_.redirect_uri_.ClearToEmpty();
  _impl_.language_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatOauth2SignInUrlRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatOauth2SignInUrlRequest.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string redirect_uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_redirect_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatOauth2SignInUrlRequest.redirect_uri"));
        } else
          goto handle_unusual;
        continue;
      // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::palm::orchid::v1::WechatOauth2QrConnectRequest_Language>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatOauth2SignInUrlRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.WechatOauth2SignInUrlRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatOauth2SignInUrlRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string redirect_uri = 2;
  if (!this->_internal_redirect_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redirect_uri().data(), static_cast<int>(this->_internal_redirect_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatOauth2SignInUrlRequest.redirect_uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_redirect_uri(), target);
  }

  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 3;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.WechatOauth2SignInUrlRequest)
  return target;
}

size_t WechatOauth2SignInUrlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.WechatOauth2SignInUrlRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string redirect_uri = 2;
  if (!this->_internal_redirect_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redirect_uri());
  }

  // .palm.orchid.v1.WechatOauth2QrConnectRequest.Language language = 3;
  if (this->_internal_language() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatOauth2SignInUrlRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatOauth2SignInUrlRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatOauth2SignInUrlRequest::GetClassData() const { return &_class_data_; }


void WechatOauth2SignInUrlRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatOauth2SignInUrlRequest*>(&to_msg);
  auto& from = static_cast<const WechatOauth2SignInUrlRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.WechatOauth2SignInUrlRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_redirect_uri().empty()) {
    _this->_internal_set_redirect_uri(from._internal_redirect_uri());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatOauth2SignInUrlRequest::CopyFrom(const WechatOauth2SignInUrlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.WechatOauth2SignInUrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatOauth2SignInUrlRequest::IsInitialized() const {
  return true;
}

void WechatOauth2SignInUrlRequest::InternalSwap(WechatOauth2SignInUrlRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.redirect_uri_, lhs_arena,
      &other->_impl_.redirect_uri_, rhs_arena
  );
  swap(_impl_.language_, other->_impl_.language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatOauth2SignInUrlRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[29]);
}

// ===================================================================

class WechatMiniProgramUser::_Internal {
 public:
  using HasBits = decltype(std::declval<WechatMiniProgramUser>()._impl_._has_bits_);
  static void set_has_nickname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_avatar_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WechatMiniProgramUser::WechatMiniProgramUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.WechatMiniProgramUser)
}
WechatMiniProgramUser::WechatMiniProgramUser(const WechatMiniProgramUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WechatMiniProgramUser* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.avatar_url_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_open_id().empty()) {
    _this->_impl_.open_id_.Set(from._internal_open_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_union_id().empty()) {
    _this->_impl_.union_id_.Set(from._internal_union_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_nickname()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_avatar_url()) {
    _this->_impl_.avatar_url_.Set(from._internal_avatar_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.WechatMiniProgramUser)
}

inline void WechatMiniProgramUser::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.app_id_){}
    , decltype(_impl_.open_id_){}
    , decltype(_impl_.union_id_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.avatar_url_){}
  };
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.open_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.open_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.union_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.union_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WechatMiniProgramUser::~WechatMiniProgramUser() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.WechatMiniProgramUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WechatMiniProgramUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.app_id_.Destroy();
  _impl_.open_id_.Destroy();
  _impl_.union_id_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.avatar_url_.Destroy();
}

void WechatMiniProgramUser::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WechatMiniProgramUser::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.WechatMiniProgramUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.app_id_.ClearToEmpty();
  _impl_.open_id_.ClearToEmpty();
  _impl_.union_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.nickname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.avatar_url_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WechatMiniProgramUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatMiniProgramUser.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string open_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_open_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatMiniProgramUser.open_id"));
        } else
          goto handle_unusual;
        continue;
      // string union_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_union_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatMiniProgramUser.union_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string nickname = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatMiniProgramUser.nickname"));
        } else
          goto handle_unusual;
        continue;
      // optional string avatar_url = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_avatar_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.WechatMiniProgramUser.avatar_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WechatMiniProgramUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.WechatMiniProgramUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 11;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatMiniProgramUser.app_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_app_id(), target);
  }

  // string open_id = 12;
  if (!this->_internal_open_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_id().data(), static_cast<int>(this->_internal_open_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatMiniProgramUser.open_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_open_id(), target);
  }

  // string union_id = 13;
  if (!this->_internal_union_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_union_id().data(), static_cast<int>(this->_internal_union_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatMiniProgramUser.union_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_union_id(), target);
  }

  // optional string nickname = 21;
  if (_internal_has_nickname()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatMiniProgramUser.nickname");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_nickname(), target);
  }

  // optional string avatar_url = 22;
  if (_internal_has_avatar_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.WechatMiniProgramUser.avatar_url");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_avatar_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.WechatMiniProgramUser)
  return target;
}

size_t WechatMiniProgramUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.WechatMiniProgramUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 11;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string open_id = 12;
  if (!this->_internal_open_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_id());
  }

  // string union_id = 13;
  if (!this->_internal_union_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_union_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string nickname = 21;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nickname());
    }

    // optional string avatar_url = 22;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_avatar_url());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WechatMiniProgramUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WechatMiniProgramUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WechatMiniProgramUser::GetClassData() const { return &_class_data_; }


void WechatMiniProgramUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WechatMiniProgramUser*>(&to_msg);
  auto& from = static_cast<const WechatMiniProgramUser&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.WechatMiniProgramUser)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_open_id().empty()) {
    _this->_internal_set_open_id(from._internal_open_id());
  }
  if (!from._internal_union_id().empty()) {
    _this->_internal_set_union_id(from._internal_union_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_nickname(from._internal_nickname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_avatar_url(from._internal_avatar_url());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WechatMiniProgramUser::CopyFrom(const WechatMiniProgramUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.WechatMiniProgramUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WechatMiniProgramUser::IsInitialized() const {
  return true;
}

void WechatMiniProgramUser::InternalSwap(WechatMiniProgramUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.app_id_, lhs_arena,
      &other->_impl_.app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.open_id_, lhs_arena,
      &other->_impl_.open_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.union_id_, lhs_arena,
      &other->_impl_.union_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_url_, lhs_arena,
      &other->_impl_.avatar_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WechatMiniProgramUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[30]);
}

// ===================================================================

class AttachmentShowRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& ttl(const AttachmentShowRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
AttachmentShowRequest::_Internal::ttl(const AttachmentShowRequest* msg) {
  return *msg->_impl_.ttl_;
}
void AttachmentShowRequest::clear_ttl() {
  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
}
AttachmentShowRequest::AttachmentShowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.AttachmentShowRequest)
}
AttachmentShowRequest::AttachmentShowRequest(const AttachmentShowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttachmentShowRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ttl()) {
    _this->_impl_.ttl_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.ttl_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.AttachmentShowRequest)
}

inline void AttachmentShowRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ttl_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AttachmentShowRequest::~AttachmentShowRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.AttachmentShowRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttachmentShowRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ttl_;
}

void AttachmentShowRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttachmentShowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.AttachmentShowRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.ttl_ != nullptr) {
    delete _impl_.ttl_;
  }
  _impl_.ttl_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachmentShowRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration ttl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttachmentShowRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.AttachmentShowRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .google.protobuf.Duration ttl = 2;
  if (this->_internal_has_ttl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ttl(this),
        _Internal::ttl(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.AttachmentShowRequest)
  return target;
}

size_t AttachmentShowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.AttachmentShowRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration ttl = 2;
  if (this->_internal_has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ttl_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttachmentShowRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttachmentShowRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttachmentShowRequest::GetClassData() const { return &_class_data_; }


void AttachmentShowRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttachmentShowRequest*>(&to_msg);
  auto& from = static_cast<const AttachmentShowRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.AttachmentShowRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ttl()) {
    _this->_internal_mutable_ttl()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_ttl());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttachmentShowRequest::CopyFrom(const AttachmentShowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.AttachmentShowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentShowRequest::IsInitialized() const {
  return true;
}

void AttachmentShowRequest::InternalSwap(AttachmentShowRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttachmentShowRequest, _impl_.id_)
      + sizeof(AttachmentShowRequest::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(AttachmentShowRequest, _impl_.ttl_)>(
          reinterpret_cast<char*>(&_impl_.ttl_),
          reinterpret_cast<char*>(&other->_impl_.ttl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachmentShowRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[31]);
}

// ===================================================================

class AttachmentShowResponse::_Internal {
 public:
  static const ::palm::auth::v1::AttachmentIndexResponse_Item& item(const AttachmentShowResponse* msg);
};

const ::palm::auth::v1::AttachmentIndexResponse_Item&
AttachmentShowResponse::_Internal::item(const AttachmentShowResponse* msg) {
  return *msg->_impl_.item_;
}
AttachmentShowResponse::AttachmentShowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.AttachmentShowResponse)
}
AttachmentShowResponse::AttachmentShowResponse(const AttachmentShowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttachmentShowResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::palm::auth::v1::AttachmentIndexResponse_Item(*from._impl_.item_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.AttachmentShowResponse)
}

inline void AttachmentShowResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.url_){}
    , decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AttachmentShowResponse::~AttachmentShowResponse() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.AttachmentShowResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttachmentShowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.url_.Destroy();
  if (this != internal_default_instance()) delete _impl_.item_;
}

void AttachmentShowResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttachmentShowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.AttachmentShowResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachmentShowResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.auth.v1.AttachmentIndexResponse.Item item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.AttachmentShowResponse.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttachmentShowResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.AttachmentShowResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.auth.v1.AttachmentIndexResponse.Item item = 1;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.AttachmentShowResponse.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.AttachmentShowResponse)
  return target;
}

size_t AttachmentShowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.AttachmentShowResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .palm.auth.v1.AttachmentIndexResponse.Item item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttachmentShowResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttachmentShowResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttachmentShowResponse::GetClassData() const { return &_class_data_; }


void AttachmentShowResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttachmentShowResponse*>(&to_msg);
  auto& from = static_cast<const AttachmentShowResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.AttachmentShowResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::palm::auth::v1::AttachmentIndexResponse_Item::MergeFrom(
        from._internal_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttachmentShowResponse::CopyFrom(const AttachmentShowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.AttachmentShowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentShowResponse::IsInitialized() const {
  return true;
}

void AttachmentShowResponse::InternalSwap(AttachmentShowResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
  swap(_impl_.item_, other->_impl_.item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachmentShowResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[32]);
}

// ===================================================================

class AttachmentIndexResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const AttachmentIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AttachmentIndexResponse_Item::_Internal::updated_at(const AttachmentIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void AttachmentIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
AttachmentIndexResponse_Item::AttachmentIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.AttachmentIndexResponse.Item)
}
AttachmentIndexResponse_Item::AttachmentIndexResponse_Item(const AttachmentIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttachmentIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket().empty()) {
    _this->_impl_.bucket_.Set(from._internal_bucket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_type().empty()) {
    _this->_impl_.content_type_.Set(from._internal_content_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.AttachmentIndexResponse.Item)
}

inline void AttachmentIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AttachmentIndexResponse_Item::~AttachmentIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.AttachmentIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttachmentIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bucket_.Destroy();
  _impl_.name_.Destroy();
  _impl_.title_.Destroy();
  _impl_.content_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void AttachmentIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttachmentIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.AttachmentIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.content_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachmentIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bucket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bucket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.AttachmentIndexResponse.Item.bucket"));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.AttachmentIndexResponse.Item.name"));
        } else
          goto handle_unusual;
        continue;
      // string title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.AttachmentIndexResponse.Item.title"));
        } else
          goto handle_unusual;
        continue;
      // int64 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_content_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.AttachmentIndexResponse.Item.content_type"));
        } else
          goto handle_unusual;
        continue;
      // .palm.nut.v1.MediaContent.Status status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::palm::nut::v1::MediaContent_Status>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttachmentIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.AttachmentIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string bucket = 2;
  if (!this->_internal_bucket().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.AttachmentIndexResponse.Item.bucket");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bucket(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.AttachmentIndexResponse.Item.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string title = 4;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.AttachmentIndexResponse.Item.title");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_title(), target);
  }

  // int64 size = 5;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_size(), target);
  }

  // string content_type = 6;
  if (!this->_internal_content_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_type().data(), static_cast<int>(this->_internal_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.AttachmentIndexResponse.Item.content_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_content_type(), target);
  }

  // .palm.nut.v1.MediaContent.Status status = 7;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.AttachmentIndexResponse.Item)
  return target;
}

size_t AttachmentIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.AttachmentIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bucket = 2;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bucket());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string title = 4;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string content_type = 6;
  if (!this->_internal_content_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_type());
  }

  // .google.protobuf.Timestamp updated_at = 11;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .palm.nut.v1.MediaContent.Status status = 7;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int64 size = 5;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttachmentIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttachmentIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttachmentIndexResponse_Item::GetClassData() const { return &_class_data_; }


void AttachmentIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttachmentIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const AttachmentIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.AttachmentIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket().empty()) {
    _this->_internal_set_bucket(from._internal_bucket());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_content_type().empty()) {
    _this->_internal_set_content_type(from._internal_content_type());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttachmentIndexResponse_Item::CopyFrom(const AttachmentIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.AttachmentIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentIndexResponse_Item::IsInitialized() const {
  return true;
}

void AttachmentIndexResponse_Item::InternalSwap(AttachmentIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bucket_, lhs_arena,
      &other->_impl_.bucket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_type_, lhs_arena,
      &other->_impl_.content_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttachmentIndexResponse_Item, _impl_.size_)
      + sizeof(AttachmentIndexResponse_Item::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(AttachmentIndexResponse_Item, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachmentIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[33]);
}

// ===================================================================

class AttachmentIndexResponse::_Internal {
 public:
  static const ::palm::nut::v1::Pagination& pagination(const AttachmentIndexResponse* msg);
};

const ::palm::nut::v1::Pagination&
AttachmentIndexResponse::_Internal::pagination(const AttachmentIndexResponse* msg) {
  return *msg->_impl_.pagination_;
}
void AttachmentIndexResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
AttachmentIndexResponse::AttachmentIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.AttachmentIndexResponse)
}
AttachmentIndexResponse::AttachmentIndexResponse(const AttachmentIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttachmentIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::palm::nut::v1::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.AttachmentIndexResponse)
}

inline void AttachmentIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AttachmentIndexResponse::~AttachmentIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.AttachmentIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttachmentIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void AttachmentIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttachmentIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.AttachmentIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachmentIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .palm.nut.v1.Pagination pagination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .palm.auth.v1.AttachmentIndexResponse.Item items = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttachmentIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.AttachmentIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .palm.nut.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // repeated .palm.auth.v1.AttachmentIndexResponse.Item items = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.AttachmentIndexResponse)
  return target;
}

size_t AttachmentIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.AttachmentIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.auth.v1.AttachmentIndexResponse.Item items = 11;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.nut.v1.Pagination pagination = 1;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttachmentIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttachmentIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttachmentIndexResponse::GetClassData() const { return &_class_data_; }


void AttachmentIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttachmentIndexResponse*>(&to_msg);
  auto& from = static_cast<const AttachmentIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.AttachmentIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::palm::nut::v1::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttachmentIndexResponse::CopyFrom(const AttachmentIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.AttachmentIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachmentIndexResponse::IsInitialized() const {
  return true;
}

void AttachmentIndexResponse::InternalSwap(AttachmentIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachmentIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[34]);
}

// ===================================================================

class LocaleByLangRequest::_Internal {
 public:
};

LocaleByLangRequest::LocaleByLangRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.LocaleByLangRequest)
}
LocaleByLangRequest::LocaleByLangRequest(const LocaleByLangRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleByLangRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.LocaleByLangRequest)
}

inline void LocaleByLangRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocaleByLangRequest::~LocaleByLangRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.LocaleByLangRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleByLangRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
}

void LocaleByLangRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleByLangRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.LocaleByLangRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleByLangRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.LocaleByLangRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleByLangRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.LocaleByLangRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.LocaleByLangRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.LocaleByLangRequest)
  return target;
}

size_t LocaleByLangRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.LocaleByLangRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleByLangRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleByLangRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleByLangRequest::GetClassData() const { return &_class_data_; }


void LocaleByLangRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleByLangRequest*>(&to_msg);
  auto& from = static_cast<const LocaleByLangRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.LocaleByLangRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleByLangRequest::CopyFrom(const LocaleByLangRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.LocaleByLangRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleByLangRequest::IsInitialized() const {
  return true;
}

void LocaleByLangRequest::InternalSwap(LocaleByLangRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleByLangRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[35]);
}

// ===================================================================

class LocaleListResponse::_Internal {
 public:
};

LocaleListResponse::LocaleListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.LocaleListResponse)
}
LocaleListResponse::LocaleListResponse(const LocaleListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.LocaleListResponse)
}

inline void LocaleListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LocaleListResponse::~LocaleListResponse() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.LocaleListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void LocaleListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.LocaleListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.auth.v1.LocaleIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.LocaleListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.auth.v1.LocaleIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.LocaleListResponse)
  return target;
}

size_t LocaleListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.LocaleListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.auth.v1.LocaleIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleListResponse::GetClassData() const { return &_class_data_; }


void LocaleListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleListResponse*>(&to_msg);
  auto& from = static_cast<const LocaleListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.LocaleListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleListResponse::CopyFrom(const LocaleListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.LocaleListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleListResponse::IsInitialized() const {
  return true;
}

void LocaleListResponse::InternalSwap(LocaleListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[36]);
}

// ===================================================================

class LocaleIndexResponse_Item::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const LocaleIndexResponse_Item* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LocaleIndexResponse_Item::_Internal::updated_at(const LocaleIndexResponse_Item* msg) {
  return *msg->_impl_.updated_at_;
}
void LocaleIndexResponse_Item::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
}
LocaleIndexResponse_Item::LocaleIndexResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.LocaleIndexResponse.Item)
}
LocaleIndexResponse_Item::LocaleIndexResponse_Item(const LocaleIndexResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleIndexResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_updated_at()) {
    _this->_impl_.updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.updated_at_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.LocaleIndexResponse.Item)
}

inline void LocaleIndexResponse_Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.updated_at_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocaleIndexResponse_Item::~LocaleIndexResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.LocaleIndexResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleIndexResponse_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.code_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.updated_at_;
}

void LocaleIndexResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleIndexResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.LocaleIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.updated_at_ != nullptr) {
    delete _impl_.updated_at_;
  }
  _impl_.updated_at_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleIndexResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.LocaleIndexResponse.Item.lang"));
        } else
          goto handle_unusual;
        continue;
      // string code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.LocaleIndexResponse.Item.code"));
        } else
          goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.LocaleIndexResponse.Item.message"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleIndexResponse_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.LocaleIndexResponse.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.LocaleIndexResponse.Item.lang");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lang(), target);
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.LocaleIndexResponse.Item.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.LocaleIndexResponse.Item.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::updated_at(this),
        _Internal::updated_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.LocaleIndexResponse.Item)
  return target;
}

size_t LocaleIndexResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.LocaleIndexResponse.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 2;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->_internal_has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.updated_at_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleIndexResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleIndexResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleIndexResponse_Item::GetClassData() const { return &_class_data_; }


void LocaleIndexResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleIndexResponse_Item*>(&to_msg);
  auto& from = static_cast<const LocaleIndexResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.LocaleIndexResponse.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_updated_at()) {
    _this->_internal_mutable_updated_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_updated_at());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleIndexResponse_Item::CopyFrom(const LocaleIndexResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.LocaleIndexResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleIndexResponse_Item::IsInitialized() const {
  return true;
}

void LocaleIndexResponse_Item::InternalSwap(LocaleIndexResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocaleIndexResponse_Item, _impl_.id_)
      + sizeof(LocaleIndexResponse_Item::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(LocaleIndexResponse_Item, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleIndexResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[37]);
}

// ===================================================================

class LocaleIndexResponse::_Internal {
 public:
  static const ::palm::nut::v1::Pagination& pagination(const LocaleIndexResponse* msg);
};

const ::palm::nut::v1::Pagination&
LocaleIndexResponse::_Internal::pagination(const LocaleIndexResponse* msg) {
  return *msg->_impl_.pagination_;
}
void LocaleIndexResponse::clear_pagination() {
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
}
LocaleIndexResponse::LocaleIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.LocaleIndexResponse)
}
LocaleIndexResponse::LocaleIndexResponse(const LocaleIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pagination()) {
    _this->_impl_.pagination_ = new ::palm::nut::v1::Pagination(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.LocaleIndexResponse)
}

inline void LocaleIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LocaleIndexResponse::~LocaleIndexResponse() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.LocaleIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void LocaleIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.LocaleIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.pagination_ != nullptr) {
    delete _impl_.pagination_;
  }
  _impl_.pagination_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.auth.v1.LocaleIndexResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .palm.nut.v1.Pagination pagination = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.LocaleIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.auth.v1.LocaleIndexResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .palm.nut.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.LocaleIndexResponse)
  return target;
}

size_t LocaleIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.LocaleIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.auth.v1.LocaleIndexResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .palm.nut.v1.Pagination pagination = 9;
  if (this->_internal_has_pagination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleIndexResponse::GetClassData() const { return &_class_data_; }


void LocaleIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleIndexResponse*>(&to_msg);
  auto& from = static_cast<const LocaleIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.LocaleIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_pagination()) {
    _this->_internal_mutable_pagination()->::palm::nut::v1::Pagination::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleIndexResponse::CopyFrom(const LocaleIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.LocaleIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleIndexResponse::IsInitialized() const {
  return true;
}

void LocaleIndexResponse::InternalSwap(LocaleIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[38]);
}

// ===================================================================

class LocaleByCodeRequest::_Internal {
 public:
};

LocaleByCodeRequest::LocaleByCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.LocaleByCodeRequest)
}
LocaleByCodeRequest::LocaleByCodeRequest(const LocaleByCodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleByCodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.LocaleByCodeRequest)
}

inline void LocaleByCodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocaleByCodeRequest::~LocaleByCodeRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.LocaleByCodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleByCodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void LocaleByCodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleByCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.LocaleByCodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleByCodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.LocaleByCodeRequest.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleByCodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.LocaleByCodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.LocaleByCodeRequest.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.LocaleByCodeRequest)
  return target;
}

size_t LocaleByCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.LocaleByCodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleByCodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleByCodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleByCodeRequest::GetClassData() const { return &_class_data_; }


void LocaleByCodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleByCodeRequest*>(&to_msg);
  auto& from = static_cast<const LocaleByCodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.LocaleByCodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleByCodeRequest::CopyFrom(const LocaleByCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.LocaleByCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleByCodeRequest::IsInitialized() const {
  return true;
}

void LocaleByCodeRequest::InternalSwap(LocaleByCodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleByCodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[39]);
}

// ===================================================================

class LocaleByLangAndCodeRequest::_Internal {
 public:
};

LocaleByLangAndCodeRequest::LocaleByLangAndCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.LocaleByLangAndCodeRequest)
}
LocaleByLangAndCodeRequest::LocaleByLangAndCodeRequest(const LocaleByLangAndCodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleByLangAndCodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.LocaleByLangAndCodeRequest)
}

inline void LocaleByLangAndCodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocaleByLangAndCodeRequest::~LocaleByLangAndCodeRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.LocaleByLangAndCodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleByLangAndCodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.code_.Destroy();
}

void LocaleByLangAndCodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleByLangAndCodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.LocaleByLangAndCodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleByLangAndCodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.LocaleByLangAndCodeRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.LocaleByLangAndCodeRequest.code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleByLangAndCodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.LocaleByLangAndCodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.LocaleByLangAndCodeRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.LocaleByLangAndCodeRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.LocaleByLangAndCodeRequest)
  return target;
}

size_t LocaleByLangAndCodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.LocaleByLangAndCodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleByLangAndCodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleByLangAndCodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleByLangAndCodeRequest::GetClassData() const { return &_class_data_; }


void LocaleByLangAndCodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleByLangAndCodeRequest*>(&to_msg);
  auto& from = static_cast<const LocaleByLangAndCodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.LocaleByLangAndCodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleByLangAndCodeRequest::CopyFrom(const LocaleByLangAndCodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.LocaleByLangAndCodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleByLangAndCodeRequest::IsInitialized() const {
  return true;
}

void LocaleByLangAndCodeRequest::InternalSwap(LocaleByLangAndCodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleByLangAndCodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[40]);
}

// ===================================================================

class LocaleCreateRequest::_Internal {
 public:
};

LocaleCreateRequest::LocaleCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.LocaleCreateRequest)
}
LocaleCreateRequest::LocaleCreateRequest(const LocaleCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleCreateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lang().empty()) {
    _this->_impl_.lang_.Set(from._internal_lang(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.LocaleCreateRequest)
}

inline void LocaleCreateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lang_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocaleCreateRequest::~LocaleCreateRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.LocaleCreateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lang_.Destroy();
  _impl_.code_.Destroy();
  _impl_.message_.Destroy();
}

void LocaleCreateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.LocaleCreateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lang_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleCreateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lang = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.LocaleCreateRequest.lang"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.LocaleCreateRequest.code"));
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.LocaleCreateRequest.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleCreateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.LocaleCreateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.LocaleCreateRequest.lang");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lang(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.LocaleCreateRequest.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.LocaleCreateRequest.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.LocaleCreateRequest)
  return target;
}

size_t LocaleCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.LocaleCreateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lang = 1;
  if (!this->_internal_lang().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lang());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleCreateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleCreateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleCreateRequest::GetClassData() const { return &_class_data_; }


void LocaleCreateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleCreateRequest*>(&to_msg);
  auto& from = static_cast<const LocaleCreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.LocaleCreateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lang().empty()) {
    _this->_internal_set_lang(from._internal_lang());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleCreateRequest::CopyFrom(const LocaleCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.LocaleCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleCreateRequest::IsInitialized() const {
  return true;
}

void LocaleCreateRequest::InternalSwap(LocaleCreateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lang_, lhs_arena,
      &other->_impl_.lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleCreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[41]);
}

// ===================================================================

class LocaleUpdateRequest::_Internal {
 public:
};

LocaleUpdateRequest::LocaleUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:palm.auth.v1.LocaleUpdateRequest)
}
LocaleUpdateRequest::LocaleUpdateRequest(const LocaleUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocaleUpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.auth.v1.LocaleUpdateRequest)
}

inline void LocaleUpdateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocaleUpdateRequest::~LocaleUpdateRequest() {
  // @@protoc_insertion_point(destructor:palm.auth.v1.LocaleUpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocaleUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void LocaleUpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocaleUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.auth.v1.LocaleUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocaleUpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.auth.v1.LocaleUpdateRequest.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocaleUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.auth.v1.LocaleUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "palm.auth.v1.LocaleUpdateRequest.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.auth.v1.LocaleUpdateRequest)
  return target;
}

size_t LocaleUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.auth.v1.LocaleUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocaleUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocaleUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocaleUpdateRequest::GetClassData() const { return &_class_data_; }


void LocaleUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocaleUpdateRequest*>(&to_msg);
  auto& from = static_cast<const LocaleUpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.auth.v1.LocaleUpdateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocaleUpdateRequest::CopyFrom(const LocaleUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.auth.v1.LocaleUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocaleUpdateRequest::IsInitialized() const {
  return true;
}

void LocaleUpdateRequest::InternalSwap(LocaleUpdateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocaleUpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[42]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace auth
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::auth::v1::UserDetail*
Arena::CreateMaybeMessage< ::palm::auth::v1::UserDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::UserDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::Oauth2State*
Arena::CreateMaybeMessage< ::palm::auth::v1::Oauth2State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::Oauth2State >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::UserSignInRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::UserSignInRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::UserSignInRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::UserQueryRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::UserQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::UserQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::UserSignInResponse*
Arena::CreateMaybeMessage< ::palm::auth::v1::UserSignInResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::UserSignInResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::UserSignUpRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::UserSignUpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::UserSignUpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::UserTokenRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::UserTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::UserTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::UserResetPasswordRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::UserResetPasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::UserResetPasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::UserSetPasswordRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::UserSetPasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::UserSetPasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::UserSetProfileRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::UserSetProfileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::UserSetProfileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::UserGetProfileResponse*
Arena::CreateMaybeMessage< ::palm::auth::v1::UserGetProfileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::UserGetProfileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::UserLogsResponse_Item*
Arena::CreateMaybeMessage< ::palm::auth::v1::UserLogsResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::UserLogsResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::UserLogsResponse*
Arena::CreateMaybeMessage< ::palm::auth::v1::UserLogsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::UserLogsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::UserChangePasswordRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::UserChangePasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::UserChangePasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::UserIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::auth::v1::UserIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::UserIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::UserIndexResponse*
Arena::CreateMaybeMessage< ::palm::auth::v1::UserIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::UserIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::SignInByGoogleRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::SignInByGoogleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::SignInByGoogleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::GoogleSignInUrlRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::GoogleSignInUrlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::GoogleSignInUrlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::GoogleSignInUrlResponse*
Arena::CreateMaybeMessage< ::palm::auth::v1::GoogleSignInUrlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::GoogleSignInUrlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::WechatUserBindByIdRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::WechatUserBindByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::WechatUserBindByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::WechatUserBindByAccountRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::WechatUserBindByAccountRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::WechatUserBindByAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::WechatUserQueryByOpenIdRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::WechatUserQueryByOpenIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::WechatUserQueryByOpenIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::WechatUserQueryByUnionIdRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::WechatUserQueryByUnionIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::WechatUserQueryByUnionIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item*
Arena::CreateMaybeMessage< ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::WechatAllMiniProgramUserResponse*
Arena::CreateMaybeMessage< ::palm::auth::v1::WechatAllMiniProgramUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::WechatAllMiniProgramUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::WechatAllOauth2UserResponse_Item*
Arena::CreateMaybeMessage< ::palm::auth::v1::WechatAllOauth2UserResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::WechatAllOauth2UserResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::WechatAllOauth2UserResponse*
Arena::CreateMaybeMessage< ::palm::auth::v1::WechatAllOauth2UserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::WechatAllOauth2UserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::SignInByWechatOauth2Request*
Arena::CreateMaybeMessage< ::palm::auth::v1::SignInByWechatOauth2Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::SignInByWechatOauth2Request >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::WechatOauth2SignInStateResponse*
Arena::CreateMaybeMessage< ::palm::auth::v1::WechatOauth2SignInStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::WechatOauth2SignInStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::WechatOauth2SignInUrlRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::WechatOauth2SignInUrlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::WechatOauth2SignInUrlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::WechatMiniProgramUser*
Arena::CreateMaybeMessage< ::palm::auth::v1::WechatMiniProgramUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::WechatMiniProgramUser >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::AttachmentShowRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::AttachmentShowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::AttachmentShowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::AttachmentShowResponse*
Arena::CreateMaybeMessage< ::palm::auth::v1::AttachmentShowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::AttachmentShowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::AttachmentIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::auth::v1::AttachmentIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::AttachmentIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::AttachmentIndexResponse*
Arena::CreateMaybeMessage< ::palm::auth::v1::AttachmentIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::AttachmentIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::LocaleByLangRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::LocaleByLangRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::LocaleByLangRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::LocaleListResponse*
Arena::CreateMaybeMessage< ::palm::auth::v1::LocaleListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::LocaleListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::LocaleIndexResponse_Item*
Arena::CreateMaybeMessage< ::palm::auth::v1::LocaleIndexResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::LocaleIndexResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::LocaleIndexResponse*
Arena::CreateMaybeMessage< ::palm::auth::v1::LocaleIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::LocaleIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::LocaleByCodeRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::LocaleByCodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::LocaleByCodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::LocaleByLangAndCodeRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::LocaleByLangAndCodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::LocaleByLangAndCodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::LocaleCreateRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::LocaleCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::LocaleCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::auth::v1::LocaleUpdateRequest*
Arena::CreateMaybeMessage< ::palm::auth::v1::LocaleUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::auth::v1::LocaleUpdateRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
