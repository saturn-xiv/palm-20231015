// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: auth.proto

#include "auth.pb.h"
#include "auth.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace palm {
namespace auth {
namespace v1 {

static const char* User_method_names[] = {
  "/palm.auth.v1.User/SignIn",
  "/palm.auth.v1.User/SignUp",
  "/palm.auth.v1.User/ConfirmByEmail",
  "/palm.auth.v1.User/ConfirmByToken",
  "/palm.auth.v1.User/UnlockByEmail",
  "/palm.auth.v1.User/UnlockByToken",
  "/palm.auth.v1.User/ForgotPassword",
  "/palm.auth.v1.User/ResetPassword",
  "/palm.auth.v1.User/Refresh",
  "/palm.auth.v1.User/Logs",
  "/palm.auth.v1.User/SetProfile",
  "/palm.auth.v1.User/ChangePassword",
  "/palm.auth.v1.User/SignOut",
  "/palm.auth.v1.User/Index",
  "/palm.auth.v1.User/Show",
  "/palm.auth.v1.User/Disable",
  "/palm.auth.v1.User/Enable",
  "/palm.auth.v1.User/Lock",
  "/palm.auth.v1.User/Unlock",
  "/palm.auth.v1.User/Confirm",
  "/palm.auth.v1.User/Delete",
  "/palm.auth.v1.User/SetPassword",
};

std::unique_ptr< User::Stub> User::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< User::Stub> stub(new User::Stub(channel, options));
  return stub;
}

User::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SignIn_(User_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignUp_(User_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfirmByEmail_(User_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfirmByToken_(User_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlockByEmail_(User_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlockByToken_(User_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ForgotPassword_(User_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetPassword_(User_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Refresh_(User_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logs_(User_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetProfile_(User_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangePassword_(User_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignOut_(User_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(User_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Show_(User_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Disable_(User_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Enable_(User_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Lock_(User_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unlock_(User_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Confirm_(User_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(User_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPassword_(User_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status User::Stub::SignIn(::grpc::ClientContext* context, const ::palm::auth::v1::UserSignInRequest& request, ::palm::auth::v1::UserSignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::UserSignInRequest, ::palm::auth::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignIn_, context, request, response);
}

void User::Stub::async::SignIn(::grpc::ClientContext* context, const ::palm::auth::v1::UserSignInRequest* request, ::palm::auth::v1::UserSignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::UserSignInRequest, ::palm::auth::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignIn_, context, request, response, std::move(f));
}

void User::Stub::async::SignIn(::grpc::ClientContext* context, const ::palm::auth::v1::UserSignInRequest* request, ::palm::auth::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::UserSignInResponse>* User::Stub::PrepareAsyncSignInRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserSignInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::UserSignInResponse, ::palm::auth::v1::UserSignInRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignIn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::UserSignInResponse>* User::Stub::AsyncSignInRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserSignInRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignInRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::SignUp(::grpc::ClientContext* context, const ::palm::auth::v1::UserSignUpRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::UserSignUpRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignUp_, context, request, response);
}

void User::Stub::async::SignUp(::grpc::ClientContext* context, const ::palm::auth::v1::UserSignUpRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::UserSignUpRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignUp_, context, request, response, std::move(f));
}

void User::Stub::async::SignUp(::grpc::ClientContext* context, const ::palm::auth::v1::UserSignUpRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignUp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncSignUpRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserSignUpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::auth::v1::UserSignUpRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignUp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncSignUpRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserSignUpRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignUpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ConfirmByEmail(::grpc::ClientContext* context, const ::palm::auth::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfirmByEmail_, context, request, response);
}

void User::Stub::async::ConfirmByEmail(::grpc::ClientContext* context, const ::palm::auth::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByEmail_, context, request, response, std::move(f));
}

void User::Stub::async::ConfirmByEmail(::grpc::ClientContext* context, const ::palm::auth::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncConfirmByEmailRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::auth::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfirmByEmail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncConfirmByEmailRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmByEmailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ConfirmByToken(::grpc::ClientContext* context, const ::palm::auth::v1::UserTokenRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConfirmByToken_, context, request, response);
}

void User::Stub::async::ConfirmByToken(::grpc::ClientContext* context, const ::palm::auth::v1::UserTokenRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByToken_, context, request, response, std::move(f));
}

void User::Stub::async::ConfirmByToken(::grpc::ClientContext* context, const ::palm::auth::v1::UserTokenRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConfirmByToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncConfirmByTokenRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::auth::v1::UserTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConfirmByToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncConfirmByTokenRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmByTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::UnlockByEmail(::grpc::ClientContext* context, const ::palm::auth::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnlockByEmail_, context, request, response);
}

void User::Stub::async::UnlockByEmail(::grpc::ClientContext* context, const ::palm::auth::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByEmail_, context, request, response, std::move(f));
}

void User::Stub::async::UnlockByEmail(::grpc::ClientContext* context, const ::palm::auth::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncUnlockByEmailRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::auth::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnlockByEmail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncUnlockByEmailRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockByEmailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::UnlockByToken(::grpc::ClientContext* context, const ::palm::auth::v1::UserTokenRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnlockByToken_, context, request, response);
}

void User::Stub::async::UnlockByToken(::grpc::ClientContext* context, const ::palm::auth::v1::UserTokenRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByToken_, context, request, response, std::move(f));
}

void User::Stub::async::UnlockByToken(::grpc::ClientContext* context, const ::palm::auth::v1::UserTokenRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockByToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncUnlockByTokenRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::auth::v1::UserTokenRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnlockByToken_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncUnlockByTokenRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserTokenRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockByTokenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ForgotPassword(::grpc::ClientContext* context, const ::palm::auth::v1::UserQueryRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ForgotPassword_, context, request, response);
}

void User::Stub::async::ForgotPassword(::grpc::ClientContext* context, const ::palm::auth::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForgotPassword_, context, request, response, std::move(f));
}

void User::Stub::async::ForgotPassword(::grpc::ClientContext* context, const ::palm::auth::v1::UserQueryRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ForgotPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncForgotPasswordRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::auth::v1::UserQueryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ForgotPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncForgotPasswordRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserQueryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncForgotPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ResetPassword(::grpc::ClientContext* context, const ::palm::auth::v1::UserResetPasswordRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::UserResetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetPassword_, context, request, response);
}

void User::Stub::async::ResetPassword(::grpc::ClientContext* context, const ::palm::auth::v1::UserResetPasswordRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::UserResetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, std::move(f));
}

void User::Stub::async::ResetPassword(::grpc::ClientContext* context, const ::palm::auth::v1::UserResetPasswordRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncResetPasswordRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserResetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::auth::v1::UserResetPasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncResetPasswordRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserResetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Refresh(::grpc::ClientContext* context, const ::google::protobuf::Duration& request, ::palm::auth::v1::UserSignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Duration, ::palm::auth::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Refresh_, context, request, response);
}

void User::Stub::async::Refresh(::grpc::ClientContext* context, const ::google::protobuf::Duration* request, ::palm::auth::v1::UserSignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Duration, ::palm::auth::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Refresh_, context, request, response, std::move(f));
}

void User::Stub::async::Refresh(::grpc::ClientContext* context, const ::google::protobuf::Duration* request, ::palm::auth::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Refresh_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::UserSignInResponse>* User::Stub::PrepareAsyncRefreshRaw(::grpc::ClientContext* context, const ::google::protobuf::Duration& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::UserSignInResponse, ::google::protobuf::Duration, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Refresh_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::UserSignInResponse>* User::Stub::AsyncRefreshRaw(::grpc::ClientContext* context, const ::google::protobuf::Duration& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRefreshRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Logs(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::palm::auth::v1::UserLogsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::Pager, ::palm::auth::v1::UserLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Logs_, context, request, response);
}

void User::Stub::async::Logs(::grpc::ClientContext* context, const ::palm::nut::v1::Pager* request, ::palm::auth::v1::UserLogsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::Pager, ::palm::auth::v1::UserLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logs_, context, request, response, std::move(f));
}

void User::Stub::async::Logs(::grpc::ClientContext* context, const ::palm::nut::v1::Pager* request, ::palm::auth::v1::UserLogsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::UserLogsResponse>* User::Stub::PrepareAsyncLogsRaw(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::UserLogsResponse, ::palm::nut::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Logs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::UserLogsResponse>* User::Stub::AsyncLogsRaw(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::SetProfile(::grpc::ClientContext* context, const ::palm::auth::v1::UserSetProfileRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::UserSetProfileRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetProfile_, context, request, response);
}

void User::Stub::async::SetProfile(::grpc::ClientContext* context, const ::palm::auth::v1::UserSetProfileRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::UserSetProfileRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetProfile_, context, request, response, std::move(f));
}

void User::Stub::async::SetProfile(::grpc::ClientContext* context, const ::palm::auth::v1::UserSetProfileRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetProfile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncSetProfileRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserSetProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::auth::v1::UserSetProfileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetProfile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncSetProfileRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserSetProfileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetProfileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::ChangePassword(::grpc::ClientContext* context, const ::palm::auth::v1::UserChangePasswordRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::UserChangePasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangePassword_, context, request, response);
}

void User::Stub::async::ChangePassword(::grpc::ClientContext* context, const ::palm::auth::v1::UserChangePasswordRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::UserChangePasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, std::move(f));
}

void User::Stub::async::ChangePassword(::grpc::ClientContext* context, const ::palm::auth::v1::UserChangePasswordRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncChangePasswordRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserChangePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::auth::v1::UserChangePasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangePassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncChangePasswordRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserChangePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangePasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::SignOut(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignOut_, context, request, response);
}

void User::Stub::async::SignOut(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignOut_, context, request, response, std::move(f));
}

void User::Stub::async::SignOut(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignOut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncSignOutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignOut_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncSignOutRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignOutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::palm::auth::v1::UserIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::Pager, ::palm::auth::v1::UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void User::Stub::async::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager* request, ::palm::auth::v1::UserIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::Pager, ::palm::auth::v1::UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void User::Stub::async::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager* request, ::palm::auth::v1::UserIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::UserIndexResponse>* User::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::UserIndexResponse, ::palm::nut::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::UserIndexResponse>* User::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Show(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::palm::auth::v1::UserIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::palm::auth::v1::UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Show_, context, request, response);
}

void User::Stub::async::Show(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::palm::auth::v1::UserIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::palm::auth::v1::UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, std::move(f));
}

void User::Stub::async::Show(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::palm::auth::v1::UserIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::UserIndexResponse_Item>* User::Stub::PrepareAsyncShowRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::UserIndexResponse_Item, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Show_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::UserIndexResponse_Item>* User::Stub::AsyncShowRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Disable(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Disable_, context, request, response);
}

void User::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, std::move(f));
}

void User::Stub::async::Disable(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Disable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncDisableRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Disable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncDisableRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDisableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Enable(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Enable_, context, request, response);
}

void User::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, std::move(f));
}

void User::Stub::async::Enable(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Enable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncEnableRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Enable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncEnableRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Lock(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Lock_, context, request, response);
}

void User::Stub::async::Lock(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Lock_, context, request, response, std::move(f));
}

void User::Stub::async::Lock(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Lock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncLockRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Lock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncLockRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Unlock(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Unlock_, context, request, response);
}

void User::Stub::async::Unlock(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unlock_, context, request, response, std::move(f));
}

void User::Stub::async::Unlock(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncUnlockRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Unlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncUnlockRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Confirm(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Confirm_, context, request, response);
}

void User::Stub::async::Confirm(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Confirm_, context, request, response, std::move(f));
}

void User::Stub::async::Confirm(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Confirm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncConfirmRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Confirm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncConfirmRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConfirmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::Delete(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void User::Stub::async::Delete(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void User::Stub::async::Delete(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status User::Stub::SetPassword(::grpc::ClientContext* context, const ::palm::auth::v1::UserSetPasswordRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::UserSetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPassword_, context, request, response);
}

void User::Stub::async::SetPassword(::grpc::ClientContext* context, const ::palm::auth::v1::UserSetPasswordRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::UserSetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPassword_, context, request, response, std::move(f));
}

void User::Stub::async::SetPassword(::grpc::ClientContext* context, const ::palm::auth::v1::UserSetPasswordRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::PrepareAsyncSetPasswordRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserSetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::auth::v1::UserSetPasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* User::Stub::AsyncSetPasswordRaw(::grpc::ClientContext* context, const ::palm::auth::v1::UserSetPasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

User::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::auth::v1::UserSignInRequest, ::palm::auth::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::UserSignInRequest* req,
             ::palm::auth::v1::UserSignInResponse* resp) {
               return service->SignIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::auth::v1::UserSignUpRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::UserSignUpRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SignUp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::auth::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ConfirmByEmail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::auth::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::UserTokenRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ConfirmByToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::auth::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UnlockByEmail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::auth::v1::UserTokenRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::UserTokenRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->UnlockByToken(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::auth::v1::UserQueryRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::UserQueryRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ForgotPassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::auth::v1::UserResetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::UserResetPasswordRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ResetPassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::google::protobuf::Duration, ::palm::auth::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Duration* req,
             ::palm::auth::v1::UserSignInResponse* resp) {
               return service->Refresh(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::nut::v1::Pager, ::palm::auth::v1::UserLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::Pager* req,
             ::palm::auth::v1::UserLogsResponse* resp) {
               return service->Logs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::auth::v1::UserSetProfileRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::UserSetProfileRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetProfile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::auth::v1::UserChangePasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::UserChangePasswordRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ChangePassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SignOut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::nut::v1::Pager, ::palm::auth::v1::UserIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::Pager* req,
             ::palm::auth::v1::UserIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::nut::v1::IdRequest, ::palm::auth::v1::UserIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::palm::auth::v1::UserIndexResponse_Item* resp) {
               return service->Show(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Disable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Enable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Lock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Unlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Confirm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      User_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< User::Service, ::palm::auth::v1::UserSetPasswordRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](User::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::UserSetPasswordRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SetPassword(ctx, req, resp);
             }, this)));
}

User::Service::~Service() {
}

::grpc::Status User::Service::SignIn(::grpc::ServerContext* context, const ::palm::auth::v1::UserSignInRequest* request, ::palm::auth::v1::UserSignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::SignUp(::grpc::ServerContext* context, const ::palm::auth::v1::UserSignUpRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ConfirmByEmail(::grpc::ServerContext* context, const ::palm::auth::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ConfirmByToken(::grpc::ServerContext* context, const ::palm::auth::v1::UserTokenRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::UnlockByEmail(::grpc::ServerContext* context, const ::palm::auth::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::UnlockByToken(::grpc::ServerContext* context, const ::palm::auth::v1::UserTokenRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ForgotPassword(::grpc::ServerContext* context, const ::palm::auth::v1::UserQueryRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ResetPassword(::grpc::ServerContext* context, const ::palm::auth::v1::UserResetPasswordRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Refresh(::grpc::ServerContext* context, const ::google::protobuf::Duration* request, ::palm::auth::v1::UserSignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Logs(::grpc::ServerContext* context, const ::palm::nut::v1::Pager* request, ::palm::auth::v1::UserLogsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::SetProfile(::grpc::ServerContext* context, const ::palm::auth::v1::UserSetProfileRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::ChangePassword(::grpc::ServerContext* context, const ::palm::auth::v1::UserChangePasswordRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::SignOut(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Index(::grpc::ServerContext* context, const ::palm::nut::v1::Pager* request, ::palm::auth::v1::UserIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Show(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::palm::auth::v1::UserIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Disable(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Enable(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Lock(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Unlock(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Confirm(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::Delete(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status User::Service::SetPassword(::grpc::ServerContext* context, const ::palm::auth::v1::UserSetPasswordRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Google_method_names[] = {
  "/palm.auth.v1.Google/SignInUrl",
  "/palm.auth.v1.Google/SignIn",
};

std::unique_ptr< Google::Stub> Google::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Google::Stub> stub(new Google::Stub(channel, options));
  return stub;
}

Google::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SignInUrl_(Google_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignIn_(Google_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Google::Stub::SignInUrl(::grpc::ClientContext* context, const ::palm::auth::v1::GoogleSignInUrlRequest& request, ::palm::auth::v1::GoogleSignInUrlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::GoogleSignInUrlRequest, ::palm::auth::v1::GoogleSignInUrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignInUrl_, context, request, response);
}

void Google::Stub::async::SignInUrl(::grpc::ClientContext* context, const ::palm::auth::v1::GoogleSignInUrlRequest* request, ::palm::auth::v1::GoogleSignInUrlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::GoogleSignInUrlRequest, ::palm::auth::v1::GoogleSignInUrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignInUrl_, context, request, response, std::move(f));
}

void Google::Stub::async::SignInUrl(::grpc::ClientContext* context, const ::palm::auth::v1::GoogleSignInUrlRequest* request, ::palm::auth::v1::GoogleSignInUrlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignInUrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::GoogleSignInUrlResponse>* Google::Stub::PrepareAsyncSignInUrlRaw(::grpc::ClientContext* context, const ::palm::auth::v1::GoogleSignInUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::GoogleSignInUrlResponse, ::palm::auth::v1::GoogleSignInUrlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignInUrl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::GoogleSignInUrlResponse>* Google::Stub::AsyncSignInUrlRaw(::grpc::ClientContext* context, const ::palm::auth::v1::GoogleSignInUrlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignInUrlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Google::Stub::SignIn(::grpc::ClientContext* context, const ::palm::auth::v1::SignInByGoogleRequest& request, ::palm::auth::v1::UserSignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::SignInByGoogleRequest, ::palm::auth::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignIn_, context, request, response);
}

void Google::Stub::async::SignIn(::grpc::ClientContext* context, const ::palm::auth::v1::SignInByGoogleRequest* request, ::palm::auth::v1::UserSignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::SignInByGoogleRequest, ::palm::auth::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignIn_, context, request, response, std::move(f));
}

void Google::Stub::async::SignIn(::grpc::ClientContext* context, const ::palm::auth::v1::SignInByGoogleRequest* request, ::palm::auth::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::UserSignInResponse>* Google::Stub::PrepareAsyncSignInRaw(::grpc::ClientContext* context, const ::palm::auth::v1::SignInByGoogleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::UserSignInResponse, ::palm::auth::v1::SignInByGoogleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignIn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::UserSignInResponse>* Google::Stub::AsyncSignInRaw(::grpc::ClientContext* context, const ::palm::auth::v1::SignInByGoogleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignInRaw(context, request, cq);
  result->StartCall();
  return result;
}

Google::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Google_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Google::Service, ::palm::auth::v1::GoogleSignInUrlRequest, ::palm::auth::v1::GoogleSignInUrlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Google::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::GoogleSignInUrlRequest* req,
             ::palm::auth::v1::GoogleSignInUrlResponse* resp) {
               return service->SignInUrl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Google_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Google::Service, ::palm::auth::v1::SignInByGoogleRequest, ::palm::auth::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Google::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::SignInByGoogleRequest* req,
             ::palm::auth::v1::UserSignInResponse* resp) {
               return service->SignIn(ctx, req, resp);
             }, this)));
}

Google::Service::~Service() {
}

::grpc::Status Google::Service::SignInUrl(::grpc::ServerContext* context, const ::palm::auth::v1::GoogleSignInUrlRequest* request, ::palm::auth::v1::GoogleSignInUrlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Google::Service::SignIn(::grpc::ServerContext* context, const ::palm::auth::v1::SignInByGoogleRequest* request, ::palm::auth::v1::UserSignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Wechat_method_names[] = {
  "/palm.auth.v1.Wechat/Oauth2SignInState",
  "/palm.auth.v1.Wechat/Oauth2SignInUrl",
  "/palm.auth.v1.Wechat/SignInByOauth2",
  "/palm.auth.v1.Wechat/AllOauth2User",
  "/palm.auth.v1.Wechat/DestroyOauth2User",
  "/palm.auth.v1.Wechat/BindOauth2UserById",
  "/palm.auth.v1.Wechat/BindOauth2UserByAccount",
  "/palm.auth.v1.Wechat/GetOauth2UserById",
  "/palm.auth.v1.Wechat/GetOauth2UserByOpenId",
  "/palm.auth.v1.Wechat/GetOauth2UserByUnionId",
  "/palm.auth.v1.Wechat/AllMiniProgramUser",
  "/palm.auth.v1.Wechat/DestroyMiniProgramUser",
  "/palm.auth.v1.Wechat/BindMiniProgramUserById",
  "/palm.auth.v1.Wechat/GetMiniProgramUserById",
  "/palm.auth.v1.Wechat/GetMiniProgramUserByOpenId",
  "/palm.auth.v1.Wechat/GetMiniProgramUserByUnionId",
};

std::unique_ptr< Wechat::Stub> Wechat::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Wechat::Stub> stub(new Wechat::Stub(channel, options));
  return stub;
}

Wechat::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Oauth2SignInState_(Wechat_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Oauth2SignInUrl_(Wechat_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignInByOauth2_(Wechat_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllOauth2User_(Wechat_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyOauth2User_(Wechat_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BindOauth2UserById_(Wechat_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BindOauth2UserByAccount_(Wechat_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOauth2UserById_(Wechat_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOauth2UserByOpenId_(Wechat_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOauth2UserByUnionId_(Wechat_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllMiniProgramUser_(Wechat_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyMiniProgramUser_(Wechat_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BindMiniProgramUserById_(Wechat_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMiniProgramUserById_(Wechat_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMiniProgramUserByOpenId_(Wechat_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMiniProgramUserByUnionId_(Wechat_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Wechat::Stub::Oauth2SignInState(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::auth::v1::WechatOauth2SignInStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::auth::v1::WechatOauth2SignInStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Oauth2SignInState_, context, request, response);
}

void Wechat::Stub::async::Oauth2SignInState(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::auth::v1::WechatOauth2SignInStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::auth::v1::WechatOauth2SignInStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Oauth2SignInState_, context, request, response, std::move(f));
}

void Wechat::Stub::async::Oauth2SignInState(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::auth::v1::WechatOauth2SignInStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Oauth2SignInState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatOauth2SignInStateResponse>* Wechat::Stub::PrepareAsyncOauth2SignInStateRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::WechatOauth2SignInStateResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Oauth2SignInState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatOauth2SignInStateResponse>* Wechat::Stub::AsyncOauth2SignInStateRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOauth2SignInStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::Oauth2SignInUrl(::grpc::ClientContext* context, const ::palm::auth::v1::WechatOauth2SignInUrlRequest& request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::WechatOauth2SignInUrlRequest, ::palm::orchid::v1::WechatOauth2QrConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Oauth2SignInUrl_, context, request, response);
}

void Wechat::Stub::async::Oauth2SignInUrl(::grpc::ClientContext* context, const ::palm::auth::v1::WechatOauth2SignInUrlRequest* request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::WechatOauth2SignInUrlRequest, ::palm::orchid::v1::WechatOauth2QrConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Oauth2SignInUrl_, context, request, response, std::move(f));
}

void Wechat::Stub::async::Oauth2SignInUrl(::grpc::ClientContext* context, const ::palm::auth::v1::WechatOauth2SignInUrlRequest* request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Oauth2SignInUrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2QrConnectResponse>* Wechat::Stub::PrepareAsyncOauth2SignInUrlRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatOauth2SignInUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::orchid::v1::WechatOauth2QrConnectResponse, ::palm::auth::v1::WechatOauth2SignInUrlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Oauth2SignInUrl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::orchid::v1::WechatOauth2QrConnectResponse>* Wechat::Stub::AsyncOauth2SignInUrlRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatOauth2SignInUrlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOauth2SignInUrlRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::SignInByOauth2(::grpc::ClientContext* context, const ::palm::auth::v1::SignInByWechatOauth2Request& request, ::palm::auth::v1::UserSignInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::SignInByWechatOauth2Request, ::palm::auth::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SignInByOauth2_, context, request, response);
}

void Wechat::Stub::async::SignInByOauth2(::grpc::ClientContext* context, const ::palm::auth::v1::SignInByWechatOauth2Request* request, ::palm::auth::v1::UserSignInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::SignInByWechatOauth2Request, ::palm::auth::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignInByOauth2_, context, request, response, std::move(f));
}

void Wechat::Stub::async::SignInByOauth2(::grpc::ClientContext* context, const ::palm::auth::v1::SignInByWechatOauth2Request* request, ::palm::auth::v1::UserSignInResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SignInByOauth2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::UserSignInResponse>* Wechat::Stub::PrepareAsyncSignInByOauth2Raw(::grpc::ClientContext* context, const ::palm::auth::v1::SignInByWechatOauth2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::UserSignInResponse, ::palm::auth::v1::SignInByWechatOauth2Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SignInByOauth2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::UserSignInResponse>* Wechat::Stub::AsyncSignInByOauth2Raw(::grpc::ClientContext* context, const ::palm::auth::v1::SignInByWechatOauth2Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSignInByOauth2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::AllOauth2User(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::auth::v1::WechatAllOauth2UserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::auth::v1::WechatAllOauth2UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AllOauth2User_, context, request, response);
}

void Wechat::Stub::async::AllOauth2User(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::auth::v1::WechatAllOauth2UserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::auth::v1::WechatAllOauth2UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllOauth2User_, context, request, response, std::move(f));
}

void Wechat::Stub::async::AllOauth2User(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::auth::v1::WechatAllOauth2UserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllOauth2User_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllOauth2UserResponse>* Wechat::Stub::PrepareAsyncAllOauth2UserRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::WechatAllOauth2UserResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AllOauth2User_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllOauth2UserResponse>* Wechat::Stub::AsyncAllOauth2UserRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAllOauth2UserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::DestroyOauth2User(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyOauth2User_, context, request, response);
}

void Wechat::Stub::async::DestroyOauth2User(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyOauth2User_, context, request, response, std::move(f));
}

void Wechat::Stub::async::DestroyOauth2User(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyOauth2User_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::PrepareAsyncDestroyOauth2UserRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyOauth2User_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::AsyncDestroyOauth2UserRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyOauth2UserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::BindOauth2UserById(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserBindByIdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::WechatUserBindByIdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BindOauth2UserById_, context, request, response);
}

void Wechat::Stub::async::BindOauth2UserById(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserBindByIdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::WechatUserBindByIdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindOauth2UserById_, context, request, response, std::move(f));
}

void Wechat::Stub::async::BindOauth2UserById(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserBindByIdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindOauth2UserById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::PrepareAsyncBindOauth2UserByIdRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserBindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::auth::v1::WechatUserBindByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BindOauth2UserById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::AsyncBindOauth2UserByIdRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserBindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBindOauth2UserByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::BindOauth2UserByAccount(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserBindByAccountRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::WechatUserBindByAccountRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BindOauth2UserByAccount_, context, request, response);
}

void Wechat::Stub::async::BindOauth2UserByAccount(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserBindByAccountRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::WechatUserBindByAccountRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindOauth2UserByAccount_, context, request, response, std::move(f));
}

void Wechat::Stub::async::BindOauth2UserByAccount(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserBindByAccountRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindOauth2UserByAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::PrepareAsyncBindOauth2UserByAccountRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserBindByAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::auth::v1::WechatUserBindByAccountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BindOauth2UserByAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::AsyncBindOauth2UserByAccountRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserBindByAccountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBindOauth2UserByAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::GetOauth2UserById(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::palm::auth::v1::WechatAllOauth2UserResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::palm::auth::v1::WechatAllOauth2UserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOauth2UserById_, context, request, response);
}

void Wechat::Stub::async::GetOauth2UserById(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::palm::auth::v1::WechatAllOauth2UserResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::palm::auth::v1::WechatAllOauth2UserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOauth2UserById_, context, request, response, std::move(f));
}

void Wechat::Stub::async::GetOauth2UserById(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::palm::auth::v1::WechatAllOauth2UserResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOauth2UserById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllOauth2UserResponse_Item>* Wechat::Stub::PrepareAsyncGetOauth2UserByIdRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::WechatAllOauth2UserResponse_Item, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOauth2UserById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllOauth2UserResponse_Item>* Wechat::Stub::AsyncGetOauth2UserByIdRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOauth2UserByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::GetOauth2UserByOpenId(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByOpenIdRequest& request, ::palm::auth::v1::WechatAllOauth2UserResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::WechatUserQueryByOpenIdRequest, ::palm::auth::v1::WechatAllOauth2UserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOauth2UserByOpenId_, context, request, response);
}

void Wechat::Stub::async::GetOauth2UserByOpenId(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByOpenIdRequest* request, ::palm::auth::v1::WechatAllOauth2UserResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::WechatUserQueryByOpenIdRequest, ::palm::auth::v1::WechatAllOauth2UserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOauth2UserByOpenId_, context, request, response, std::move(f));
}

void Wechat::Stub::async::GetOauth2UserByOpenId(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByOpenIdRequest* request, ::palm::auth::v1::WechatAllOauth2UserResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOauth2UserByOpenId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllOauth2UserResponse_Item>* Wechat::Stub::PrepareAsyncGetOauth2UserByOpenIdRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByOpenIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::WechatAllOauth2UserResponse_Item, ::palm::auth::v1::WechatUserQueryByOpenIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOauth2UserByOpenId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllOauth2UserResponse_Item>* Wechat::Stub::AsyncGetOauth2UserByOpenIdRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByOpenIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOauth2UserByOpenIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::GetOauth2UserByUnionId(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByUnionIdRequest& request, ::palm::auth::v1::WechatAllOauth2UserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::WechatUserQueryByUnionIdRequest, ::palm::auth::v1::WechatAllOauth2UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOauth2UserByUnionId_, context, request, response);
}

void Wechat::Stub::async::GetOauth2UserByUnionId(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByUnionIdRequest* request, ::palm::auth::v1::WechatAllOauth2UserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::WechatUserQueryByUnionIdRequest, ::palm::auth::v1::WechatAllOauth2UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOauth2UserByUnionId_, context, request, response, std::move(f));
}

void Wechat::Stub::async::GetOauth2UserByUnionId(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByUnionIdRequest* request, ::palm::auth::v1::WechatAllOauth2UserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOauth2UserByUnionId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllOauth2UserResponse>* Wechat::Stub::PrepareAsyncGetOauth2UserByUnionIdRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByUnionIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::WechatAllOauth2UserResponse, ::palm::auth::v1::WechatUserQueryByUnionIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOauth2UserByUnionId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllOauth2UserResponse>* Wechat::Stub::AsyncGetOauth2UserByUnionIdRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByUnionIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOauth2UserByUnionIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::AllMiniProgramUser(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::palm::auth::v1::WechatAllMiniProgramUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::palm::auth::v1::WechatAllMiniProgramUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AllMiniProgramUser_, context, request, response);
}

void Wechat::Stub::async::AllMiniProgramUser(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::auth::v1::WechatAllMiniProgramUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::palm::auth::v1::WechatAllMiniProgramUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllMiniProgramUser_, context, request, response, std::move(f));
}

void Wechat::Stub::async::AllMiniProgramUser(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::palm::auth::v1::WechatAllMiniProgramUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllMiniProgramUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllMiniProgramUserResponse>* Wechat::Stub::PrepareAsyncAllMiniProgramUserRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::WechatAllMiniProgramUserResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AllMiniProgramUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllMiniProgramUserResponse>* Wechat::Stub::AsyncAllMiniProgramUserRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAllMiniProgramUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::DestroyMiniProgramUser(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyMiniProgramUser_, context, request, response);
}

void Wechat::Stub::async::DestroyMiniProgramUser(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyMiniProgramUser_, context, request, response, std::move(f));
}

void Wechat::Stub::async::DestroyMiniProgramUser(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyMiniProgramUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::PrepareAsyncDestroyMiniProgramUserRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyMiniProgramUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::AsyncDestroyMiniProgramUserRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyMiniProgramUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::BindMiniProgramUserById(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserBindByIdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::WechatUserBindByIdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BindMiniProgramUserById_, context, request, response);
}

void Wechat::Stub::async::BindMiniProgramUserById(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserBindByIdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::WechatUserBindByIdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindMiniProgramUserById_, context, request, response, std::move(f));
}

void Wechat::Stub::async::BindMiniProgramUserById(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserBindByIdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindMiniProgramUserById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::PrepareAsyncBindMiniProgramUserByIdRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserBindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::auth::v1::WechatUserBindByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BindMiniProgramUserById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Wechat::Stub::AsyncBindMiniProgramUserByIdRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserBindByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBindMiniProgramUserByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::GetMiniProgramUserById(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMiniProgramUserById_, context, request, response);
}

void Wechat::Stub::async::GetMiniProgramUserById(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMiniProgramUserById_, context, request, response, std::move(f));
}

void Wechat::Stub::async::GetMiniProgramUserById(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMiniProgramUserById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item>* Wechat::Stub::PrepareAsyncGetMiniProgramUserByIdRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMiniProgramUserById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item>* Wechat::Stub::AsyncGetMiniProgramUserByIdRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMiniProgramUserByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::GetMiniProgramUserByOpenId(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByOpenIdRequest& request, ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::WechatUserQueryByOpenIdRequest, ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMiniProgramUserByOpenId_, context, request, response);
}

void Wechat::Stub::async::GetMiniProgramUserByOpenId(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByOpenIdRequest* request, ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::WechatUserQueryByOpenIdRequest, ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMiniProgramUserByOpenId_, context, request, response, std::move(f));
}

void Wechat::Stub::async::GetMiniProgramUserByOpenId(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByOpenIdRequest* request, ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMiniProgramUserByOpenId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item>* Wechat::Stub::PrepareAsyncGetMiniProgramUserByOpenIdRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByOpenIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, ::palm::auth::v1::WechatUserQueryByOpenIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMiniProgramUserByOpenId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item>* Wechat::Stub::AsyncGetMiniProgramUserByOpenIdRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByOpenIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMiniProgramUserByOpenIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Wechat::Stub::GetMiniProgramUserByUnionId(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByUnionIdRequest& request, ::palm::auth::v1::WechatAllMiniProgramUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::WechatUserQueryByUnionIdRequest, ::palm::auth::v1::WechatAllMiniProgramUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMiniProgramUserByUnionId_, context, request, response);
}

void Wechat::Stub::async::GetMiniProgramUserByUnionId(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByUnionIdRequest* request, ::palm::auth::v1::WechatAllMiniProgramUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::WechatUserQueryByUnionIdRequest, ::palm::auth::v1::WechatAllMiniProgramUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMiniProgramUserByUnionId_, context, request, response, std::move(f));
}

void Wechat::Stub::async::GetMiniProgramUserByUnionId(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByUnionIdRequest* request, ::palm::auth::v1::WechatAllMiniProgramUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMiniProgramUserByUnionId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllMiniProgramUserResponse>* Wechat::Stub::PrepareAsyncGetMiniProgramUserByUnionIdRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByUnionIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::WechatAllMiniProgramUserResponse, ::palm::auth::v1::WechatUserQueryByUnionIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMiniProgramUserByUnionId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::WechatAllMiniProgramUserResponse>* Wechat::Stub::AsyncGetMiniProgramUserByUnionIdRaw(::grpc::ClientContext* context, const ::palm::auth::v1::WechatUserQueryByUnionIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMiniProgramUserByUnionIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

Wechat::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::google::protobuf::Empty, ::palm::auth::v1::WechatOauth2SignInStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::auth::v1::WechatOauth2SignInStateResponse* resp) {
               return service->Oauth2SignInState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::auth::v1::WechatOauth2SignInUrlRequest, ::palm::orchid::v1::WechatOauth2QrConnectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::WechatOauth2SignInUrlRequest* req,
             ::palm::orchid::v1::WechatOauth2QrConnectResponse* resp) {
               return service->Oauth2SignInUrl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::auth::v1::SignInByWechatOauth2Request, ::palm::auth::v1::UserSignInResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::SignInByWechatOauth2Request* req,
             ::palm::auth::v1::UserSignInResponse* resp) {
               return service->SignInByOauth2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::google::protobuf::Empty, ::palm::auth::v1::WechatAllOauth2UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::auth::v1::WechatAllOauth2UserResponse* resp) {
               return service->AllOauth2User(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DestroyOauth2User(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::auth::v1::WechatUserBindByIdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::WechatUserBindByIdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->BindOauth2UserById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::auth::v1::WechatUserBindByAccountRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::WechatUserBindByAccountRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->BindOauth2UserByAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::nut::v1::IdRequest, ::palm::auth::v1::WechatAllOauth2UserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::palm::auth::v1::WechatAllOauth2UserResponse_Item* resp) {
               return service->GetOauth2UserById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::auth::v1::WechatUserQueryByOpenIdRequest, ::palm::auth::v1::WechatAllOauth2UserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::WechatUserQueryByOpenIdRequest* req,
             ::palm::auth::v1::WechatAllOauth2UserResponse_Item* resp) {
               return service->GetOauth2UserByOpenId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::auth::v1::WechatUserQueryByUnionIdRequest, ::palm::auth::v1::WechatAllOauth2UserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::WechatUserQueryByUnionIdRequest* req,
             ::palm::auth::v1::WechatAllOauth2UserResponse* resp) {
               return service->GetOauth2UserByUnionId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::google::protobuf::Empty, ::palm::auth::v1::WechatAllMiniProgramUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::palm::auth::v1::WechatAllMiniProgramUserResponse* resp) {
               return service->AllMiniProgramUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->DestroyMiniProgramUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::auth::v1::WechatUserBindByIdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::WechatUserBindByIdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->BindMiniProgramUserById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::nut::v1::IdRequest, ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item* resp) {
               return service->GetMiniProgramUserById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::auth::v1::WechatUserQueryByOpenIdRequest, ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::WechatUserQueryByOpenIdRequest* req,
             ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item* resp) {
               return service->GetMiniProgramUserByOpenId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Wechat_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Wechat::Service, ::palm::auth::v1::WechatUserQueryByUnionIdRequest, ::palm::auth::v1::WechatAllMiniProgramUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Wechat::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::WechatUserQueryByUnionIdRequest* req,
             ::palm::auth::v1::WechatAllMiniProgramUserResponse* resp) {
               return service->GetMiniProgramUserByUnionId(ctx, req, resp);
             }, this)));
}

Wechat::Service::~Service() {
}

::grpc::Status Wechat::Service::Oauth2SignInState(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::auth::v1::WechatOauth2SignInStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::Oauth2SignInUrl(::grpc::ServerContext* context, const ::palm::auth::v1::WechatOauth2SignInUrlRequest* request, ::palm::orchid::v1::WechatOauth2QrConnectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::SignInByOauth2(::grpc::ServerContext* context, const ::palm::auth::v1::SignInByWechatOauth2Request* request, ::palm::auth::v1::UserSignInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::AllOauth2User(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::auth::v1::WechatAllOauth2UserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::DestroyOauth2User(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::BindOauth2UserById(::grpc::ServerContext* context, const ::palm::auth::v1::WechatUserBindByIdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::BindOauth2UserByAccount(::grpc::ServerContext* context, const ::palm::auth::v1::WechatUserBindByAccountRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::GetOauth2UserById(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::palm::auth::v1::WechatAllOauth2UserResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::GetOauth2UserByOpenId(::grpc::ServerContext* context, const ::palm::auth::v1::WechatUserQueryByOpenIdRequest* request, ::palm::auth::v1::WechatAllOauth2UserResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::GetOauth2UserByUnionId(::grpc::ServerContext* context, const ::palm::auth::v1::WechatUserQueryByUnionIdRequest* request, ::palm::auth::v1::WechatAllOauth2UserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::AllMiniProgramUser(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::palm::auth::v1::WechatAllMiniProgramUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::DestroyMiniProgramUser(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::BindMiniProgramUserById(::grpc::ServerContext* context, const ::palm::auth::v1::WechatUserBindByIdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::GetMiniProgramUserById(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::GetMiniProgramUserByOpenId(::grpc::ServerContext* context, const ::palm::auth::v1::WechatUserQueryByOpenIdRequest* request, ::palm::auth::v1::WechatAllMiniProgramUserResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Wechat::Service::GetMiniProgramUserByUnionId(::grpc::ServerContext* context, const ::palm::auth::v1::WechatUserQueryByUnionIdRequest* request, ::palm::auth::v1::WechatAllMiniProgramUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Attachment_method_names[] = {
  "/palm.auth.v1.Attachment/Index",
  "/palm.auth.v1.Attachment/Destroy",
  "/palm.auth.v1.Attachment/Show",
};

std::unique_ptr< Attachment::Stub> Attachment::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Attachment::Stub> stub(new Attachment::Stub(channel, options));
  return stub;
}

Attachment::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Index_(Attachment_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(Attachment_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Show_(Attachment_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Attachment::Stub::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::palm::auth::v1::AttachmentIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::Pager, ::palm::auth::v1::AttachmentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void Attachment::Stub::async::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager* request, ::palm::auth::v1::AttachmentIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::Pager, ::palm::auth::v1::AttachmentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void Attachment::Stub::async::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager* request, ::palm::auth::v1::AttachmentIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::AttachmentIndexResponse>* Attachment::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::AttachmentIndexResponse, ::palm::nut::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::AttachmentIndexResponse>* Attachment::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Attachment::Stub::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void Attachment::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void Attachment::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Attachment::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Attachment::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Attachment::Stub::Show(::grpc::ClientContext* context, const ::palm::auth::v1::AttachmentShowRequest& request, ::palm::auth::v1::AttachmentShowResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::AttachmentShowRequest, ::palm::auth::v1::AttachmentShowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Show_, context, request, response);
}

void Attachment::Stub::async::Show(::grpc::ClientContext* context, const ::palm::auth::v1::AttachmentShowRequest* request, ::palm::auth::v1::AttachmentShowResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::AttachmentShowRequest, ::palm::auth::v1::AttachmentShowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, std::move(f));
}

void Attachment::Stub::async::Show(::grpc::ClientContext* context, const ::palm::auth::v1::AttachmentShowRequest* request, ::palm::auth::v1::AttachmentShowResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Show_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::AttachmentShowResponse>* Attachment::Stub::PrepareAsyncShowRaw(::grpc::ClientContext* context, const ::palm::auth::v1::AttachmentShowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::AttachmentShowResponse, ::palm::auth::v1::AttachmentShowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Show_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::AttachmentShowResponse>* Attachment::Stub::AsyncShowRaw(::grpc::ClientContext* context, const ::palm::auth::v1::AttachmentShowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShowRaw(context, request, cq);
  result->StartCall();
  return result;
}

Attachment::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Attachment_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Attachment::Service, ::palm::nut::v1::Pager, ::palm::auth::v1::AttachmentIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Attachment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::Pager* req,
             ::palm::auth::v1::AttachmentIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Attachment_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Attachment::Service, ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Attachment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Attachment_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Attachment::Service, ::palm::auth::v1::AttachmentShowRequest, ::palm::auth::v1::AttachmentShowResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Attachment::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::AttachmentShowRequest* req,
             ::palm::auth::v1::AttachmentShowResponse* resp) {
               return service->Show(ctx, req, resp);
             }, this)));
}

Attachment::Service::~Service() {
}

::grpc::Status Attachment::Service::Index(::grpc::ServerContext* context, const ::palm::nut::v1::Pager* request, ::palm::auth::v1::AttachmentIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Attachment::Service::Destroy(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Attachment::Service::Show(::grpc::ServerContext* context, const ::palm::auth::v1::AttachmentShowRequest* request, ::palm::auth::v1::AttachmentShowResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Locale_method_names[] = {
  "/palm.auth.v1.Locale/Create",
  "/palm.auth.v1.Locale/Update",
  "/palm.auth.v1.Locale/ByLangAndCode",
  "/palm.auth.v1.Locale/ById",
  "/palm.auth.v1.Locale/ByLang",
  "/palm.auth.v1.Locale/ByCode",
  "/palm.auth.v1.Locale/Index",
  "/palm.auth.v1.Locale/Destroy",
};

std::unique_ptr< Locale::Stub> Locale::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Locale::Stub> stub(new Locale::Stub(channel, options));
  return stub;
}

Locale::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(Locale_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(Locale_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByLangAndCode_(Locale_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ById_(Locale_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByLang_(Locale_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ByCode_(Locale_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Index_(Locale_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Destroy_(Locale_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Locale::Stub::Create(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleCreateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::LocaleCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void Locale::Stub::async::Create(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleCreateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::LocaleCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Locale::Stub::async::Create(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleCreateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::auth::v1::LocaleCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::Update(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleUpdateRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::LocaleUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void Locale::Stub::async::Update(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleUpdateRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::LocaleUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void Locale::Stub::async::Update(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleUpdateRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::auth::v1::LocaleUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::ByLangAndCode(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleByLangAndCodeRequest& request, ::palm::auth::v1::LocaleIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::LocaleByLangAndCodeRequest, ::palm::auth::v1::LocaleIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByLangAndCode_, context, request, response);
}

void Locale::Stub::async::ByLangAndCode(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleByLangAndCodeRequest* request, ::palm::auth::v1::LocaleIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::LocaleByLangAndCodeRequest, ::palm::auth::v1::LocaleIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByLangAndCode_, context, request, response, std::move(f));
}

void Locale::Stub::async::ByLangAndCode(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleByLangAndCodeRequest* request, ::palm::auth::v1::LocaleIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByLangAndCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::LocaleIndexResponse_Item>* Locale::Stub::PrepareAsyncByLangAndCodeRaw(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleByLangAndCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::LocaleIndexResponse_Item, ::palm::auth::v1::LocaleByLangAndCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByLangAndCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::LocaleIndexResponse_Item>* Locale::Stub::AsyncByLangAndCodeRaw(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleByLangAndCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByLangAndCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::ById(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::palm::auth::v1::LocaleIndexResponse_Item* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::palm::auth::v1::LocaleIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ById_, context, request, response);
}

void Locale::Stub::async::ById(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::palm::auth::v1::LocaleIndexResponse_Item* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::palm::auth::v1::LocaleIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ById_, context, request, response, std::move(f));
}

void Locale::Stub::async::ById(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::palm::auth::v1::LocaleIndexResponse_Item* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::LocaleIndexResponse_Item>* Locale::Stub::PrepareAsyncByIdRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::LocaleIndexResponse_Item, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ById_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::LocaleIndexResponse_Item>* Locale::Stub::AsyncByIdRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::ByLang(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleByLangRequest& request, ::palm::auth::v1::LocaleListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::LocaleByLangRequest, ::palm::auth::v1::LocaleListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByLang_, context, request, response);
}

void Locale::Stub::async::ByLang(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleByLangRequest* request, ::palm::auth::v1::LocaleListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::LocaleByLangRequest, ::palm::auth::v1::LocaleListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByLang_, context, request, response, std::move(f));
}

void Locale::Stub::async::ByLang(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleByLangRequest* request, ::palm::auth::v1::LocaleListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByLang_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::LocaleListResponse>* Locale::Stub::PrepareAsyncByLangRaw(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleByLangRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::LocaleListResponse, ::palm::auth::v1::LocaleByLangRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByLang_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::LocaleListResponse>* Locale::Stub::AsyncByLangRaw(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleByLangRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByLangRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::ByCode(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleByCodeRequest& request, ::palm::auth::v1::LocaleListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::auth::v1::LocaleByCodeRequest, ::palm::auth::v1::LocaleListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ByCode_, context, request, response);
}

void Locale::Stub::async::ByCode(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleByCodeRequest* request, ::palm::auth::v1::LocaleListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::auth::v1::LocaleByCodeRequest, ::palm::auth::v1::LocaleListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByCode_, context, request, response, std::move(f));
}

void Locale::Stub::async::ByCode(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleByCodeRequest* request, ::palm::auth::v1::LocaleListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ByCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::LocaleListResponse>* Locale::Stub::PrepareAsyncByCodeRaw(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleByCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::LocaleListResponse, ::palm::auth::v1::LocaleByCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ByCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::LocaleListResponse>* Locale::Stub::AsyncByCodeRaw(::grpc::ClientContext* context, const ::palm::auth::v1::LocaleByCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncByCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::palm::auth::v1::LocaleIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::Pager, ::palm::auth::v1::LocaleIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Index_, context, request, response);
}

void Locale::Stub::async::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager* request, ::palm::auth::v1::LocaleIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::Pager, ::palm::auth::v1::LocaleIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, std::move(f));
}

void Locale::Stub::async::Index(::grpc::ClientContext* context, const ::palm::nut::v1::Pager* request, ::palm::auth::v1::LocaleIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Index_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::LocaleIndexResponse>* Locale::Stub::PrepareAsyncIndexRaw(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::palm::auth::v1::LocaleIndexResponse, ::palm::nut::v1::Pager, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Index_, context, request);
}

::grpc::ClientAsyncResponseReader< ::palm::auth::v1::LocaleIndexResponse>* Locale::Stub::AsyncIndexRaw(::grpc::ClientContext* context, const ::palm::nut::v1::Pager& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Locale::Stub::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Destroy_, context, request, response);
}

void Locale::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, std::move(f));
}

void Locale::Stub::async::Destroy(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Destroy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::PrepareAsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::palm::nut::v1::IdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Destroy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Locale::Stub::AsyncDestroyRaw(::grpc::ClientContext* context, const ::palm::nut::v1::IdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyRaw(context, request, cq);
  result->StartCall();
  return result;
}

Locale::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::auth::v1::LocaleCreateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::LocaleCreateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::auth::v1::LocaleUpdateRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::LocaleUpdateRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::auth::v1::LocaleByLangAndCodeRequest, ::palm::auth::v1::LocaleIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::LocaleByLangAndCodeRequest* req,
             ::palm::auth::v1::LocaleIndexResponse_Item* resp) {
               return service->ByLangAndCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::nut::v1::IdRequest, ::palm::auth::v1::LocaleIndexResponse_Item, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::palm::auth::v1::LocaleIndexResponse_Item* resp) {
               return service->ById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::auth::v1::LocaleByLangRequest, ::palm::auth::v1::LocaleListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::LocaleByLangRequest* req,
             ::palm::auth::v1::LocaleListResponse* resp) {
               return service->ByLang(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::auth::v1::LocaleByCodeRequest, ::palm::auth::v1::LocaleListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::auth::v1::LocaleByCodeRequest* req,
             ::palm::auth::v1::LocaleListResponse* resp) {
               return service->ByCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::nut::v1::Pager, ::palm::auth::v1::LocaleIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::Pager* req,
             ::palm::auth::v1::LocaleIndexResponse* resp) {
               return service->Index(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Locale_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Locale::Service, ::palm::nut::v1::IdRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Locale::Service* service,
             ::grpc::ServerContext* ctx,
             const ::palm::nut::v1::IdRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->Destroy(ctx, req, resp);
             }, this)));
}

Locale::Service::~Service() {
}

::grpc::Status Locale::Service::Create(::grpc::ServerContext* context, const ::palm::auth::v1::LocaleCreateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::Update(::grpc::ServerContext* context, const ::palm::auth::v1::LocaleUpdateRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::ByLangAndCode(::grpc::ServerContext* context, const ::palm::auth::v1::LocaleByLangAndCodeRequest* request, ::palm::auth::v1::LocaleIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::ById(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::palm::auth::v1::LocaleIndexResponse_Item* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::ByLang(::grpc::ServerContext* context, const ::palm::auth::v1::LocaleByLangRequest* request, ::palm::auth::v1::LocaleListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::ByCode(::grpc::ServerContext* context, const ::palm::auth::v1::LocaleByCodeRequest* request, ::palm::auth::v1::LocaleListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::Index(::grpc::ServerContext* context, const ::palm::nut::v1::Pager* request, ::palm::auth::v1::LocaleIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Locale::Service::Destroy(::grpc::ServerContext* context, const ::palm::nut::v1::IdRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace palm
}  // namespace auth
}  // namespace v1

