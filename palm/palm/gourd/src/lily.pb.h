// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lily.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lily_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lily_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lily_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lily_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lily_2eproto;
namespace palm {
namespace lily {
namespace v1 {
class EpubBuildRequest;
struct EpubBuildRequestDefaultTypeInternal;
extern EpubBuildRequestDefaultTypeInternal _EpubBuildRequest_default_instance_;
class ExcelModel;
struct ExcelModelDefaultTypeInternal;
extern ExcelModelDefaultTypeInternal _ExcelModel_default_instance_;
class ExcelModel_Sheet;
struct ExcelModel_SheetDefaultTypeInternal;
extern ExcelModel_SheetDefaultTypeInternal _ExcelModel_Sheet_default_instance_;
class ExcelModel_Sheet_Cell;
struct ExcelModel_Sheet_CellDefaultTypeInternal;
extern ExcelModel_Sheet_CellDefaultTypeInternal _ExcelModel_Sheet_Cell_default_instance_;
class S3File;
struct S3FileDefaultTypeInternal;
extern S3FileDefaultTypeInternal _S3File_default_instance_;
class S3GetFileRequest;
struct S3GetFileRequestDefaultTypeInternal;
extern S3GetFileRequestDefaultTypeInternal _S3GetFileRequest_default_instance_;
class S3GetFileResponse;
struct S3GetFileResponseDefaultTypeInternal;
extern S3GetFileResponseDefaultTypeInternal _S3GetFileResponse_default_instance_;
class TexToRequest;
struct TexToRequestDefaultTypeInternal;
extern TexToRequestDefaultTypeInternal _TexToRequest_default_instance_;
class TexToRequest_FilesEntry_DoNotUse;
struct TexToRequest_FilesEntry_DoNotUseDefaultTypeInternal;
extern TexToRequest_FilesEntry_DoNotUseDefaultTypeInternal _TexToRequest_FilesEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace lily
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> ::palm::lily::v1::EpubBuildRequest* Arena::CreateMaybeMessage<::palm::lily::v1::EpubBuildRequest>(Arena*);
template<> ::palm::lily::v1::ExcelModel* Arena::CreateMaybeMessage<::palm::lily::v1::ExcelModel>(Arena*);
template<> ::palm::lily::v1::ExcelModel_Sheet* Arena::CreateMaybeMessage<::palm::lily::v1::ExcelModel_Sheet>(Arena*);
template<> ::palm::lily::v1::ExcelModel_Sheet_Cell* Arena::CreateMaybeMessage<::palm::lily::v1::ExcelModel_Sheet_Cell>(Arena*);
template<> ::palm::lily::v1::S3File* Arena::CreateMaybeMessage<::palm::lily::v1::S3File>(Arena*);
template<> ::palm::lily::v1::S3GetFileRequest* Arena::CreateMaybeMessage<::palm::lily::v1::S3GetFileRequest>(Arena*);
template<> ::palm::lily::v1::S3GetFileResponse* Arena::CreateMaybeMessage<::palm::lily::v1::S3GetFileResponse>(Arena*);
template<> ::palm::lily::v1::TexToRequest* Arena::CreateMaybeMessage<::palm::lily::v1::TexToRequest>(Arena*);
template<> ::palm::lily::v1::TexToRequest_FilesEntry_DoNotUse* Arena::CreateMaybeMessage<::palm::lily::v1::TexToRequest_FilesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace palm {
namespace lily {
namespace v1 {

// ===================================================================

class ExcelModel_Sheet_Cell final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.ExcelModel.Sheet.Cell) */ {
 public:
  inline ExcelModel_Sheet_Cell() : ExcelModel_Sheet_Cell(nullptr) {}
  ~ExcelModel_Sheet_Cell() override;
  explicit PROTOBUF_CONSTEXPR ExcelModel_Sheet_Cell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExcelModel_Sheet_Cell(const ExcelModel_Sheet_Cell& from);
  ExcelModel_Sheet_Cell(ExcelModel_Sheet_Cell&& from) noexcept
    : ExcelModel_Sheet_Cell() {
    *this = ::std::move(from);
  }

  inline ExcelModel_Sheet_Cell& operator=(const ExcelModel_Sheet_Cell& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExcelModel_Sheet_Cell& operator=(ExcelModel_Sheet_Cell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExcelModel_Sheet_Cell& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExcelModel_Sheet_Cell* internal_default_instance() {
    return reinterpret_cast<const ExcelModel_Sheet_Cell*>(
               &_ExcelModel_Sheet_Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExcelModel_Sheet_Cell& a, ExcelModel_Sheet_Cell& b) {
    a.Swap(&b);
  }
  inline void Swap(ExcelModel_Sheet_Cell* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExcelModel_Sheet_Cell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExcelModel_Sheet_Cell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExcelModel_Sheet_Cell>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExcelModel_Sheet_Cell& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExcelModel_Sheet_Cell& from) {
    ExcelModel_Sheet_Cell::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExcelModel_Sheet_Cell* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.lily.v1.ExcelModel.Sheet.Cell";
  }
  protected:
  explicit ExcelModel_Sheet_Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 3,
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
  };
  // string val = 3;
  void clear_val();
  const std::string& val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val();
  PROTOBUF_NODISCARD std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // uint32 row = 1;
  void clear_row();
  uint32_t row() const;
  void set_row(uint32_t value);
  private:
  uint32_t _internal_row() const;
  void _internal_set_row(uint32_t value);
  public:

  // uint32 col = 2;
  void clear_col();
  uint32_t col() const;
  void set_col(uint32_t value);
  private:
  uint32_t _internal_col() const;
  void _internal_set_col(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:palm.lily.v1.ExcelModel.Sheet.Cell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
    uint32_t row_;
    uint32_t col_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class ExcelModel_Sheet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.ExcelModel.Sheet) */ {
 public:
  inline ExcelModel_Sheet() : ExcelModel_Sheet(nullptr) {}
  ~ExcelModel_Sheet() override;
  explicit PROTOBUF_CONSTEXPR ExcelModel_Sheet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExcelModel_Sheet(const ExcelModel_Sheet& from);
  ExcelModel_Sheet(ExcelModel_Sheet&& from) noexcept
    : ExcelModel_Sheet() {
    *this = ::std::move(from);
  }

  inline ExcelModel_Sheet& operator=(const ExcelModel_Sheet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExcelModel_Sheet& operator=(ExcelModel_Sheet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExcelModel_Sheet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExcelModel_Sheet* internal_default_instance() {
    return reinterpret_cast<const ExcelModel_Sheet*>(
               &_ExcelModel_Sheet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExcelModel_Sheet& a, ExcelModel_Sheet& b) {
    a.Swap(&b);
  }
  inline void Swap(ExcelModel_Sheet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExcelModel_Sheet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExcelModel_Sheet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExcelModel_Sheet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExcelModel_Sheet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExcelModel_Sheet& from) {
    ExcelModel_Sheet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExcelModel_Sheet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.lily.v1.ExcelModel.Sheet";
  }
  protected:
  explicit ExcelModel_Sheet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExcelModel_Sheet_Cell Cell;

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .palm.lily.v1.ExcelModel.Sheet.Cell cells = 2;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::palm::lily::v1::ExcelModel_Sheet_Cell* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet_Cell >*
      mutable_cells();
  private:
  const ::palm::lily::v1::ExcelModel_Sheet_Cell& _internal_cells(int index) const;
  ::palm::lily::v1::ExcelModel_Sheet_Cell* _internal_add_cells();
  public:
  const ::palm::lily::v1::ExcelModel_Sheet_Cell& cells(int index) const;
  ::palm::lily::v1::ExcelModel_Sheet_Cell* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet_Cell >&
      cells() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:palm.lily.v1.ExcelModel.Sheet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet_Cell > cells_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class ExcelModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.ExcelModel) */ {
 public:
  inline ExcelModel() : ExcelModel(nullptr) {}
  ~ExcelModel() override;
  explicit PROTOBUF_CONSTEXPR ExcelModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExcelModel(const ExcelModel& from);
  ExcelModel(ExcelModel&& from) noexcept
    : ExcelModel() {
    *this = ::std::move(from);
  }

  inline ExcelModel& operator=(const ExcelModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExcelModel& operator=(ExcelModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExcelModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExcelModel* internal_default_instance() {
    return reinterpret_cast<const ExcelModel*>(
               &_ExcelModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExcelModel& a, ExcelModel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExcelModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExcelModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExcelModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExcelModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExcelModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExcelModel& from) {
    ExcelModel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExcelModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.lily.v1.ExcelModel";
  }
  protected:
  explicit ExcelModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExcelModel_Sheet Sheet;

  // accessors -------------------------------------------------------

  enum : int {
    kSheetsFieldNumber = 1,
  };
  // repeated .palm.lily.v1.ExcelModel.Sheet sheets = 1;
  int sheets_size() const;
  private:
  int _internal_sheets_size() const;
  public:
  void clear_sheets();
  ::palm::lily::v1::ExcelModel_Sheet* mutable_sheets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet >*
      mutable_sheets();
  private:
  const ::palm::lily::v1::ExcelModel_Sheet& _internal_sheets(int index) const;
  ::palm::lily::v1::ExcelModel_Sheet* _internal_add_sheets();
  public:
  const ::palm::lily::v1::ExcelModel_Sheet& sheets(int index) const;
  ::palm::lily::v1::ExcelModel_Sheet* add_sheets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet >&
      sheets() const;

  // @@protoc_insertion_point(class_scope:palm.lily.v1.ExcelModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet > sheets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class S3File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.S3File) */ {
 public:
  inline S3File() : S3File(nullptr) {}
  ~S3File() override;
  explicit PROTOBUF_CONSTEXPR S3File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S3File(const S3File& from);
  S3File(S3File&& from) noexcept
    : S3File() {
    *this = ::std::move(from);
  }

  inline S3File& operator=(const S3File& from) {
    CopyFrom(from);
    return *this;
  }
  inline S3File& operator=(S3File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S3File& default_instance() {
    return *internal_default_instance();
  }
  static inline const S3File* internal_default_instance() {
    return reinterpret_cast<const S3File*>(
               &_S3File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S3File& a, S3File& b) {
    a.Swap(&b);
  }
  inline void Swap(S3File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S3File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S3File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S3File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S3File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S3File& from) {
    S3File::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S3File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.lily.v1.S3File";
  }
  protected:
  explicit S3File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kNameFieldNumber = 2,
    kContentTypeFieldNumber = 9,
  };
  // string bucket = 1;
  void clear_bucket();
  const std::string& bucket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string content_type = 9;
  void clear_content_type();
  const std::string& content_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);
  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(const std::string& value);
  std::string* _internal_mutable_content_type();
  public:

  // @@protoc_insertion_point(class_scope:palm.lily.v1.S3File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class S3GetFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.S3GetFileRequest) */ {
 public:
  inline S3GetFileRequest() : S3GetFileRequest(nullptr) {}
  ~S3GetFileRequest() override;
  explicit PROTOBUF_CONSTEXPR S3GetFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S3GetFileRequest(const S3GetFileRequest& from);
  S3GetFileRequest(S3GetFileRequest&& from) noexcept
    : S3GetFileRequest() {
    *this = ::std::move(from);
  }

  inline S3GetFileRequest& operator=(const S3GetFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline S3GetFileRequest& operator=(S3GetFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S3GetFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const S3GetFileRequest* internal_default_instance() {
    return reinterpret_cast<const S3GetFileRequest*>(
               &_S3GetFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S3GetFileRequest& a, S3GetFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(S3GetFileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S3GetFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S3GetFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S3GetFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S3GetFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S3GetFileRequest& from) {
    S3GetFileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S3GetFileRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.lily.v1.S3GetFileRequest";
  }
  protected:
  explicit S3GetFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kNameFieldNumber = 2,
    kTtlFieldNumber = 9,
  };
  // string bucket = 1;
  void clear_bucket();
  const std::string& bucket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Duration ttl = 9;
  bool has_ttl() const;
  private:
  bool _internal_has_ttl() const;
  public:
  void clear_ttl();
  const ::PROTOBUF_NAMESPACE_ID::Duration& ttl() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_ttl();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_ttl();
  void set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_ttl() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_ttl();
  public:
  void unsafe_arena_set_allocated_ttl(
      ::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_ttl();

  // @@protoc_insertion_point(class_scope:palm.lily.v1.S3GetFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class S3GetFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.S3GetFileResponse) */ {
 public:
  inline S3GetFileResponse() : S3GetFileResponse(nullptr) {}
  ~S3GetFileResponse() override;
  explicit PROTOBUF_CONSTEXPR S3GetFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S3GetFileResponse(const S3GetFileResponse& from);
  S3GetFileResponse(S3GetFileResponse&& from) noexcept
    : S3GetFileResponse() {
    *this = ::std::move(from);
  }

  inline S3GetFileResponse& operator=(const S3GetFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline S3GetFileResponse& operator=(S3GetFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S3GetFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const S3GetFileResponse* internal_default_instance() {
    return reinterpret_cast<const S3GetFileResponse*>(
               &_S3GetFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S3GetFileResponse& a, S3GetFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(S3GetFileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S3GetFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S3GetFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S3GetFileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S3GetFileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S3GetFileResponse& from) {
    S3GetFileResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S3GetFileResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.lily.v1.S3GetFileResponse";
  }
  protected:
  explicit S3GetFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:palm.lily.v1.S3GetFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class TexToRequest_FilesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TexToRequest_FilesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TexToRequest_FilesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> SuperType;
  TexToRequest_FilesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TexToRequest_FilesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TexToRequest_FilesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TexToRequest_FilesEntry_DoNotUse& other);
  static const TexToRequest_FilesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TexToRequest_FilesEntry_DoNotUse*>(&_TexToRequest_FilesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "palm.lily.v1.TexToRequest.FilesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_lily_2eproto;
};

// -------------------------------------------------------------------

class TexToRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:palm.lily.v1.TexToRequest) */ {
 public:
  inline TexToRequest() : TexToRequest(nullptr) {}
  ~TexToRequest() override;
  explicit PROTOBUF_CONSTEXPR TexToRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TexToRequest(const TexToRequest& from);
  TexToRequest(TexToRequest&& from) noexcept
    : TexToRequest() {
    *this = ::std::move(from);
  }

  inline TexToRequest& operator=(const TexToRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TexToRequest& operator=(TexToRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TexToRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TexToRequest* internal_default_instance() {
    return reinterpret_cast<const TexToRequest*>(
               &_TexToRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TexToRequest& a, TexToRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TexToRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TexToRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TexToRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TexToRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TexToRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TexToRequest& from) {
    TexToRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TexToRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.lily.v1.TexToRequest";
  }
  protected:
  explicit TexToRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 2,
    kTitleFieldNumber = 1,
    kOwnerFieldNumber = 8,
    kTtlFieldNumber = 7,
    kPublishedFieldNumber = 9,
  };
  // map<string, bytes> files = 2;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_files() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_files();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      files() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_files();

  // string title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string owner = 8;
  bool has_owner() const;
  private:
  bool _internal_has_owner() const;
  public:
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // optional .google.protobuf.Duration ttl = 7;
  bool has_ttl() const;
  private:
  bool _internal_has_ttl() const;
  public:
  void clear_ttl();
  const ::PROTOBUF_NAMESPACE_ID::Duration& ttl() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_ttl();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_ttl();
  void set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_ttl() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_ttl();
  public:
  void unsafe_arena_set_allocated_ttl(
      ::PROTOBUF_NAMESPACE_ID::Duration* ttl);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_ttl();

  // bool published = 9;
  void clear_published();
  bool published() const;
  void set_published(bool value);
  private:
  bool _internal_published() const;
  void _internal_set_published(bool value);
  public:

  // @@protoc_insertion_point(class_scope:palm.lily.v1.TexToRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TexToRequest_FilesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES> files_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl_;
    bool published_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lily_2eproto;
};
// -------------------------------------------------------------------

class EpubBuildRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:palm.lily.v1.EpubBuildRequest) */ {
 public:
  inline EpubBuildRequest() : EpubBuildRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR EpubBuildRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EpubBuildRequest(const EpubBuildRequest& from);
  EpubBuildRequest(EpubBuildRequest&& from) noexcept
    : EpubBuildRequest() {
    *this = ::std::move(from);
  }

  inline EpubBuildRequest& operator=(const EpubBuildRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpubBuildRequest& operator=(EpubBuildRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EpubBuildRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EpubBuildRequest* internal_default_instance() {
    return reinterpret_cast<const EpubBuildRequest*>(
               &_EpubBuildRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EpubBuildRequest& a, EpubBuildRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EpubBuildRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpubBuildRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EpubBuildRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EpubBuildRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EpubBuildRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EpubBuildRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "palm.lily.v1.EpubBuildRequest";
  }
  protected:
  explicit EpubBuildRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:palm.lily.v1.EpubBuildRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_lily_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExcelModel_Sheet_Cell

// uint32 row = 1;
inline void ExcelModel_Sheet_Cell::clear_row() {
  _impl_.row_ = 0u;
}
inline uint32_t ExcelModel_Sheet_Cell::_internal_row() const {
  return _impl_.row_;
}
inline uint32_t ExcelModel_Sheet_Cell::row() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelModel.Sheet.Cell.row)
  return _internal_row();
}
inline void ExcelModel_Sheet_Cell::_internal_set_row(uint32_t value) {
  
  _impl_.row_ = value;
}
inline void ExcelModel_Sheet_Cell::set_row(uint32_t value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:palm.lily.v1.ExcelModel.Sheet.Cell.row)
}

// uint32 col = 2;
inline void ExcelModel_Sheet_Cell::clear_col() {
  _impl_.col_ = 0u;
}
inline uint32_t ExcelModel_Sheet_Cell::_internal_col() const {
  return _impl_.col_;
}
inline uint32_t ExcelModel_Sheet_Cell::col() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelModel.Sheet.Cell.col)
  return _internal_col();
}
inline void ExcelModel_Sheet_Cell::_internal_set_col(uint32_t value) {
  
  _impl_.col_ = value;
}
inline void ExcelModel_Sheet_Cell::set_col(uint32_t value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:palm.lily.v1.ExcelModel.Sheet.Cell.col)
}

// string val = 3;
inline void ExcelModel_Sheet_Cell::clear_val() {
  _impl_.val_.ClearToEmpty();
}
inline const std::string& ExcelModel_Sheet_Cell::val() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelModel.Sheet.Cell.val)
  return _internal_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExcelModel_Sheet_Cell::set_val(ArgT0&& arg0, ArgT... args) {
 
 _impl_.val_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.ExcelModel.Sheet.Cell.val)
}
inline std::string* ExcelModel_Sheet_Cell::mutable_val() {
  std::string* _s = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.ExcelModel.Sheet.Cell.val)
  return _s;
}
inline const std::string& ExcelModel_Sheet_Cell::_internal_val() const {
  return _impl_.val_.Get();
}
inline void ExcelModel_Sheet_Cell::_internal_set_val(const std::string& value) {
  
  _impl_.val_.Set(value, GetArenaForAllocation());
}
inline std::string* ExcelModel_Sheet_Cell::_internal_mutable_val() {
  
  return _impl_.val_.Mutable(GetArenaForAllocation());
}
inline std::string* ExcelModel_Sheet_Cell::release_val() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.ExcelModel.Sheet.Cell.val)
  return _impl_.val_.Release();
}
inline void ExcelModel_Sheet_Cell::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  _impl_.val_.SetAllocated(val, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.val_.IsDefault()) {
    _impl_.val_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.ExcelModel.Sheet.Cell.val)
}

// -------------------------------------------------------------------

// ExcelModel_Sheet

// string name = 1;
inline void ExcelModel_Sheet::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ExcelModel_Sheet::name() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelModel.Sheet.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExcelModel_Sheet::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.ExcelModel.Sheet.name)
}
inline std::string* ExcelModel_Sheet::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.ExcelModel.Sheet.name)
  return _s;
}
inline const std::string& ExcelModel_Sheet::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ExcelModel_Sheet::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ExcelModel_Sheet::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ExcelModel_Sheet::release_name() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.ExcelModel.Sheet.name)
  return _impl_.name_.Release();
}
inline void ExcelModel_Sheet::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.ExcelModel.Sheet.name)
}

// repeated .palm.lily.v1.ExcelModel.Sheet.Cell cells = 2;
inline int ExcelModel_Sheet::_internal_cells_size() const {
  return _impl_.cells_.size();
}
inline int ExcelModel_Sheet::cells_size() const {
  return _internal_cells_size();
}
inline void ExcelModel_Sheet::clear_cells() {
  _impl_.cells_.Clear();
}
inline ::palm::lily::v1::ExcelModel_Sheet_Cell* ExcelModel_Sheet::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.ExcelModel.Sheet.cells)
  return _impl_.cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet_Cell >*
ExcelModel_Sheet::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:palm.lily.v1.ExcelModel.Sheet.cells)
  return &_impl_.cells_;
}
inline const ::palm::lily::v1::ExcelModel_Sheet_Cell& ExcelModel_Sheet::_internal_cells(int index) const {
  return _impl_.cells_.Get(index);
}
inline const ::palm::lily::v1::ExcelModel_Sheet_Cell& ExcelModel_Sheet::cells(int index) const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelModel.Sheet.cells)
  return _internal_cells(index);
}
inline ::palm::lily::v1::ExcelModel_Sheet_Cell* ExcelModel_Sheet::_internal_add_cells() {
  return _impl_.cells_.Add();
}
inline ::palm::lily::v1::ExcelModel_Sheet_Cell* ExcelModel_Sheet::add_cells() {
  ::palm::lily::v1::ExcelModel_Sheet_Cell* _add = _internal_add_cells();
  // @@protoc_insertion_point(field_add:palm.lily.v1.ExcelModel.Sheet.cells)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet_Cell >&
ExcelModel_Sheet::cells() const {
  // @@protoc_insertion_point(field_list:palm.lily.v1.ExcelModel.Sheet.cells)
  return _impl_.cells_;
}

// -------------------------------------------------------------------

// ExcelModel

// repeated .palm.lily.v1.ExcelModel.Sheet sheets = 1;
inline int ExcelModel::_internal_sheets_size() const {
  return _impl_.sheets_.size();
}
inline int ExcelModel::sheets_size() const {
  return _internal_sheets_size();
}
inline void ExcelModel::clear_sheets() {
  _impl_.sheets_.Clear();
}
inline ::palm::lily::v1::ExcelModel_Sheet* ExcelModel::mutable_sheets(int index) {
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.ExcelModel.sheets)
  return _impl_.sheets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet >*
ExcelModel::mutable_sheets() {
  // @@protoc_insertion_point(field_mutable_list:palm.lily.v1.ExcelModel.sheets)
  return &_impl_.sheets_;
}
inline const ::palm::lily::v1::ExcelModel_Sheet& ExcelModel::_internal_sheets(int index) const {
  return _impl_.sheets_.Get(index);
}
inline const ::palm::lily::v1::ExcelModel_Sheet& ExcelModel::sheets(int index) const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.ExcelModel.sheets)
  return _internal_sheets(index);
}
inline ::palm::lily::v1::ExcelModel_Sheet* ExcelModel::_internal_add_sheets() {
  return _impl_.sheets_.Add();
}
inline ::palm::lily::v1::ExcelModel_Sheet* ExcelModel::add_sheets() {
  ::palm::lily::v1::ExcelModel_Sheet* _add = _internal_add_sheets();
  // @@protoc_insertion_point(field_add:palm.lily.v1.ExcelModel.sheets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::palm::lily::v1::ExcelModel_Sheet >&
ExcelModel::sheets() const {
  // @@protoc_insertion_point(field_list:palm.lily.v1.ExcelModel.sheets)
  return _impl_.sheets_;
}

// -------------------------------------------------------------------

// S3File

// string bucket = 1;
inline void S3File::clear_bucket() {
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& S3File::bucket() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.S3File.bucket)
  return _internal_bucket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S3File::set_bucket(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bucket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.S3File.bucket)
}
inline std::string* S3File::mutable_bucket() {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.S3File.bucket)
  return _s;
}
inline const std::string& S3File::_internal_bucket() const {
  return _impl_.bucket_.Get();
}
inline void S3File::_internal_set_bucket(const std::string& value) {
  
  _impl_.bucket_.Set(value, GetArenaForAllocation());
}
inline std::string* S3File::_internal_mutable_bucket() {
  
  return _impl_.bucket_.Mutable(GetArenaForAllocation());
}
inline std::string* S3File::release_bucket() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.S3File.bucket)
  return _impl_.bucket_.Release();
}
inline void S3File::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  _impl_.bucket_.SetAllocated(bucket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bucket_.IsDefault()) {
    _impl_.bucket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.S3File.bucket)
}

// string name = 2;
inline void S3File::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& S3File::name() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.S3File.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S3File::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.S3File.name)
}
inline std::string* S3File::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.S3File.name)
  return _s;
}
inline const std::string& S3File::_internal_name() const {
  return _impl_.name_.Get();
}
inline void S3File::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* S3File::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* S3File::release_name() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.S3File.name)
  return _impl_.name_.Release();
}
inline void S3File::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.S3File.name)
}

// string content_type = 9;
inline void S3File::clear_content_type() {
  _impl_.content_type_.ClearToEmpty();
}
inline const std::string& S3File::content_type() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.S3File.content_type)
  return _internal_content_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S3File::set_content_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.S3File.content_type)
}
inline std::string* S3File::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.S3File.content_type)
  return _s;
}
inline const std::string& S3File::_internal_content_type() const {
  return _impl_.content_type_.Get();
}
inline void S3File::_internal_set_content_type(const std::string& value) {
  
  _impl_.content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* S3File::_internal_mutable_content_type() {
  
  return _impl_.content_type_.Mutable(GetArenaForAllocation());
}
inline std::string* S3File::release_content_type() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.S3File.content_type)
  return _impl_.content_type_.Release();
}
inline void S3File::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    
  } else {
    
  }
  _impl_.content_type_.SetAllocated(content_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_type_.IsDefault()) {
    _impl_.content_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.S3File.content_type)
}

// -------------------------------------------------------------------

// S3GetFileRequest

// string bucket = 1;
inline void S3GetFileRequest::clear_bucket() {
  _impl_.bucket_.ClearToEmpty();
}
inline const std::string& S3GetFileRequest::bucket() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.S3GetFileRequest.bucket)
  return _internal_bucket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S3GetFileRequest::set_bucket(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bucket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.S3GetFileRequest.bucket)
}
inline std::string* S3GetFileRequest::mutable_bucket() {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.S3GetFileRequest.bucket)
  return _s;
}
inline const std::string& S3GetFileRequest::_internal_bucket() const {
  return _impl_.bucket_.Get();
}
inline void S3GetFileRequest::_internal_set_bucket(const std::string& value) {
  
  _impl_.bucket_.Set(value, GetArenaForAllocation());
}
inline std::string* S3GetFileRequest::_internal_mutable_bucket() {
  
  return _impl_.bucket_.Mutable(GetArenaForAllocation());
}
inline std::string* S3GetFileRequest::release_bucket() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.S3GetFileRequest.bucket)
  return _impl_.bucket_.Release();
}
inline void S3GetFileRequest::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  _impl_.bucket_.SetAllocated(bucket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bucket_.IsDefault()) {
    _impl_.bucket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.S3GetFileRequest.bucket)
}

// string name = 2;
inline void S3GetFileRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& S3GetFileRequest::name() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.S3GetFileRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S3GetFileRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.S3GetFileRequest.name)
}
inline std::string* S3GetFileRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.S3GetFileRequest.name)
  return _s;
}
inline const std::string& S3GetFileRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void S3GetFileRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* S3GetFileRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* S3GetFileRequest::release_name() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.S3GetFileRequest.name)
  return _impl_.name_.Release();
}
inline void S3GetFileRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.S3GetFileRequest.name)
}

// .google.protobuf.Duration ttl = 9;
inline bool S3GetFileRequest::_internal_has_ttl() const {
  return this != internal_default_instance() && _impl_.ttl_ != nullptr;
}
inline bool S3GetFileRequest::has_ttl() const {
  return _internal_has_ttl();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& S3GetFileRequest::_internal_ttl() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& S3GetFileRequest::ttl() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.S3GetFileRequest.ttl)
  return _internal_ttl();
}
inline void S3GetFileRequest::unsafe_arena_set_allocated_ttl(
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  _impl_.ttl_ = ttl;
  if (ttl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lily.v1.S3GetFileRequest.ttl)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* S3GetFileRequest::release_ttl() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* S3GetFileRequest::unsafe_arena_release_ttl() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.S3GetFileRequest.ttl)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* S3GetFileRequest::_internal_mutable_ttl() {
  
  if (_impl_.ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.ttl_ = p;
  }
  return _impl_.ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* S3GetFileRequest::mutable_ttl() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.S3GetFileRequest.ttl)
  return _msg;
}
inline void S3GetFileRequest::set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  if (ttl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ttl));
    if (message_arena != submessage_arena) {
      ttl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ttl, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ttl_ = ttl;
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.S3GetFileRequest.ttl)
}

// -------------------------------------------------------------------

// S3GetFileResponse

// string url = 1;
inline void S3GetFileResponse::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& S3GetFileResponse::url() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.S3GetFileResponse.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S3GetFileResponse::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.S3GetFileResponse.url)
}
inline std::string* S3GetFileResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.S3GetFileResponse.url)
  return _s;
}
inline const std::string& S3GetFileResponse::_internal_url() const {
  return _impl_.url_.Get();
}
inline void S3GetFileResponse::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* S3GetFileResponse::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* S3GetFileResponse::release_url() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.S3GetFileResponse.url)
  return _impl_.url_.Release();
}
inline void S3GetFileResponse::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.S3GetFileResponse.url)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TexToRequest

// string title = 1;
inline void TexToRequest::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& TexToRequest::title() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TexToRequest.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TexToRequest::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.TexToRequest.title)
}
inline std::string* TexToRequest::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TexToRequest.title)
  return _s;
}
inline const std::string& TexToRequest::_internal_title() const {
  return _impl_.title_.Get();
}
inline void TexToRequest::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* TexToRequest::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* TexToRequest::release_title() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.TexToRequest.title)
  return _impl_.title_.Release();
}
inline void TexToRequest::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.TexToRequest.title)
}

// map<string, bytes> files = 2;
inline int TexToRequest::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int TexToRequest::files_size() const {
  return _internal_files_size();
}
inline void TexToRequest::clear_files() {
  _impl_.files_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TexToRequest::_internal_files() const {
  return _impl_.files_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TexToRequest::files() const {
  // @@protoc_insertion_point(field_map:palm.lily.v1.TexToRequest.files)
  return _internal_files();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TexToRequest::_internal_mutable_files() {
  return _impl_.files_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TexToRequest::mutable_files() {
  // @@protoc_insertion_point(field_mutable_map:palm.lily.v1.TexToRequest.files)
  return _internal_mutable_files();
}

// optional .google.protobuf.Duration ttl = 7;
inline bool TexToRequest::_internal_has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ttl_ != nullptr);
  return value;
}
inline bool TexToRequest::has_ttl() const {
  return _internal_has_ttl();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TexToRequest::_internal_ttl() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.ttl_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TexToRequest::ttl() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TexToRequest.ttl)
  return _internal_ttl();
}
inline void TexToRequest::unsafe_arena_set_allocated_ttl(
    ::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  _impl_.ttl_ = ttl;
  if (ttl) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:palm.lily.v1.TexToRequest.ttl)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TexToRequest::release_ttl() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TexToRequest::unsafe_arena_release_ttl() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.TexToRequest.ttl)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.ttl_;
  _impl_.ttl_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TexToRequest::_internal_mutable_ttl() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.ttl_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.ttl_ = p;
  }
  return _impl_.ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TexToRequest::mutable_ttl() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_ttl();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TexToRequest.ttl)
  return _msg;
}
inline void TexToRequest::set_allocated_ttl(::PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ttl_);
  }
  if (ttl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ttl));
    if (message_arena != submessage_arena) {
      ttl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ttl, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ttl_ = ttl;
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.TexToRequest.ttl)
}

// optional string owner = 8;
inline bool TexToRequest::_internal_has_owner() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TexToRequest::has_owner() const {
  return _internal_has_owner();
}
inline void TexToRequest::clear_owner() {
  _impl_.owner_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TexToRequest::owner() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TexToRequest.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TexToRequest::set_owner(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.owner_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:palm.lily.v1.TexToRequest.owner)
}
inline std::string* TexToRequest::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:palm.lily.v1.TexToRequest.owner)
  return _s;
}
inline const std::string& TexToRequest::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void TexToRequest::_internal_set_owner(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* TexToRequest::_internal_mutable_owner() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.owner_.Mutable(GetArenaForAllocation());
}
inline std::string* TexToRequest::release_owner() {
  // @@protoc_insertion_point(field_release:palm.lily.v1.TexToRequest.owner)
  if (!_internal_has_owner()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.owner_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TexToRequest::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.owner_.SetAllocated(owner, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.owner_.IsDefault()) {
    _impl_.owner_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:palm.lily.v1.TexToRequest.owner)
}

// bool published = 9;
inline void TexToRequest::clear_published() {
  _impl_.published_ = false;
}
inline bool TexToRequest::_internal_published() const {
  return _impl_.published_;
}
inline bool TexToRequest::published() const {
  // @@protoc_insertion_point(field_get:palm.lily.v1.TexToRequest.published)
  return _internal_published();
}
inline void TexToRequest::_internal_set_published(bool value) {
  
  _impl_.published_ = value;
}
inline void TexToRequest::set_published(bool value) {
  _internal_set_published(value);
  // @@protoc_insertion_point(field_set:palm.lily.v1.TexToRequest.published)
}

// -------------------------------------------------------------------

// EpubBuildRequest

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace lily
}  // namespace palm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lily_2eproto
