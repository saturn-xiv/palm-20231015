/**
 * @fileoverview gRPC-Web generated client stub for palm.rbac.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: rbac.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"
import * as rbac_pb from './rbac_pb'; // proto import: "rbac.proto"


export class RbacClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetRolesForUser = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/GetRolesForUser',
    grpcWeb.MethodType.UNARY,
    rbac_pb.UserRequest,
    rbac_pb.RolesResponse,
    (request: rbac_pb.UserRequest) => {
      return request.serializeBinary();
    },
    rbac_pb.RolesResponse.deserializeBinary
  );

  getRolesForUser(
    request: rbac_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rbac_pb.RolesResponse>;

  getRolesForUser(
    request: rbac_pb.UserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rbac_pb.RolesResponse) => void): grpcWeb.ClientReadableStream<rbac_pb.RolesResponse>;

  getRolesForUser(
    request: rbac_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rbac_pb.RolesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/GetRolesForUser',
        request,
        metadata || {},
        this.methodDescriptorGetRolesForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/GetRolesForUser',
    request,
    metadata || {},
    this.methodDescriptorGetRolesForUser);
  }

  methodDescriptorGetImplicitRolesForUser = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/GetImplicitRolesForUser',
    grpcWeb.MethodType.UNARY,
    rbac_pb.UserRequest,
    rbac_pb.RolesResponse,
    (request: rbac_pb.UserRequest) => {
      return request.serializeBinary();
    },
    rbac_pb.RolesResponse.deserializeBinary
  );

  getImplicitRolesForUser(
    request: rbac_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rbac_pb.RolesResponse>;

  getImplicitRolesForUser(
    request: rbac_pb.UserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rbac_pb.RolesResponse) => void): grpcWeb.ClientReadableStream<rbac_pb.RolesResponse>;

  getImplicitRolesForUser(
    request: rbac_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rbac_pb.RolesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/GetImplicitRolesForUser',
        request,
        metadata || {},
        this.methodDescriptorGetImplicitRolesForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/GetImplicitRolesForUser',
    request,
    metadata || {},
    this.methodDescriptorGetImplicitRolesForUser);
  }

  methodDescriptorAddRolesForUser = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/AddRolesForUser',
    grpcWeb.MethodType.UNARY,
    rbac_pb.RolesForUserRequest,
    google_protobuf_empty_pb.Empty,
    (request: rbac_pb.RolesForUserRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  addRolesForUser(
    request: rbac_pb.RolesForUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  addRolesForUser(
    request: rbac_pb.RolesForUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  addRolesForUser(
    request: rbac_pb.RolesForUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/AddRolesForUser',
        request,
        metadata || {},
        this.methodDescriptorAddRolesForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/AddRolesForUser',
    request,
    metadata || {},
    this.methodDescriptorAddRolesForUser);
  }

  methodDescriptorDeleteRolesForUser = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/DeleteRolesForUser',
    grpcWeb.MethodType.UNARY,
    rbac_pb.RolesForUserRequest,
    google_protobuf_empty_pb.Empty,
    (request: rbac_pb.RolesForUserRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deleteRolesForUser(
    request: rbac_pb.RolesForUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deleteRolesForUser(
    request: rbac_pb.RolesForUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deleteRolesForUser(
    request: rbac_pb.RolesForUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/DeleteRolesForUser',
        request,
        metadata || {},
        this.methodDescriptorDeleteRolesForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/DeleteRolesForUser',
    request,
    metadata || {},
    this.methodDescriptorDeleteRolesForUser);
  }

  methodDescriptorHasImplicitRoleForUser = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/HasImplicitRoleForUser',
    grpcWeb.MethodType.UNARY,
    rbac_pb.HasRoleForUserRequest,
    google_protobuf_empty_pb.Empty,
    (request: rbac_pb.HasRoleForUserRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  hasImplicitRoleForUser(
    request: rbac_pb.HasRoleForUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  hasImplicitRoleForUser(
    request: rbac_pb.HasRoleForUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  hasImplicitRoleForUser(
    request: rbac_pb.HasRoleForUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/HasImplicitRoleForUser',
        request,
        metadata || {},
        this.methodDescriptorHasImplicitRoleForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/HasImplicitRoleForUser',
    request,
    metadata || {},
    this.methodDescriptorHasImplicitRoleForUser);
  }

  methodDescriptorDeleteUser = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/DeleteUser',
    grpcWeb.MethodType.UNARY,
    rbac_pb.UserRequest,
    google_protobuf_empty_pb.Empty,
    (request: rbac_pb.UserRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deleteUser(
    request: rbac_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deleteUser(
    request: rbac_pb.UserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deleteUser(
    request: rbac_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/DeleteUser',
        request,
        metadata || {},
        this.methodDescriptorDeleteUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/DeleteUser',
    request,
    metadata || {},
    this.methodDescriptorDeleteUser);
  }

  methodDescriptorAddPermissionsForUser = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/AddPermissionsForUser',
    grpcWeb.MethodType.UNARY,
    rbac_pb.PermissionsForUserRequest,
    google_protobuf_empty_pb.Empty,
    (request: rbac_pb.PermissionsForUserRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  addPermissionsForUser(
    request: rbac_pb.PermissionsForUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  addPermissionsForUser(
    request: rbac_pb.PermissionsForUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  addPermissionsForUser(
    request: rbac_pb.PermissionsForUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/AddPermissionsForUser',
        request,
        metadata || {},
        this.methodDescriptorAddPermissionsForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/AddPermissionsForUser',
    request,
    metadata || {},
    this.methodDescriptorAddPermissionsForUser);
  }

  methodDescriptorDeletePermissionsForUser = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/DeletePermissionsForUser',
    grpcWeb.MethodType.UNARY,
    rbac_pb.PermissionsForUserRequest,
    google_protobuf_empty_pb.Empty,
    (request: rbac_pb.PermissionsForUserRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deletePermissionsForUser(
    request: rbac_pb.PermissionsForUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deletePermissionsForUser(
    request: rbac_pb.PermissionsForUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deletePermissionsForUser(
    request: rbac_pb.PermissionsForUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/DeletePermissionsForUser',
        request,
        metadata || {},
        this.methodDescriptorDeletePermissionsForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/DeletePermissionsForUser',
    request,
    metadata || {},
    this.methodDescriptorDeletePermissionsForUser);
  }

  methodDescriptorGetPermissionsForUser = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/GetPermissionsForUser',
    grpcWeb.MethodType.UNARY,
    rbac_pb.UserRequest,
    rbac_pb.PermissionsResponse,
    (request: rbac_pb.UserRequest) => {
      return request.serializeBinary();
    },
    rbac_pb.PermissionsResponse.deserializeBinary
  );

  getPermissionsForUser(
    request: rbac_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rbac_pb.PermissionsResponse>;

  getPermissionsForUser(
    request: rbac_pb.UserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rbac_pb.PermissionsResponse) => void): grpcWeb.ClientReadableStream<rbac_pb.PermissionsResponse>;

  getPermissionsForUser(
    request: rbac_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rbac_pb.PermissionsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/GetPermissionsForUser',
        request,
        metadata || {},
        this.methodDescriptorGetPermissionsForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/GetPermissionsForUser',
    request,
    metadata || {},
    this.methodDescriptorGetPermissionsForUser);
  }

  methodDescriptorGetImplicitPermissionsForUser = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/GetImplicitPermissionsForUser',
    grpcWeb.MethodType.UNARY,
    rbac_pb.UserRequest,
    rbac_pb.PermissionsResponse,
    (request: rbac_pb.UserRequest) => {
      return request.serializeBinary();
    },
    rbac_pb.PermissionsResponse.deserializeBinary
  );

  getImplicitPermissionsForUser(
    request: rbac_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rbac_pb.PermissionsResponse>;

  getImplicitPermissionsForUser(
    request: rbac_pb.UserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rbac_pb.PermissionsResponse) => void): grpcWeb.ClientReadableStream<rbac_pb.PermissionsResponse>;

  getImplicitPermissionsForUser(
    request: rbac_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rbac_pb.PermissionsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/GetImplicitPermissionsForUser',
        request,
        metadata || {},
        this.methodDescriptorGetImplicitPermissionsForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/GetImplicitPermissionsForUser',
    request,
    metadata || {},
    this.methodDescriptorGetImplicitPermissionsForUser);
  }

  methodDescriptorHasImplicitPermissionsForUser = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/HasImplicitPermissionsForUser',
    grpcWeb.MethodType.UNARY,
    rbac_pb.UserRequest,
    rbac_pb.PermissionsResponse,
    (request: rbac_pb.UserRequest) => {
      return request.serializeBinary();
    },
    rbac_pb.PermissionsResponse.deserializeBinary
  );

  hasImplicitPermissionsForUser(
    request: rbac_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rbac_pb.PermissionsResponse>;

  hasImplicitPermissionsForUser(
    request: rbac_pb.UserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rbac_pb.PermissionsResponse) => void): grpcWeb.ClientReadableStream<rbac_pb.PermissionsResponse>;

  hasImplicitPermissionsForUser(
    request: rbac_pb.UserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rbac_pb.PermissionsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/HasImplicitPermissionsForUser',
        request,
        metadata || {},
        this.methodDescriptorHasImplicitPermissionsForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/HasImplicitPermissionsForUser',
    request,
    metadata || {},
    this.methodDescriptorHasImplicitPermissionsForUser);
  }

  methodDescriptorGetUsersForRole = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/GetUsersForRole',
    grpcWeb.MethodType.UNARY,
    rbac_pb.RoleRequest,
    rbac_pb.UsersResponse,
    (request: rbac_pb.RoleRequest) => {
      return request.serializeBinary();
    },
    rbac_pb.UsersResponse.deserializeBinary
  );

  getUsersForRole(
    request: rbac_pb.RoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rbac_pb.UsersResponse>;

  getUsersForRole(
    request: rbac_pb.RoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rbac_pb.UsersResponse) => void): grpcWeb.ClientReadableStream<rbac_pb.UsersResponse>;

  getUsersForRole(
    request: rbac_pb.RoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rbac_pb.UsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/GetUsersForRole',
        request,
        metadata || {},
        this.methodDescriptorGetUsersForRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/GetUsersForRole',
    request,
    metadata || {},
    this.methodDescriptorGetUsersForRole);
  }

  methodDescriptorGetImplicitUsersForRole = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/GetImplicitUsersForRole',
    grpcWeb.MethodType.UNARY,
    rbac_pb.RoleRequest,
    rbac_pb.UsersResponse,
    (request: rbac_pb.RoleRequest) => {
      return request.serializeBinary();
    },
    rbac_pb.UsersResponse.deserializeBinary
  );

  getImplicitUsersForRole(
    request: rbac_pb.RoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rbac_pb.UsersResponse>;

  getImplicitUsersForRole(
    request: rbac_pb.RoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rbac_pb.UsersResponse) => void): grpcWeb.ClientReadableStream<rbac_pb.UsersResponse>;

  getImplicitUsersForRole(
    request: rbac_pb.RoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rbac_pb.UsersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/GetImplicitUsersForRole',
        request,
        metadata || {},
        this.methodDescriptorGetImplicitUsersForRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/GetImplicitUsersForRole',
    request,
    metadata || {},
    this.methodDescriptorGetImplicitUsersForRole);
  }

  methodDescriptorDeleteRole = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/DeleteRole',
    grpcWeb.MethodType.UNARY,
    rbac_pb.RoleRequest,
    google_protobuf_empty_pb.Empty,
    (request: rbac_pb.RoleRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deleteRole(
    request: rbac_pb.RoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deleteRole(
    request: rbac_pb.RoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deleteRole(
    request: rbac_pb.RoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/DeleteRole',
        request,
        metadata || {},
        this.methodDescriptorDeleteRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/DeleteRole',
    request,
    metadata || {},
    this.methodDescriptorDeleteRole);
  }

  methodDescriptorAddPermissionsForRole = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/AddPermissionsForRole',
    grpcWeb.MethodType.UNARY,
    rbac_pb.PermissionsForRoleRequest,
    google_protobuf_empty_pb.Empty,
    (request: rbac_pb.PermissionsForRoleRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  addPermissionsForRole(
    request: rbac_pb.PermissionsForRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  addPermissionsForRole(
    request: rbac_pb.PermissionsForRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  addPermissionsForRole(
    request: rbac_pb.PermissionsForRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/AddPermissionsForRole',
        request,
        metadata || {},
        this.methodDescriptorAddPermissionsForRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/AddPermissionsForRole',
    request,
    metadata || {},
    this.methodDescriptorAddPermissionsForRole);
  }

  methodDescriptorDeletePermissionsForRole = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/DeletePermissionsForRole',
    grpcWeb.MethodType.UNARY,
    rbac_pb.PermissionsForRoleRequest,
    google_protobuf_empty_pb.Empty,
    (request: rbac_pb.PermissionsForRoleRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deletePermissionsForRole(
    request: rbac_pb.PermissionsForRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deletePermissionsForRole(
    request: rbac_pb.PermissionsForRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deletePermissionsForRole(
    request: rbac_pb.PermissionsForRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/DeletePermissionsForRole',
        request,
        metadata || {},
        this.methodDescriptorDeletePermissionsForRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/DeletePermissionsForRole',
    request,
    metadata || {},
    this.methodDescriptorDeletePermissionsForRole);
  }

  methodDescriptorGetPermissionsForRole = new grpcWeb.MethodDescriptor(
    '/palm.rbac.v1.Rbac/GetPermissionsForRole',
    grpcWeb.MethodType.UNARY,
    rbac_pb.RoleRequest,
    rbac_pb.PermissionsResponse,
    (request: rbac_pb.RoleRequest) => {
      return request.serializeBinary();
    },
    rbac_pb.PermissionsResponse.deserializeBinary
  );

  getPermissionsForRole(
    request: rbac_pb.RoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<rbac_pb.PermissionsResponse>;

  getPermissionsForRole(
    request: rbac_pb.RoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: rbac_pb.PermissionsResponse) => void): grpcWeb.ClientReadableStream<rbac_pb.PermissionsResponse>;

  getPermissionsForRole(
    request: rbac_pb.RoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: rbac_pb.PermissionsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.rbac.v1.Rbac/GetPermissionsForRole',
        request,
        metadata || {},
        this.methodDescriptorGetPermissionsForRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.rbac.v1.Rbac/GetPermissionsForRole',
    request,
    metadata || {},
    this.methodDescriptorGetPermissionsForRole);
  }

}

