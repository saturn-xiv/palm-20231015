/**
 * @fileoverview gRPC-Web generated client stub for palm.auth.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: auth.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_duration_pb from 'google-protobuf/google/protobuf/duration_pb'; // proto import: "google/protobuf/duration.proto"
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"
import * as auth_pb from './auth_pb'; // proto import: "auth.proto"
import * as nut_pb from './nut_pb'; // proto import: "nut.proto"
import * as orchid_pb from './orchid_pb'; // proto import: "orchid.proto"


export class UserClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSignIn = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/SignIn',
    grpcWeb.MethodType.UNARY,
    auth_pb.UserSignInRequest,
    auth_pb.UserSignInResponse,
    (request: auth_pb.UserSignInRequest) => {
      return request.serializeBinary();
    },
    auth_pb.UserSignInResponse.deserializeBinary
  );

  signIn(
    request: auth_pb.UserSignInRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.UserSignInResponse>;

  signIn(
    request: auth_pb.UserSignInRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.UserSignInResponse) => void): grpcWeb.ClientReadableStream<auth_pb.UserSignInResponse>;

  signIn(
    request: auth_pb.UserSignInRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.UserSignInResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/SignIn',
        request,
        metadata || {},
        this.methodDescriptorSignIn,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/SignIn',
    request,
    metadata || {},
    this.methodDescriptorSignIn);
  }

  methodDescriptorSignUp = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/SignUp',
    grpcWeb.MethodType.UNARY,
    auth_pb.UserSignUpRequest,
    google_protobuf_empty_pb.Empty,
    (request: auth_pb.UserSignUpRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  signUp(
    request: auth_pb.UserSignUpRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  signUp(
    request: auth_pb.UserSignUpRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  signUp(
    request: auth_pb.UserSignUpRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/SignUp',
        request,
        metadata || {},
        this.methodDescriptorSignUp,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/SignUp',
    request,
    metadata || {},
    this.methodDescriptorSignUp);
  }

  methodDescriptorConfirmByEmail = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/ConfirmByEmail',
    grpcWeb.MethodType.UNARY,
    auth_pb.UserQueryRequest,
    google_protobuf_empty_pb.Empty,
    (request: auth_pb.UserQueryRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  confirmByEmail(
    request: auth_pb.UserQueryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  confirmByEmail(
    request: auth_pb.UserQueryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  confirmByEmail(
    request: auth_pb.UserQueryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/ConfirmByEmail',
        request,
        metadata || {},
        this.methodDescriptorConfirmByEmail,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/ConfirmByEmail',
    request,
    metadata || {},
    this.methodDescriptorConfirmByEmail);
  }

  methodDescriptorConfirmByToken = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/ConfirmByToken',
    grpcWeb.MethodType.UNARY,
    auth_pb.UserTokenRequest,
    google_protobuf_empty_pb.Empty,
    (request: auth_pb.UserTokenRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  confirmByToken(
    request: auth_pb.UserTokenRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  confirmByToken(
    request: auth_pb.UserTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  confirmByToken(
    request: auth_pb.UserTokenRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/ConfirmByToken',
        request,
        metadata || {},
        this.methodDescriptorConfirmByToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/ConfirmByToken',
    request,
    metadata || {},
    this.methodDescriptorConfirmByToken);
  }

  methodDescriptorUnlockByEmail = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/UnlockByEmail',
    grpcWeb.MethodType.UNARY,
    auth_pb.UserQueryRequest,
    google_protobuf_empty_pb.Empty,
    (request: auth_pb.UserQueryRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  unlockByEmail(
    request: auth_pb.UserQueryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  unlockByEmail(
    request: auth_pb.UserQueryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  unlockByEmail(
    request: auth_pb.UserQueryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/UnlockByEmail',
        request,
        metadata || {},
        this.methodDescriptorUnlockByEmail,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/UnlockByEmail',
    request,
    metadata || {},
    this.methodDescriptorUnlockByEmail);
  }

  methodDescriptorUnlockByToken = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/UnlockByToken',
    grpcWeb.MethodType.UNARY,
    auth_pb.UserTokenRequest,
    google_protobuf_empty_pb.Empty,
    (request: auth_pb.UserTokenRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  unlockByToken(
    request: auth_pb.UserTokenRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  unlockByToken(
    request: auth_pb.UserTokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  unlockByToken(
    request: auth_pb.UserTokenRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/UnlockByToken',
        request,
        metadata || {},
        this.methodDescriptorUnlockByToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/UnlockByToken',
    request,
    metadata || {},
    this.methodDescriptorUnlockByToken);
  }

  methodDescriptorForgotPassword = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/ForgotPassword',
    grpcWeb.MethodType.UNARY,
    auth_pb.UserQueryRequest,
    google_protobuf_empty_pb.Empty,
    (request: auth_pb.UserQueryRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  forgotPassword(
    request: auth_pb.UserQueryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  forgotPassword(
    request: auth_pb.UserQueryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  forgotPassword(
    request: auth_pb.UserQueryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/ForgotPassword',
        request,
        metadata || {},
        this.methodDescriptorForgotPassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/ForgotPassword',
    request,
    metadata || {},
    this.methodDescriptorForgotPassword);
  }

  methodDescriptorResetPassword = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/ResetPassword',
    grpcWeb.MethodType.UNARY,
    auth_pb.UserResetPasswordRequest,
    google_protobuf_empty_pb.Empty,
    (request: auth_pb.UserResetPasswordRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  resetPassword(
    request: auth_pb.UserResetPasswordRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  resetPassword(
    request: auth_pb.UserResetPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  resetPassword(
    request: auth_pb.UserResetPasswordRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/ResetPassword',
        request,
        metadata || {},
        this.methodDescriptorResetPassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/ResetPassword',
    request,
    metadata || {},
    this.methodDescriptorResetPassword);
  }

  methodDescriptorRefresh = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/Refresh',
    grpcWeb.MethodType.UNARY,
    google_protobuf_duration_pb.Duration,
    auth_pb.UserSignInResponse,
    (request: google_protobuf_duration_pb.Duration) => {
      return request.serializeBinary();
    },
    auth_pb.UserSignInResponse.deserializeBinary
  );

  refresh(
    request: google_protobuf_duration_pb.Duration,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.UserSignInResponse>;

  refresh(
    request: google_protobuf_duration_pb.Duration,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.UserSignInResponse) => void): grpcWeb.ClientReadableStream<auth_pb.UserSignInResponse>;

  refresh(
    request: google_protobuf_duration_pb.Duration,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.UserSignInResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/Refresh',
        request,
        metadata || {},
        this.methodDescriptorRefresh,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/Refresh',
    request,
    metadata || {},
    this.methodDescriptorRefresh);
  }

  methodDescriptorLogs = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/Logs',
    grpcWeb.MethodType.UNARY,
    nut_pb.Pager,
    auth_pb.UserLogsResponse,
    (request: nut_pb.Pager) => {
      return request.serializeBinary();
    },
    auth_pb.UserLogsResponse.deserializeBinary
  );

  logs(
    request: nut_pb.Pager,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.UserLogsResponse>;

  logs(
    request: nut_pb.Pager,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.UserLogsResponse) => void): grpcWeb.ClientReadableStream<auth_pb.UserLogsResponse>;

  logs(
    request: nut_pb.Pager,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.UserLogsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/Logs',
        request,
        metadata || {},
        this.methodDescriptorLogs,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/Logs',
    request,
    metadata || {},
    this.methodDescriptorLogs);
  }

  methodDescriptorSetProfile = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/SetProfile',
    grpcWeb.MethodType.UNARY,
    auth_pb.UserSetProfileRequest,
    google_protobuf_empty_pb.Empty,
    (request: auth_pb.UserSetProfileRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  setProfile(
    request: auth_pb.UserSetProfileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  setProfile(
    request: auth_pb.UserSetProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  setProfile(
    request: auth_pb.UserSetProfileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/SetProfile',
        request,
        metadata || {},
        this.methodDescriptorSetProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/SetProfile',
    request,
    metadata || {},
    this.methodDescriptorSetProfile);
  }

  methodDescriptorChangePassword = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/ChangePassword',
    grpcWeb.MethodType.UNARY,
    auth_pb.UserChangePasswordRequest,
    google_protobuf_empty_pb.Empty,
    (request: auth_pb.UserChangePasswordRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  changePassword(
    request: auth_pb.UserChangePasswordRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  changePassword(
    request: auth_pb.UserChangePasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  changePassword(
    request: auth_pb.UserChangePasswordRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/ChangePassword',
        request,
        metadata || {},
        this.methodDescriptorChangePassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/ChangePassword',
    request,
    metadata || {},
    this.methodDescriptorChangePassword);
  }

  methodDescriptorSignOut = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/SignOut',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    google_protobuf_empty_pb.Empty,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  signOut(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  signOut(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  signOut(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/SignOut',
        request,
        metadata || {},
        this.methodDescriptorSignOut,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/SignOut',
    request,
    metadata || {},
    this.methodDescriptorSignOut);
  }

  methodDescriptorIndex = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/Index',
    grpcWeb.MethodType.UNARY,
    nut_pb.Pager,
    auth_pb.UserIndexResponse,
    (request: nut_pb.Pager) => {
      return request.serializeBinary();
    },
    auth_pb.UserIndexResponse.deserializeBinary
  );

  index(
    request: nut_pb.Pager,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.UserIndexResponse>;

  index(
    request: nut_pb.Pager,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.UserIndexResponse) => void): grpcWeb.ClientReadableStream<auth_pb.UserIndexResponse>;

  index(
    request: nut_pb.Pager,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.UserIndexResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/Index',
        request,
        metadata || {},
        this.methodDescriptorIndex,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/Index',
    request,
    metadata || {},
    this.methodDescriptorIndex);
  }

  methodDescriptorShow = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/Show',
    grpcWeb.MethodType.UNARY,
    nut_pb.IdRequest,
    auth_pb.UserIndexResponse.Item,
    (request: nut_pb.IdRequest) => {
      return request.serializeBinary();
    },
    auth_pb.UserIndexResponse.Item.deserializeBinary
  );

  show(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.UserIndexResponse.Item>;

  show(
    request: nut_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.UserIndexResponse.Item) => void): grpcWeb.ClientReadableStream<auth_pb.UserIndexResponse.Item>;

  show(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.UserIndexResponse.Item) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/Show',
        request,
        metadata || {},
        this.methodDescriptorShow,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/Show',
    request,
    metadata || {},
    this.methodDescriptorShow);
  }

  methodDescriptorDisable = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/Disable',
    grpcWeb.MethodType.UNARY,
    nut_pb.IdRequest,
    google_protobuf_empty_pb.Empty,
    (request: nut_pb.IdRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  disable(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  disable(
    request: nut_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  disable(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/Disable',
        request,
        metadata || {},
        this.methodDescriptorDisable,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/Disable',
    request,
    metadata || {},
    this.methodDescriptorDisable);
  }

  methodDescriptorEnable = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/Enable',
    grpcWeb.MethodType.UNARY,
    nut_pb.IdRequest,
    google_protobuf_empty_pb.Empty,
    (request: nut_pb.IdRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  enable(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  enable(
    request: nut_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  enable(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/Enable',
        request,
        metadata || {},
        this.methodDescriptorEnable,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/Enable',
    request,
    metadata || {},
    this.methodDescriptorEnable);
  }

  methodDescriptorLock = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/Lock',
    grpcWeb.MethodType.UNARY,
    nut_pb.IdRequest,
    google_protobuf_empty_pb.Empty,
    (request: nut_pb.IdRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  lock(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  lock(
    request: nut_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  lock(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/Lock',
        request,
        metadata || {},
        this.methodDescriptorLock,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/Lock',
    request,
    metadata || {},
    this.methodDescriptorLock);
  }

  methodDescriptorUnlock = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/Unlock',
    grpcWeb.MethodType.UNARY,
    nut_pb.IdRequest,
    google_protobuf_empty_pb.Empty,
    (request: nut_pb.IdRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  unlock(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  unlock(
    request: nut_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  unlock(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/Unlock',
        request,
        metadata || {},
        this.methodDescriptorUnlock,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/Unlock',
    request,
    metadata || {},
    this.methodDescriptorUnlock);
  }

  methodDescriptorConfirm = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/Confirm',
    grpcWeb.MethodType.UNARY,
    nut_pb.IdRequest,
    google_protobuf_empty_pb.Empty,
    (request: nut_pb.IdRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  confirm(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  confirm(
    request: nut_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  confirm(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/Confirm',
        request,
        metadata || {},
        this.methodDescriptorConfirm,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/Confirm',
    request,
    metadata || {},
    this.methodDescriptorConfirm);
  }

  methodDescriptorDelete = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/Delete',
    grpcWeb.MethodType.UNARY,
    nut_pb.IdRequest,
    google_protobuf_empty_pb.Empty,
    (request: nut_pb.IdRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  delete(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  delete(
    request: nut_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  delete(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/Delete',
        request,
        metadata || {},
        this.methodDescriptorDelete,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/Delete',
    request,
    metadata || {},
    this.methodDescriptorDelete);
  }

  methodDescriptorSetPassword = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.User/SetPassword',
    grpcWeb.MethodType.UNARY,
    auth_pb.UserSetPasswordRequest,
    google_protobuf_empty_pb.Empty,
    (request: auth_pb.UserSetPasswordRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  setPassword(
    request: auth_pb.UserSetPasswordRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  setPassword(
    request: auth_pb.UserSetPasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  setPassword(
    request: auth_pb.UserSetPasswordRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.User/SetPassword',
        request,
        metadata || {},
        this.methodDescriptorSetPassword,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.User/SetPassword',
    request,
    metadata || {},
    this.methodDescriptorSetPassword);
  }

}

export class GoogleClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSignInUrl = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Google/SignInUrl',
    grpcWeb.MethodType.UNARY,
    auth_pb.GoogleSignInUrlRequest,
    auth_pb.GoogleSignInUrlResponse,
    (request: auth_pb.GoogleSignInUrlRequest) => {
      return request.serializeBinary();
    },
    auth_pb.GoogleSignInUrlResponse.deserializeBinary
  );

  signInUrl(
    request: auth_pb.GoogleSignInUrlRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.GoogleSignInUrlResponse>;

  signInUrl(
    request: auth_pb.GoogleSignInUrlRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.GoogleSignInUrlResponse) => void): grpcWeb.ClientReadableStream<auth_pb.GoogleSignInUrlResponse>;

  signInUrl(
    request: auth_pb.GoogleSignInUrlRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.GoogleSignInUrlResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Google/SignInUrl',
        request,
        metadata || {},
        this.methodDescriptorSignInUrl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Google/SignInUrl',
    request,
    metadata || {},
    this.methodDescriptorSignInUrl);
  }

  methodDescriptorSignIn = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Google/SignIn',
    grpcWeb.MethodType.UNARY,
    auth_pb.SignInByGoogleRequest,
    auth_pb.UserSignInResponse,
    (request: auth_pb.SignInByGoogleRequest) => {
      return request.serializeBinary();
    },
    auth_pb.UserSignInResponse.deserializeBinary
  );

  signIn(
    request: auth_pb.SignInByGoogleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.UserSignInResponse>;

  signIn(
    request: auth_pb.SignInByGoogleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.UserSignInResponse) => void): grpcWeb.ClientReadableStream<auth_pb.UserSignInResponse>;

  signIn(
    request: auth_pb.SignInByGoogleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.UserSignInResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Google/SignIn',
        request,
        metadata || {},
        this.methodDescriptorSignIn,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Google/SignIn',
    request,
    metadata || {},
    this.methodDescriptorSignIn);
  }

}

export class WechatClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorOauth2SignInState = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/Oauth2SignInState',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    auth_pb.WechatOauth2SignInStateResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    auth_pb.WechatOauth2SignInStateResponse.deserializeBinary
  );

  oauth2SignInState(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.WechatOauth2SignInStateResponse>;

  oauth2SignInState(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.WechatOauth2SignInStateResponse) => void): grpcWeb.ClientReadableStream<auth_pb.WechatOauth2SignInStateResponse>;

  oauth2SignInState(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.WechatOauth2SignInStateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/Oauth2SignInState',
        request,
        metadata || {},
        this.methodDescriptorOauth2SignInState,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/Oauth2SignInState',
    request,
    metadata || {},
    this.methodDescriptorOauth2SignInState);
  }

  methodDescriptorOauth2SignInUrl = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/Oauth2SignInUrl',
    grpcWeb.MethodType.UNARY,
    auth_pb.WechatOauth2SignInUrlRequest,
    orchid_pb.WechatOauth2QrConnectResponse,
    (request: auth_pb.WechatOauth2SignInUrlRequest) => {
      return request.serializeBinary();
    },
    orchid_pb.WechatOauth2QrConnectResponse.deserializeBinary
  );

  oauth2SignInUrl(
    request: auth_pb.WechatOauth2SignInUrlRequest,
    metadata?: grpcWeb.Metadata | null): Promise<orchid_pb.WechatOauth2QrConnectResponse>;

  oauth2SignInUrl(
    request: auth_pb.WechatOauth2SignInUrlRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: orchid_pb.WechatOauth2QrConnectResponse) => void): grpcWeb.ClientReadableStream<orchid_pb.WechatOauth2QrConnectResponse>;

  oauth2SignInUrl(
    request: auth_pb.WechatOauth2SignInUrlRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: orchid_pb.WechatOauth2QrConnectResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/Oauth2SignInUrl',
        request,
        metadata || {},
        this.methodDescriptorOauth2SignInUrl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/Oauth2SignInUrl',
    request,
    metadata || {},
    this.methodDescriptorOauth2SignInUrl);
  }

  methodDescriptorSignInByOauth2 = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/SignInByOauth2',
    grpcWeb.MethodType.UNARY,
    auth_pb.SignInByWechatOauth2Request,
    auth_pb.UserSignInResponse,
    (request: auth_pb.SignInByWechatOauth2Request) => {
      return request.serializeBinary();
    },
    auth_pb.UserSignInResponse.deserializeBinary
  );

  signInByOauth2(
    request: auth_pb.SignInByWechatOauth2Request,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.UserSignInResponse>;

  signInByOauth2(
    request: auth_pb.SignInByWechatOauth2Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.UserSignInResponse) => void): grpcWeb.ClientReadableStream<auth_pb.UserSignInResponse>;

  signInByOauth2(
    request: auth_pb.SignInByWechatOauth2Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.UserSignInResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/SignInByOauth2',
        request,
        metadata || {},
        this.methodDescriptorSignInByOauth2,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/SignInByOauth2',
    request,
    metadata || {},
    this.methodDescriptorSignInByOauth2);
  }

  methodDescriptorAllOauth2User = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/AllOauth2User',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    auth_pb.WechatAllOauth2UserResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    auth_pb.WechatAllOauth2UserResponse.deserializeBinary
  );

  allOauth2User(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.WechatAllOauth2UserResponse>;

  allOauth2User(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllOauth2UserResponse) => void): grpcWeb.ClientReadableStream<auth_pb.WechatAllOauth2UserResponse>;

  allOauth2User(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllOauth2UserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/AllOauth2User',
        request,
        metadata || {},
        this.methodDescriptorAllOauth2User,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/AllOauth2User',
    request,
    metadata || {},
    this.methodDescriptorAllOauth2User);
  }

  methodDescriptorDestroyOauth2User = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/DestroyOauth2User',
    grpcWeb.MethodType.UNARY,
    nut_pb.IdRequest,
    google_protobuf_empty_pb.Empty,
    (request: nut_pb.IdRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  destroyOauth2User(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  destroyOauth2User(
    request: nut_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  destroyOauth2User(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/DestroyOauth2User',
        request,
        metadata || {},
        this.methodDescriptorDestroyOauth2User,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/DestroyOauth2User',
    request,
    metadata || {},
    this.methodDescriptorDestroyOauth2User);
  }

  methodDescriptorBindOauth2UserById = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/BindOauth2UserById',
    grpcWeb.MethodType.UNARY,
    auth_pb.WechatUserBindByIdRequest,
    google_protobuf_empty_pb.Empty,
    (request: auth_pb.WechatUserBindByIdRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  bindOauth2UserById(
    request: auth_pb.WechatUserBindByIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  bindOauth2UserById(
    request: auth_pb.WechatUserBindByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  bindOauth2UserById(
    request: auth_pb.WechatUserBindByIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/BindOauth2UserById',
        request,
        metadata || {},
        this.methodDescriptorBindOauth2UserById,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/BindOauth2UserById',
    request,
    metadata || {},
    this.methodDescriptorBindOauth2UserById);
  }

  methodDescriptorBindOauth2UserByAccount = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/BindOauth2UserByAccount',
    grpcWeb.MethodType.UNARY,
    auth_pb.WechatUserBindByAccountRequest,
    google_protobuf_empty_pb.Empty,
    (request: auth_pb.WechatUserBindByAccountRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  bindOauth2UserByAccount(
    request: auth_pb.WechatUserBindByAccountRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  bindOauth2UserByAccount(
    request: auth_pb.WechatUserBindByAccountRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  bindOauth2UserByAccount(
    request: auth_pb.WechatUserBindByAccountRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/BindOauth2UserByAccount',
        request,
        metadata || {},
        this.methodDescriptorBindOauth2UserByAccount,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/BindOauth2UserByAccount',
    request,
    metadata || {},
    this.methodDescriptorBindOauth2UserByAccount);
  }

  methodDescriptorGetOauth2UserById = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/GetOauth2UserById',
    grpcWeb.MethodType.UNARY,
    nut_pb.IdRequest,
    auth_pb.WechatAllOauth2UserResponse.Item,
    (request: nut_pb.IdRequest) => {
      return request.serializeBinary();
    },
    auth_pb.WechatAllOauth2UserResponse.Item.deserializeBinary
  );

  getOauth2UserById(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.WechatAllOauth2UserResponse.Item>;

  getOauth2UserById(
    request: nut_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllOauth2UserResponse.Item) => void): grpcWeb.ClientReadableStream<auth_pb.WechatAllOauth2UserResponse.Item>;

  getOauth2UserById(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllOauth2UserResponse.Item) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/GetOauth2UserById',
        request,
        metadata || {},
        this.methodDescriptorGetOauth2UserById,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/GetOauth2UserById',
    request,
    metadata || {},
    this.methodDescriptorGetOauth2UserById);
  }

  methodDescriptorGetOauth2UserByOpenId = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/GetOauth2UserByOpenId',
    grpcWeb.MethodType.UNARY,
    auth_pb.WechatUserQueryByOpenIdRequest,
    auth_pb.WechatAllOauth2UserResponse.Item,
    (request: auth_pb.WechatUserQueryByOpenIdRequest) => {
      return request.serializeBinary();
    },
    auth_pb.WechatAllOauth2UserResponse.Item.deserializeBinary
  );

  getOauth2UserByOpenId(
    request: auth_pb.WechatUserQueryByOpenIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.WechatAllOauth2UserResponse.Item>;

  getOauth2UserByOpenId(
    request: auth_pb.WechatUserQueryByOpenIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllOauth2UserResponse.Item) => void): grpcWeb.ClientReadableStream<auth_pb.WechatAllOauth2UserResponse.Item>;

  getOauth2UserByOpenId(
    request: auth_pb.WechatUserQueryByOpenIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllOauth2UserResponse.Item) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/GetOauth2UserByOpenId',
        request,
        metadata || {},
        this.methodDescriptorGetOauth2UserByOpenId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/GetOauth2UserByOpenId',
    request,
    metadata || {},
    this.methodDescriptorGetOauth2UserByOpenId);
  }

  methodDescriptorGetOauth2UserByUnionId = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/GetOauth2UserByUnionId',
    grpcWeb.MethodType.UNARY,
    auth_pb.WechatUserQueryByUnionIdRequest,
    auth_pb.WechatAllOauth2UserResponse,
    (request: auth_pb.WechatUserQueryByUnionIdRequest) => {
      return request.serializeBinary();
    },
    auth_pb.WechatAllOauth2UserResponse.deserializeBinary
  );

  getOauth2UserByUnionId(
    request: auth_pb.WechatUserQueryByUnionIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.WechatAllOauth2UserResponse>;

  getOauth2UserByUnionId(
    request: auth_pb.WechatUserQueryByUnionIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllOauth2UserResponse) => void): grpcWeb.ClientReadableStream<auth_pb.WechatAllOauth2UserResponse>;

  getOauth2UserByUnionId(
    request: auth_pb.WechatUserQueryByUnionIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllOauth2UserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/GetOauth2UserByUnionId',
        request,
        metadata || {},
        this.methodDescriptorGetOauth2UserByUnionId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/GetOauth2UserByUnionId',
    request,
    metadata || {},
    this.methodDescriptorGetOauth2UserByUnionId);
  }

  methodDescriptorAllMiniProgramUser = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/AllMiniProgramUser',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    auth_pb.WechatAllMiniProgramUserResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    auth_pb.WechatAllMiniProgramUserResponse.deserializeBinary
  );

  allMiniProgramUser(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.WechatAllMiniProgramUserResponse>;

  allMiniProgramUser(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllMiniProgramUserResponse) => void): grpcWeb.ClientReadableStream<auth_pb.WechatAllMiniProgramUserResponse>;

  allMiniProgramUser(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllMiniProgramUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/AllMiniProgramUser',
        request,
        metadata || {},
        this.methodDescriptorAllMiniProgramUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/AllMiniProgramUser',
    request,
    metadata || {},
    this.methodDescriptorAllMiniProgramUser);
  }

  methodDescriptorDestroyMiniProgramUser = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/DestroyMiniProgramUser',
    grpcWeb.MethodType.UNARY,
    nut_pb.IdRequest,
    google_protobuf_empty_pb.Empty,
    (request: nut_pb.IdRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  destroyMiniProgramUser(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  destroyMiniProgramUser(
    request: nut_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  destroyMiniProgramUser(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/DestroyMiniProgramUser',
        request,
        metadata || {},
        this.methodDescriptorDestroyMiniProgramUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/DestroyMiniProgramUser',
    request,
    metadata || {},
    this.methodDescriptorDestroyMiniProgramUser);
  }

  methodDescriptorBindMiniProgramUserById = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/BindMiniProgramUserById',
    grpcWeb.MethodType.UNARY,
    auth_pb.WechatUserBindByIdRequest,
    google_protobuf_empty_pb.Empty,
    (request: auth_pb.WechatUserBindByIdRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  bindMiniProgramUserById(
    request: auth_pb.WechatUserBindByIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  bindMiniProgramUserById(
    request: auth_pb.WechatUserBindByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  bindMiniProgramUserById(
    request: auth_pb.WechatUserBindByIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/BindMiniProgramUserById',
        request,
        metadata || {},
        this.methodDescriptorBindMiniProgramUserById,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/BindMiniProgramUserById',
    request,
    metadata || {},
    this.methodDescriptorBindMiniProgramUserById);
  }

  methodDescriptorGetMiniProgramUserById = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/GetMiniProgramUserById',
    grpcWeb.MethodType.UNARY,
    nut_pb.IdRequest,
    auth_pb.WechatAllMiniProgramUserResponse.Item,
    (request: nut_pb.IdRequest) => {
      return request.serializeBinary();
    },
    auth_pb.WechatAllMiniProgramUserResponse.Item.deserializeBinary
  );

  getMiniProgramUserById(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.WechatAllMiniProgramUserResponse.Item>;

  getMiniProgramUserById(
    request: nut_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllMiniProgramUserResponse.Item) => void): grpcWeb.ClientReadableStream<auth_pb.WechatAllMiniProgramUserResponse.Item>;

  getMiniProgramUserById(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllMiniProgramUserResponse.Item) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/GetMiniProgramUserById',
        request,
        metadata || {},
        this.methodDescriptorGetMiniProgramUserById,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/GetMiniProgramUserById',
    request,
    metadata || {},
    this.methodDescriptorGetMiniProgramUserById);
  }

  methodDescriptorGetMiniProgramUserByOpenId = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/GetMiniProgramUserByOpenId',
    grpcWeb.MethodType.UNARY,
    auth_pb.WechatUserQueryByOpenIdRequest,
    auth_pb.WechatAllMiniProgramUserResponse.Item,
    (request: auth_pb.WechatUserQueryByOpenIdRequest) => {
      return request.serializeBinary();
    },
    auth_pb.WechatAllMiniProgramUserResponse.Item.deserializeBinary
  );

  getMiniProgramUserByOpenId(
    request: auth_pb.WechatUserQueryByOpenIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.WechatAllMiniProgramUserResponse.Item>;

  getMiniProgramUserByOpenId(
    request: auth_pb.WechatUserQueryByOpenIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllMiniProgramUserResponse.Item) => void): grpcWeb.ClientReadableStream<auth_pb.WechatAllMiniProgramUserResponse.Item>;

  getMiniProgramUserByOpenId(
    request: auth_pb.WechatUserQueryByOpenIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllMiniProgramUserResponse.Item) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/GetMiniProgramUserByOpenId',
        request,
        metadata || {},
        this.methodDescriptorGetMiniProgramUserByOpenId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/GetMiniProgramUserByOpenId',
    request,
    metadata || {},
    this.methodDescriptorGetMiniProgramUserByOpenId);
  }

  methodDescriptorGetMiniProgramUserByUnionId = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Wechat/GetMiniProgramUserByUnionId',
    grpcWeb.MethodType.UNARY,
    auth_pb.WechatUserQueryByUnionIdRequest,
    auth_pb.WechatAllMiniProgramUserResponse,
    (request: auth_pb.WechatUserQueryByUnionIdRequest) => {
      return request.serializeBinary();
    },
    auth_pb.WechatAllMiniProgramUserResponse.deserializeBinary
  );

  getMiniProgramUserByUnionId(
    request: auth_pb.WechatUserQueryByUnionIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.WechatAllMiniProgramUserResponse>;

  getMiniProgramUserByUnionId(
    request: auth_pb.WechatUserQueryByUnionIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllMiniProgramUserResponse) => void): grpcWeb.ClientReadableStream<auth_pb.WechatAllMiniProgramUserResponse>;

  getMiniProgramUserByUnionId(
    request: auth_pb.WechatUserQueryByUnionIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.WechatAllMiniProgramUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Wechat/GetMiniProgramUserByUnionId',
        request,
        metadata || {},
        this.methodDescriptorGetMiniProgramUserByUnionId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Wechat/GetMiniProgramUserByUnionId',
    request,
    metadata || {},
    this.methodDescriptorGetMiniProgramUserByUnionId);
  }

}

export class AttachmentClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorIndex = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Attachment/Index',
    grpcWeb.MethodType.UNARY,
    nut_pb.Pager,
    auth_pb.AttachmentIndexResponse,
    (request: nut_pb.Pager) => {
      return request.serializeBinary();
    },
    auth_pb.AttachmentIndexResponse.deserializeBinary
  );

  index(
    request: nut_pb.Pager,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.AttachmentIndexResponse>;

  index(
    request: nut_pb.Pager,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.AttachmentIndexResponse) => void): grpcWeb.ClientReadableStream<auth_pb.AttachmentIndexResponse>;

  index(
    request: nut_pb.Pager,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.AttachmentIndexResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Attachment/Index',
        request,
        metadata || {},
        this.methodDescriptorIndex,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Attachment/Index',
    request,
    metadata || {},
    this.methodDescriptorIndex);
  }

  methodDescriptorDestroy = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Attachment/Destroy',
    grpcWeb.MethodType.UNARY,
    nut_pb.IdRequest,
    google_protobuf_empty_pb.Empty,
    (request: nut_pb.IdRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  destroy(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  destroy(
    request: nut_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  destroy(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Attachment/Destroy',
        request,
        metadata || {},
        this.methodDescriptorDestroy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Attachment/Destroy',
    request,
    metadata || {},
    this.methodDescriptorDestroy);
  }

  methodDescriptorShow = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Attachment/Show',
    grpcWeb.MethodType.UNARY,
    auth_pb.AttachmentShowRequest,
    auth_pb.AttachmentShowResponse,
    (request: auth_pb.AttachmentShowRequest) => {
      return request.serializeBinary();
    },
    auth_pb.AttachmentShowResponse.deserializeBinary
  );

  show(
    request: auth_pb.AttachmentShowRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.AttachmentShowResponse>;

  show(
    request: auth_pb.AttachmentShowRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.AttachmentShowResponse) => void): grpcWeb.ClientReadableStream<auth_pb.AttachmentShowResponse>;

  show(
    request: auth_pb.AttachmentShowRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.AttachmentShowResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Attachment/Show',
        request,
        metadata || {},
        this.methodDescriptorShow,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Attachment/Show',
    request,
    metadata || {},
    this.methodDescriptorShow);
  }

}

export class LocaleClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreate = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Locale/Create',
    grpcWeb.MethodType.UNARY,
    auth_pb.LocaleCreateRequest,
    google_protobuf_empty_pb.Empty,
    (request: auth_pb.LocaleCreateRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  create(
    request: auth_pb.LocaleCreateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  create(
    request: auth_pb.LocaleCreateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  create(
    request: auth_pb.LocaleCreateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Locale/Create',
        request,
        metadata || {},
        this.methodDescriptorCreate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Locale/Create',
    request,
    metadata || {},
    this.methodDescriptorCreate);
  }

  methodDescriptorUpdate = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Locale/Update',
    grpcWeb.MethodType.UNARY,
    auth_pb.LocaleUpdateRequest,
    google_protobuf_empty_pb.Empty,
    (request: auth_pb.LocaleUpdateRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  update(
    request: auth_pb.LocaleUpdateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  update(
    request: auth_pb.LocaleUpdateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  update(
    request: auth_pb.LocaleUpdateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Locale/Update',
        request,
        metadata || {},
        this.methodDescriptorUpdate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Locale/Update',
    request,
    metadata || {},
    this.methodDescriptorUpdate);
  }

  methodDescriptorByLangAndCode = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Locale/ByLangAndCode',
    grpcWeb.MethodType.UNARY,
    auth_pb.LocaleByLangAndCodeRequest,
    auth_pb.LocaleIndexResponse.Item,
    (request: auth_pb.LocaleByLangAndCodeRequest) => {
      return request.serializeBinary();
    },
    auth_pb.LocaleIndexResponse.Item.deserializeBinary
  );

  byLangAndCode(
    request: auth_pb.LocaleByLangAndCodeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.LocaleIndexResponse.Item>;

  byLangAndCode(
    request: auth_pb.LocaleByLangAndCodeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.LocaleIndexResponse.Item) => void): grpcWeb.ClientReadableStream<auth_pb.LocaleIndexResponse.Item>;

  byLangAndCode(
    request: auth_pb.LocaleByLangAndCodeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.LocaleIndexResponse.Item) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Locale/ByLangAndCode',
        request,
        metadata || {},
        this.methodDescriptorByLangAndCode,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Locale/ByLangAndCode',
    request,
    metadata || {},
    this.methodDescriptorByLangAndCode);
  }

  methodDescriptorById = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Locale/ById',
    grpcWeb.MethodType.UNARY,
    nut_pb.IdRequest,
    auth_pb.LocaleIndexResponse.Item,
    (request: nut_pb.IdRequest) => {
      return request.serializeBinary();
    },
    auth_pb.LocaleIndexResponse.Item.deserializeBinary
  );

  byId(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.LocaleIndexResponse.Item>;

  byId(
    request: nut_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.LocaleIndexResponse.Item) => void): grpcWeb.ClientReadableStream<auth_pb.LocaleIndexResponse.Item>;

  byId(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.LocaleIndexResponse.Item) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Locale/ById',
        request,
        metadata || {},
        this.methodDescriptorById,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Locale/ById',
    request,
    metadata || {},
    this.methodDescriptorById);
  }

  methodDescriptorByLang = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Locale/ByLang',
    grpcWeb.MethodType.UNARY,
    auth_pb.LocaleByLangRequest,
    auth_pb.LocaleListResponse,
    (request: auth_pb.LocaleByLangRequest) => {
      return request.serializeBinary();
    },
    auth_pb.LocaleListResponse.deserializeBinary
  );

  byLang(
    request: auth_pb.LocaleByLangRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.LocaleListResponse>;

  byLang(
    request: auth_pb.LocaleByLangRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.LocaleListResponse) => void): grpcWeb.ClientReadableStream<auth_pb.LocaleListResponse>;

  byLang(
    request: auth_pb.LocaleByLangRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.LocaleListResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Locale/ByLang',
        request,
        metadata || {},
        this.methodDescriptorByLang,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Locale/ByLang',
    request,
    metadata || {},
    this.methodDescriptorByLang);
  }

  methodDescriptorByCode = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Locale/ByCode',
    grpcWeb.MethodType.UNARY,
    auth_pb.LocaleByCodeRequest,
    auth_pb.LocaleListResponse,
    (request: auth_pb.LocaleByCodeRequest) => {
      return request.serializeBinary();
    },
    auth_pb.LocaleListResponse.deserializeBinary
  );

  byCode(
    request: auth_pb.LocaleByCodeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.LocaleListResponse>;

  byCode(
    request: auth_pb.LocaleByCodeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.LocaleListResponse) => void): grpcWeb.ClientReadableStream<auth_pb.LocaleListResponse>;

  byCode(
    request: auth_pb.LocaleByCodeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.LocaleListResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Locale/ByCode',
        request,
        metadata || {},
        this.methodDescriptorByCode,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Locale/ByCode',
    request,
    metadata || {},
    this.methodDescriptorByCode);
  }

  methodDescriptorIndex = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Locale/Index',
    grpcWeb.MethodType.UNARY,
    nut_pb.Pager,
    auth_pb.LocaleIndexResponse,
    (request: nut_pb.Pager) => {
      return request.serializeBinary();
    },
    auth_pb.LocaleIndexResponse.deserializeBinary
  );

  index(
    request: nut_pb.Pager,
    metadata?: grpcWeb.Metadata | null): Promise<auth_pb.LocaleIndexResponse>;

  index(
    request: nut_pb.Pager,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.LocaleIndexResponse) => void): grpcWeb.ClientReadableStream<auth_pb.LocaleIndexResponse>;

  index(
    request: nut_pb.Pager,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.LocaleIndexResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Locale/Index',
        request,
        metadata || {},
        this.methodDescriptorIndex,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Locale/Index',
    request,
    metadata || {},
    this.methodDescriptorIndex);
  }

  methodDescriptorDestroy = new grpcWeb.MethodDescriptor(
    '/palm.auth.v1.Locale/Destroy',
    grpcWeb.MethodType.UNARY,
    nut_pb.IdRequest,
    google_protobuf_empty_pb.Empty,
    (request: nut_pb.IdRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  destroy(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  destroy(
    request: nut_pb.IdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  destroy(
    request: nut_pb.IdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.auth.v1.Locale/Destroy',
        request,
        metadata || {},
        this.methodDescriptorDestroy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.auth.v1.Locale/Destroy',
    request,
    metadata || {},
    this.methodDescriptorDestroy);
  }

}

