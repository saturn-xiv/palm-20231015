/**
 * @fileoverview gRPC-Web generated client stub for palm.casbin.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: casbin.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as casbin_pb from './casbin_pb'; // proto import: "casbin.proto"


export class CasbinClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorNewEnforcer = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/NewEnforcer',
    grpcWeb.MethodType.UNARY,
    casbin_pb.NewEnforcerRequest,
    casbin_pb.NewEnforcerReply,
    (request: casbin_pb.NewEnforcerRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.NewEnforcerReply.deserializeBinary
  );

  newEnforcer(
    request: casbin_pb.NewEnforcerRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.NewEnforcerReply>;

  newEnforcer(
    request: casbin_pb.NewEnforcerRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.NewEnforcerReply) => void): grpcWeb.ClientReadableStream<casbin_pb.NewEnforcerReply>;

  newEnforcer(
    request: casbin_pb.NewEnforcerRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.NewEnforcerReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/NewEnforcer',
        request,
        metadata || {},
        this.methodDescriptorNewEnforcer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/NewEnforcer',
    request,
    metadata || {},
    this.methodDescriptorNewEnforcer);
  }

  methodDescriptorNewAdapter = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/NewAdapter',
    grpcWeb.MethodType.UNARY,
    casbin_pb.NewAdapterRequest,
    casbin_pb.NewAdapterReply,
    (request: casbin_pb.NewAdapterRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.NewAdapterReply.deserializeBinary
  );

  newAdapter(
    request: casbin_pb.NewAdapterRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.NewAdapterReply>;

  newAdapter(
    request: casbin_pb.NewAdapterRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.NewAdapterReply) => void): grpcWeb.ClientReadableStream<casbin_pb.NewAdapterReply>;

  newAdapter(
    request: casbin_pb.NewAdapterRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.NewAdapterReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/NewAdapter',
        request,
        metadata || {},
        this.methodDescriptorNewAdapter,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/NewAdapter',
    request,
    metadata || {},
    this.methodDescriptorNewAdapter);
  }

  methodDescriptorEnforce = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/Enforce',
    grpcWeb.MethodType.UNARY,
    casbin_pb.EnforceRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.EnforceRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  enforce(
    request: casbin_pb.EnforceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  enforce(
    request: casbin_pb.EnforceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  enforce(
    request: casbin_pb.EnforceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/Enforce',
        request,
        metadata || {},
        this.methodDescriptorEnforce,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/Enforce',
    request,
    metadata || {},
    this.methodDescriptorEnforce);
  }

  methodDescriptorLoadPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/LoadPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.EmptyRequest,
    casbin_pb.EmptyReply,
    (request: casbin_pb.EmptyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.EmptyReply.deserializeBinary
  );

  loadPolicy(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.EmptyReply>;

  loadPolicy(
    request: casbin_pb.EmptyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.EmptyReply) => void): grpcWeb.ClientReadableStream<casbin_pb.EmptyReply>;

  loadPolicy(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.EmptyReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/LoadPolicy',
        request,
        metadata || {},
        this.methodDescriptorLoadPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/LoadPolicy',
    request,
    metadata || {},
    this.methodDescriptorLoadPolicy);
  }

  methodDescriptorSavePolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/SavePolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.EmptyRequest,
    casbin_pb.EmptyReply,
    (request: casbin_pb.EmptyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.EmptyReply.deserializeBinary
  );

  savePolicy(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.EmptyReply>;

  savePolicy(
    request: casbin_pb.EmptyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.EmptyReply) => void): grpcWeb.ClientReadableStream<casbin_pb.EmptyReply>;

  savePolicy(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.EmptyReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/SavePolicy',
        request,
        metadata || {},
        this.methodDescriptorSavePolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/SavePolicy',
    request,
    metadata || {},
    this.methodDescriptorSavePolicy);
  }

  methodDescriptorAddPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/AddPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  addPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  addPolicy(
    request: casbin_pb.PolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  addPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/AddPolicy',
        request,
        metadata || {},
        this.methodDescriptorAddPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/AddPolicy',
    request,
    metadata || {},
    this.methodDescriptorAddPolicy);
  }

  methodDescriptorAddNamedPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/AddNamedPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  addNamedPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  addNamedPolicy(
    request: casbin_pb.PolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  addNamedPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/AddNamedPolicy',
        request,
        metadata || {},
        this.methodDescriptorAddNamedPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/AddNamedPolicy',
    request,
    metadata || {},
    this.methodDescriptorAddNamedPolicy);
  }

  methodDescriptorRemovePolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/RemovePolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  removePolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  removePolicy(
    request: casbin_pb.PolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  removePolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/RemovePolicy',
        request,
        metadata || {},
        this.methodDescriptorRemovePolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/RemovePolicy',
    request,
    metadata || {},
    this.methodDescriptorRemovePolicy);
  }

  methodDescriptorRemoveNamedPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/RemoveNamedPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  removeNamedPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  removeNamedPolicy(
    request: casbin_pb.PolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  removeNamedPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/RemoveNamedPolicy',
        request,
        metadata || {},
        this.methodDescriptorRemoveNamedPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/RemoveNamedPolicy',
    request,
    metadata || {},
    this.methodDescriptorRemoveNamedPolicy);
  }

  methodDescriptorRemoveFilteredPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/RemoveFilteredPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.FilteredPolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.FilteredPolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  removeFilteredPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  removeFilteredPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  removeFilteredPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/RemoveFilteredPolicy',
        request,
        metadata || {},
        this.methodDescriptorRemoveFilteredPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/RemoveFilteredPolicy',
    request,
    metadata || {},
    this.methodDescriptorRemoveFilteredPolicy);
  }

  methodDescriptorRemoveFilteredNamedPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/RemoveFilteredNamedPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.FilteredPolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.FilteredPolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  removeFilteredNamedPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  removeFilteredNamedPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  removeFilteredNamedPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/RemoveFilteredNamedPolicy',
        request,
        metadata || {},
        this.methodDescriptorRemoveFilteredNamedPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/RemoveFilteredNamedPolicy',
    request,
    metadata || {},
    this.methodDescriptorRemoveFilteredNamedPolicy);
  }

  methodDescriptorGetPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.EmptyRequest,
    casbin_pb.Array2DReply,
    (request: casbin_pb.EmptyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.Array2DReply.deserializeBinary
  );

  getPolicy(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.Array2DReply>;

  getPolicy(
    request: casbin_pb.EmptyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void): grpcWeb.ClientReadableStream<casbin_pb.Array2DReply>;

  getPolicy(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetPolicy',
        request,
        metadata || {},
        this.methodDescriptorGetPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetPolicy',
    request,
    metadata || {},
    this.methodDescriptorGetPolicy);
  }

  methodDescriptorGetNamedPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetNamedPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PolicyRequest,
    casbin_pb.Array2DReply,
    (request: casbin_pb.PolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.Array2DReply.deserializeBinary
  );

  getNamedPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.Array2DReply>;

  getNamedPolicy(
    request: casbin_pb.PolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void): grpcWeb.ClientReadableStream<casbin_pb.Array2DReply>;

  getNamedPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetNamedPolicy',
        request,
        metadata || {},
        this.methodDescriptorGetNamedPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetNamedPolicy',
    request,
    metadata || {},
    this.methodDescriptorGetNamedPolicy);
  }

  methodDescriptorGetFilteredPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetFilteredPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.FilteredPolicyRequest,
    casbin_pb.Array2DReply,
    (request: casbin_pb.FilteredPolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.Array2DReply.deserializeBinary
  );

  getFilteredPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.Array2DReply>;

  getFilteredPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void): grpcWeb.ClientReadableStream<casbin_pb.Array2DReply>;

  getFilteredPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetFilteredPolicy',
        request,
        metadata || {},
        this.methodDescriptorGetFilteredPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetFilteredPolicy',
    request,
    metadata || {},
    this.methodDescriptorGetFilteredPolicy);
  }

  methodDescriptorGetFilteredNamedPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetFilteredNamedPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.FilteredPolicyRequest,
    casbin_pb.Array2DReply,
    (request: casbin_pb.FilteredPolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.Array2DReply.deserializeBinary
  );

  getFilteredNamedPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.Array2DReply>;

  getFilteredNamedPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void): grpcWeb.ClientReadableStream<casbin_pb.Array2DReply>;

  getFilteredNamedPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetFilteredNamedPolicy',
        request,
        metadata || {},
        this.methodDescriptorGetFilteredNamedPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetFilteredNamedPolicy',
    request,
    metadata || {},
    this.methodDescriptorGetFilteredNamedPolicy);
  }

  methodDescriptorAddGroupingPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/AddGroupingPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  addGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  addGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  addGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/AddGroupingPolicy',
        request,
        metadata || {},
        this.methodDescriptorAddGroupingPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/AddGroupingPolicy',
    request,
    metadata || {},
    this.methodDescriptorAddGroupingPolicy);
  }

  methodDescriptorAddNamedGroupingPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/AddNamedGroupingPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  addNamedGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  addNamedGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  addNamedGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/AddNamedGroupingPolicy',
        request,
        metadata || {},
        this.methodDescriptorAddNamedGroupingPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/AddNamedGroupingPolicy',
    request,
    metadata || {},
    this.methodDescriptorAddNamedGroupingPolicy);
  }

  methodDescriptorRemoveGroupingPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/RemoveGroupingPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  removeGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  removeGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  removeGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/RemoveGroupingPolicy',
        request,
        metadata || {},
        this.methodDescriptorRemoveGroupingPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/RemoveGroupingPolicy',
    request,
    metadata || {},
    this.methodDescriptorRemoveGroupingPolicy);
  }

  methodDescriptorRemoveNamedGroupingPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/RemoveNamedGroupingPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  removeNamedGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  removeNamedGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  removeNamedGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/RemoveNamedGroupingPolicy',
        request,
        metadata || {},
        this.methodDescriptorRemoveNamedGroupingPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/RemoveNamedGroupingPolicy',
    request,
    metadata || {},
    this.methodDescriptorRemoveNamedGroupingPolicy);
  }

  methodDescriptorRemoveFilteredGroupingPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/RemoveFilteredGroupingPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.FilteredPolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.FilteredPolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  removeFilteredGroupingPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  removeFilteredGroupingPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  removeFilteredGroupingPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/RemoveFilteredGroupingPolicy',
        request,
        metadata || {},
        this.methodDescriptorRemoveFilteredGroupingPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/RemoveFilteredGroupingPolicy',
    request,
    metadata || {},
    this.methodDescriptorRemoveFilteredGroupingPolicy);
  }

  methodDescriptorRemoveFilteredNamedGroupingPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/RemoveFilteredNamedGroupingPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.FilteredPolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.FilteredPolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  removeFilteredNamedGroupingPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  removeFilteredNamedGroupingPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  removeFilteredNamedGroupingPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/RemoveFilteredNamedGroupingPolicy',
        request,
        metadata || {},
        this.methodDescriptorRemoveFilteredNamedGroupingPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/RemoveFilteredNamedGroupingPolicy',
    request,
    metadata || {},
    this.methodDescriptorRemoveFilteredNamedGroupingPolicy);
  }

  methodDescriptorGetGroupingPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetGroupingPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.EmptyRequest,
    casbin_pb.Array2DReply,
    (request: casbin_pb.EmptyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.Array2DReply.deserializeBinary
  );

  getGroupingPolicy(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.Array2DReply>;

  getGroupingPolicy(
    request: casbin_pb.EmptyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void): grpcWeb.ClientReadableStream<casbin_pb.Array2DReply>;

  getGroupingPolicy(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetGroupingPolicy',
        request,
        metadata || {},
        this.methodDescriptorGetGroupingPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetGroupingPolicy',
    request,
    metadata || {},
    this.methodDescriptorGetGroupingPolicy);
  }

  methodDescriptorGetNamedGroupingPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetNamedGroupingPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PolicyRequest,
    casbin_pb.Array2DReply,
    (request: casbin_pb.PolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.Array2DReply.deserializeBinary
  );

  getNamedGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.Array2DReply>;

  getNamedGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void): grpcWeb.ClientReadableStream<casbin_pb.Array2DReply>;

  getNamedGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetNamedGroupingPolicy',
        request,
        metadata || {},
        this.methodDescriptorGetNamedGroupingPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetNamedGroupingPolicy',
    request,
    metadata || {},
    this.methodDescriptorGetNamedGroupingPolicy);
  }

  methodDescriptorGetFilteredGroupingPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetFilteredGroupingPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.FilteredPolicyRequest,
    casbin_pb.Array2DReply,
    (request: casbin_pb.FilteredPolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.Array2DReply.deserializeBinary
  );

  getFilteredGroupingPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.Array2DReply>;

  getFilteredGroupingPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void): grpcWeb.ClientReadableStream<casbin_pb.Array2DReply>;

  getFilteredGroupingPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetFilteredGroupingPolicy',
        request,
        metadata || {},
        this.methodDescriptorGetFilteredGroupingPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetFilteredGroupingPolicy',
    request,
    metadata || {},
    this.methodDescriptorGetFilteredGroupingPolicy);
  }

  methodDescriptorGetFilteredNamedGroupingPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetFilteredNamedGroupingPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.FilteredPolicyRequest,
    casbin_pb.Array2DReply,
    (request: casbin_pb.FilteredPolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.Array2DReply.deserializeBinary
  );

  getFilteredNamedGroupingPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.Array2DReply>;

  getFilteredNamedGroupingPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void): grpcWeb.ClientReadableStream<casbin_pb.Array2DReply>;

  getFilteredNamedGroupingPolicy(
    request: casbin_pb.FilteredPolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetFilteredNamedGroupingPolicy',
        request,
        metadata || {},
        this.methodDescriptorGetFilteredNamedGroupingPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetFilteredNamedGroupingPolicy',
    request,
    metadata || {},
    this.methodDescriptorGetFilteredNamedGroupingPolicy);
  }

  methodDescriptorGetAllSubjects = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetAllSubjects',
    grpcWeb.MethodType.UNARY,
    casbin_pb.EmptyRequest,
    casbin_pb.ArrayReply,
    (request: casbin_pb.EmptyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.ArrayReply.deserializeBinary
  );

  getAllSubjects(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.ArrayReply>;

  getAllSubjects(
    request: casbin_pb.EmptyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void): grpcWeb.ClientReadableStream<casbin_pb.ArrayReply>;

  getAllSubjects(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetAllSubjects',
        request,
        metadata || {},
        this.methodDescriptorGetAllSubjects,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetAllSubjects',
    request,
    metadata || {},
    this.methodDescriptorGetAllSubjects);
  }

  methodDescriptorGetAllNamedSubjects = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetAllNamedSubjects',
    grpcWeb.MethodType.UNARY,
    casbin_pb.SimpleGetRequest,
    casbin_pb.ArrayReply,
    (request: casbin_pb.SimpleGetRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.ArrayReply.deserializeBinary
  );

  getAllNamedSubjects(
    request: casbin_pb.SimpleGetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.ArrayReply>;

  getAllNamedSubjects(
    request: casbin_pb.SimpleGetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void): grpcWeb.ClientReadableStream<casbin_pb.ArrayReply>;

  getAllNamedSubjects(
    request: casbin_pb.SimpleGetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetAllNamedSubjects',
        request,
        metadata || {},
        this.methodDescriptorGetAllNamedSubjects,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetAllNamedSubjects',
    request,
    metadata || {},
    this.methodDescriptorGetAllNamedSubjects);
  }

  methodDescriptorGetAllObjects = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetAllObjects',
    grpcWeb.MethodType.UNARY,
    casbin_pb.EmptyRequest,
    casbin_pb.ArrayReply,
    (request: casbin_pb.EmptyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.ArrayReply.deserializeBinary
  );

  getAllObjects(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.ArrayReply>;

  getAllObjects(
    request: casbin_pb.EmptyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void): grpcWeb.ClientReadableStream<casbin_pb.ArrayReply>;

  getAllObjects(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetAllObjects',
        request,
        metadata || {},
        this.methodDescriptorGetAllObjects,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetAllObjects',
    request,
    metadata || {},
    this.methodDescriptorGetAllObjects);
  }

  methodDescriptorGetAllNamedObjects = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetAllNamedObjects',
    grpcWeb.MethodType.UNARY,
    casbin_pb.SimpleGetRequest,
    casbin_pb.ArrayReply,
    (request: casbin_pb.SimpleGetRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.ArrayReply.deserializeBinary
  );

  getAllNamedObjects(
    request: casbin_pb.SimpleGetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.ArrayReply>;

  getAllNamedObjects(
    request: casbin_pb.SimpleGetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void): grpcWeb.ClientReadableStream<casbin_pb.ArrayReply>;

  getAllNamedObjects(
    request: casbin_pb.SimpleGetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetAllNamedObjects',
        request,
        metadata || {},
        this.methodDescriptorGetAllNamedObjects,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetAllNamedObjects',
    request,
    metadata || {},
    this.methodDescriptorGetAllNamedObjects);
  }

  methodDescriptorGetAllActions = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetAllActions',
    grpcWeb.MethodType.UNARY,
    casbin_pb.EmptyRequest,
    casbin_pb.ArrayReply,
    (request: casbin_pb.EmptyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.ArrayReply.deserializeBinary
  );

  getAllActions(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.ArrayReply>;

  getAllActions(
    request: casbin_pb.EmptyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void): grpcWeb.ClientReadableStream<casbin_pb.ArrayReply>;

  getAllActions(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetAllActions',
        request,
        metadata || {},
        this.methodDescriptorGetAllActions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetAllActions',
    request,
    metadata || {},
    this.methodDescriptorGetAllActions);
  }

  methodDescriptorGetAllNamedActions = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetAllNamedActions',
    grpcWeb.MethodType.UNARY,
    casbin_pb.SimpleGetRequest,
    casbin_pb.ArrayReply,
    (request: casbin_pb.SimpleGetRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.ArrayReply.deserializeBinary
  );

  getAllNamedActions(
    request: casbin_pb.SimpleGetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.ArrayReply>;

  getAllNamedActions(
    request: casbin_pb.SimpleGetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void): grpcWeb.ClientReadableStream<casbin_pb.ArrayReply>;

  getAllNamedActions(
    request: casbin_pb.SimpleGetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetAllNamedActions',
        request,
        metadata || {},
        this.methodDescriptorGetAllNamedActions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetAllNamedActions',
    request,
    metadata || {},
    this.methodDescriptorGetAllNamedActions);
  }

  methodDescriptorGetAllRoles = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetAllRoles',
    grpcWeb.MethodType.UNARY,
    casbin_pb.EmptyRequest,
    casbin_pb.ArrayReply,
    (request: casbin_pb.EmptyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.ArrayReply.deserializeBinary
  );

  getAllRoles(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.ArrayReply>;

  getAllRoles(
    request: casbin_pb.EmptyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void): grpcWeb.ClientReadableStream<casbin_pb.ArrayReply>;

  getAllRoles(
    request: casbin_pb.EmptyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetAllRoles',
        request,
        metadata || {},
        this.methodDescriptorGetAllRoles,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetAllRoles',
    request,
    metadata || {},
    this.methodDescriptorGetAllRoles);
  }

  methodDescriptorGetAllNamedRoles = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetAllNamedRoles',
    grpcWeb.MethodType.UNARY,
    casbin_pb.SimpleGetRequest,
    casbin_pb.ArrayReply,
    (request: casbin_pb.SimpleGetRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.ArrayReply.deserializeBinary
  );

  getAllNamedRoles(
    request: casbin_pb.SimpleGetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.ArrayReply>;

  getAllNamedRoles(
    request: casbin_pb.SimpleGetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void): grpcWeb.ClientReadableStream<casbin_pb.ArrayReply>;

  getAllNamedRoles(
    request: casbin_pb.SimpleGetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetAllNamedRoles',
        request,
        metadata || {},
        this.methodDescriptorGetAllNamedRoles,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetAllNamedRoles',
    request,
    metadata || {},
    this.methodDescriptorGetAllNamedRoles);
  }

  methodDescriptorHasPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/HasPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  hasPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  hasPolicy(
    request: casbin_pb.PolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  hasPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/HasPolicy',
        request,
        metadata || {},
        this.methodDescriptorHasPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/HasPolicy',
    request,
    metadata || {},
    this.methodDescriptorHasPolicy);
  }

  methodDescriptorHasNamedPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/HasNamedPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  hasNamedPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  hasNamedPolicy(
    request: casbin_pb.PolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  hasNamedPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/HasNamedPolicy',
        request,
        metadata || {},
        this.methodDescriptorHasNamedPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/HasNamedPolicy',
    request,
    metadata || {},
    this.methodDescriptorHasNamedPolicy);
  }

  methodDescriptorHasGroupingPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/HasGroupingPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  hasGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  hasGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  hasGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/HasGroupingPolicy',
        request,
        metadata || {},
        this.methodDescriptorHasGroupingPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/HasGroupingPolicy',
    request,
    metadata || {},
    this.methodDescriptorHasGroupingPolicy);
  }

  methodDescriptorHasNamedGroupingPolicy = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/HasNamedGroupingPolicy',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PolicyRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PolicyRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  hasNamedGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  hasNamedGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  hasNamedGroupingPolicy(
    request: casbin_pb.PolicyRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/HasNamedGroupingPolicy',
        request,
        metadata || {},
        this.methodDescriptorHasNamedGroupingPolicy,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/HasNamedGroupingPolicy',
    request,
    metadata || {},
    this.methodDescriptorHasNamedGroupingPolicy);
  }

  methodDescriptorGetDomains = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetDomains',
    grpcWeb.MethodType.UNARY,
    casbin_pb.UserRoleRequest,
    casbin_pb.ArrayReply,
    (request: casbin_pb.UserRoleRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.ArrayReply.deserializeBinary
  );

  getDomains(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.ArrayReply>;

  getDomains(
    request: casbin_pb.UserRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void): grpcWeb.ClientReadableStream<casbin_pb.ArrayReply>;

  getDomains(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetDomains',
        request,
        metadata || {},
        this.methodDescriptorGetDomains,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetDomains',
    request,
    metadata || {},
    this.methodDescriptorGetDomains);
  }

  methodDescriptorGetRolesForUser = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetRolesForUser',
    grpcWeb.MethodType.UNARY,
    casbin_pb.UserRoleRequest,
    casbin_pb.ArrayReply,
    (request: casbin_pb.UserRoleRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.ArrayReply.deserializeBinary
  );

  getRolesForUser(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.ArrayReply>;

  getRolesForUser(
    request: casbin_pb.UserRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void): grpcWeb.ClientReadableStream<casbin_pb.ArrayReply>;

  getRolesForUser(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetRolesForUser',
        request,
        metadata || {},
        this.methodDescriptorGetRolesForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetRolesForUser',
    request,
    metadata || {},
    this.methodDescriptorGetRolesForUser);
  }

  methodDescriptorGetImplicitRolesForUser = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetImplicitRolesForUser',
    grpcWeb.MethodType.UNARY,
    casbin_pb.UserRoleRequest,
    casbin_pb.ArrayReply,
    (request: casbin_pb.UserRoleRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.ArrayReply.deserializeBinary
  );

  getImplicitRolesForUser(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.ArrayReply>;

  getImplicitRolesForUser(
    request: casbin_pb.UserRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void): grpcWeb.ClientReadableStream<casbin_pb.ArrayReply>;

  getImplicitRolesForUser(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetImplicitRolesForUser',
        request,
        metadata || {},
        this.methodDescriptorGetImplicitRolesForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetImplicitRolesForUser',
    request,
    metadata || {},
    this.methodDescriptorGetImplicitRolesForUser);
  }

  methodDescriptorGetUsersForRole = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetUsersForRole',
    grpcWeb.MethodType.UNARY,
    casbin_pb.UserRoleRequest,
    casbin_pb.ArrayReply,
    (request: casbin_pb.UserRoleRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.ArrayReply.deserializeBinary
  );

  getUsersForRole(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.ArrayReply>;

  getUsersForRole(
    request: casbin_pb.UserRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void): grpcWeb.ClientReadableStream<casbin_pb.ArrayReply>;

  getUsersForRole(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.ArrayReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetUsersForRole',
        request,
        metadata || {},
        this.methodDescriptorGetUsersForRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetUsersForRole',
    request,
    metadata || {},
    this.methodDescriptorGetUsersForRole);
  }

  methodDescriptorHasRoleForUser = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/HasRoleForUser',
    grpcWeb.MethodType.UNARY,
    casbin_pb.UserRoleRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.UserRoleRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  hasRoleForUser(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  hasRoleForUser(
    request: casbin_pb.UserRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  hasRoleForUser(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/HasRoleForUser',
        request,
        metadata || {},
        this.methodDescriptorHasRoleForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/HasRoleForUser',
    request,
    metadata || {},
    this.methodDescriptorHasRoleForUser);
  }

  methodDescriptorAddRoleForUser = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/AddRoleForUser',
    grpcWeb.MethodType.UNARY,
    casbin_pb.UserRoleRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.UserRoleRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  addRoleForUser(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  addRoleForUser(
    request: casbin_pb.UserRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  addRoleForUser(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/AddRoleForUser',
        request,
        metadata || {},
        this.methodDescriptorAddRoleForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/AddRoleForUser',
    request,
    metadata || {},
    this.methodDescriptorAddRoleForUser);
  }

  methodDescriptorDeleteRoleForUser = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/DeleteRoleForUser',
    grpcWeb.MethodType.UNARY,
    casbin_pb.UserRoleRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.UserRoleRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  deleteRoleForUser(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  deleteRoleForUser(
    request: casbin_pb.UserRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  deleteRoleForUser(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/DeleteRoleForUser',
        request,
        metadata || {},
        this.methodDescriptorDeleteRoleForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/DeleteRoleForUser',
    request,
    metadata || {},
    this.methodDescriptorDeleteRoleForUser);
  }

  methodDescriptorDeleteRolesForUser = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/DeleteRolesForUser',
    grpcWeb.MethodType.UNARY,
    casbin_pb.UserRoleRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.UserRoleRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  deleteRolesForUser(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  deleteRolesForUser(
    request: casbin_pb.UserRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  deleteRolesForUser(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/DeleteRolesForUser',
        request,
        metadata || {},
        this.methodDescriptorDeleteRolesForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/DeleteRolesForUser',
    request,
    metadata || {},
    this.methodDescriptorDeleteRolesForUser);
  }

  methodDescriptorDeleteUser = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/DeleteUser',
    grpcWeb.MethodType.UNARY,
    casbin_pb.UserRoleRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.UserRoleRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  deleteUser(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  deleteUser(
    request: casbin_pb.UserRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  deleteUser(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/DeleteUser',
        request,
        metadata || {},
        this.methodDescriptorDeleteUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/DeleteUser',
    request,
    metadata || {},
    this.methodDescriptorDeleteUser);
  }

  methodDescriptorDeleteRole = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/DeleteRole',
    grpcWeb.MethodType.UNARY,
    casbin_pb.UserRoleRequest,
    casbin_pb.EmptyReply,
    (request: casbin_pb.UserRoleRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.EmptyReply.deserializeBinary
  );

  deleteRole(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.EmptyReply>;

  deleteRole(
    request: casbin_pb.UserRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.EmptyReply) => void): grpcWeb.ClientReadableStream<casbin_pb.EmptyReply>;

  deleteRole(
    request: casbin_pb.UserRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.EmptyReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/DeleteRole',
        request,
        metadata || {},
        this.methodDescriptorDeleteRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/DeleteRole',
    request,
    metadata || {},
    this.methodDescriptorDeleteRole);
  }

  methodDescriptorGetPermissionsForUser = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetPermissionsForUser',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PermissionRequest,
    casbin_pb.Array2DReply,
    (request: casbin_pb.PermissionRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.Array2DReply.deserializeBinary
  );

  getPermissionsForUser(
    request: casbin_pb.PermissionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.Array2DReply>;

  getPermissionsForUser(
    request: casbin_pb.PermissionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void): grpcWeb.ClientReadableStream<casbin_pb.Array2DReply>;

  getPermissionsForUser(
    request: casbin_pb.PermissionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetPermissionsForUser',
        request,
        metadata || {},
        this.methodDescriptorGetPermissionsForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetPermissionsForUser',
    request,
    metadata || {},
    this.methodDescriptorGetPermissionsForUser);
  }

  methodDescriptorGetImplicitPermissionsForUser = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/GetImplicitPermissionsForUser',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PermissionRequest,
    casbin_pb.Array2DReply,
    (request: casbin_pb.PermissionRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.Array2DReply.deserializeBinary
  );

  getImplicitPermissionsForUser(
    request: casbin_pb.PermissionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.Array2DReply>;

  getImplicitPermissionsForUser(
    request: casbin_pb.PermissionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void): grpcWeb.ClientReadableStream<casbin_pb.Array2DReply>;

  getImplicitPermissionsForUser(
    request: casbin_pb.PermissionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.Array2DReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/GetImplicitPermissionsForUser',
        request,
        metadata || {},
        this.methodDescriptorGetImplicitPermissionsForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/GetImplicitPermissionsForUser',
    request,
    metadata || {},
    this.methodDescriptorGetImplicitPermissionsForUser);
  }

  methodDescriptorDeletePermission = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/DeletePermission',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PermissionRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PermissionRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  deletePermission(
    request: casbin_pb.PermissionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  deletePermission(
    request: casbin_pb.PermissionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  deletePermission(
    request: casbin_pb.PermissionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/DeletePermission',
        request,
        metadata || {},
        this.methodDescriptorDeletePermission,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/DeletePermission',
    request,
    metadata || {},
    this.methodDescriptorDeletePermission);
  }

  methodDescriptorAddPermissionForUser = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/AddPermissionForUser',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PermissionRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PermissionRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  addPermissionForUser(
    request: casbin_pb.PermissionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  addPermissionForUser(
    request: casbin_pb.PermissionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  addPermissionForUser(
    request: casbin_pb.PermissionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/AddPermissionForUser',
        request,
        metadata || {},
        this.methodDescriptorAddPermissionForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/AddPermissionForUser',
    request,
    metadata || {},
    this.methodDescriptorAddPermissionForUser);
  }

  methodDescriptorDeletePermissionForUser = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/DeletePermissionForUser',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PermissionRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PermissionRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  deletePermissionForUser(
    request: casbin_pb.PermissionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  deletePermissionForUser(
    request: casbin_pb.PermissionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  deletePermissionForUser(
    request: casbin_pb.PermissionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/DeletePermissionForUser',
        request,
        metadata || {},
        this.methodDescriptorDeletePermissionForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/DeletePermissionForUser',
    request,
    metadata || {},
    this.methodDescriptorDeletePermissionForUser);
  }

  methodDescriptorDeletePermissionsForUser = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/DeletePermissionsForUser',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PermissionRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PermissionRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  deletePermissionsForUser(
    request: casbin_pb.PermissionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  deletePermissionsForUser(
    request: casbin_pb.PermissionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  deletePermissionsForUser(
    request: casbin_pb.PermissionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/DeletePermissionsForUser',
        request,
        metadata || {},
        this.methodDescriptorDeletePermissionsForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/DeletePermissionsForUser',
    request,
    metadata || {},
    this.methodDescriptorDeletePermissionsForUser);
  }

  methodDescriptorHasPermissionForUser = new grpcWeb.MethodDescriptor(
    '/palm.casbin.v1.Casbin/HasPermissionForUser',
    grpcWeb.MethodType.UNARY,
    casbin_pb.PermissionRequest,
    casbin_pb.BoolReply,
    (request: casbin_pb.PermissionRequest) => {
      return request.serializeBinary();
    },
    casbin_pb.BoolReply.deserializeBinary
  );

  hasPermissionForUser(
    request: casbin_pb.PermissionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<casbin_pb.BoolReply>;

  hasPermissionForUser(
    request: casbin_pb.PermissionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void): grpcWeb.ClientReadableStream<casbin_pb.BoolReply>;

  hasPermissionForUser(
    request: casbin_pb.PermissionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: casbin_pb.BoolReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/palm.casbin.v1.Casbin/HasPermissionForUser',
        request,
        metadata || {},
        this.methodDescriptorHasPermissionForUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/palm.casbin.v1.Casbin/HasPermissionForUser',
    request,
    metadata || {},
    this.methodDescriptorHasPermissionForUser);
  }

}

