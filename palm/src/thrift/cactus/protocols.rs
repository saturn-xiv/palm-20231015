// Autogenerated by Thrift Compiler (0.18.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSerializable, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

#[derive(Copy, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct Action(pub i32);

impl Action {
  pub const WECHAT_PAY_NATIVE_PREPAY: Action = Action(1101);
  pub const WECHAT_PAY_JSAPI_PREPAY: Action = Action(1201);
  pub const WECHAT_PAY_JSAPI_QUERY_ORDER_BY_OUT_TRADE_NO: Action = Action(1202);
  pub const WECHAT_PAY_JSAPI_QUERY_ORDER_BY_ID: Action = Action(1203);
  pub const WECHAT_PAY_JSAPI_CLOSE_ORDER: Action = Action(1204);
  pub const WECHAT_PAY_BILL_TRADE: Action = Action(1301);
  pub const WECHAT_PAY_BILL_FUND_FLOW: Action = Action(1302);
  pub const WECHAT_PAY_REFUND_CREATE: Action = Action(1401);
  pub const WECHAT_PAY_REFUND_QUERY: Action = Action(1402);
  pub const WECHAT_PAY_TRANSFER_CREATE: Action = Action(1501);
  pub const WECHAT_PAY_TRANSFER_QUERY: Action = Action(1502);
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::WECHAT_PAY_NATIVE_PREPAY,
    Self::WECHAT_PAY_JSAPI_PREPAY,
    Self::WECHAT_PAY_JSAPI_QUERY_ORDER_BY_OUT_TRADE_NO,
    Self::WECHAT_PAY_JSAPI_QUERY_ORDER_BY_ID,
    Self::WECHAT_PAY_JSAPI_CLOSE_ORDER,
    Self::WECHAT_PAY_BILL_TRADE,
    Self::WECHAT_PAY_BILL_FUND_FLOW,
    Self::WECHAT_PAY_REFUND_CREATE,
    Self::WECHAT_PAY_REFUND_QUERY,
    Self::WECHAT_PAY_TRANSFER_CREATE,
    Self::WECHAT_PAY_TRANSFER_QUERY,
  ];
}

impl TSerializable for Action {
  #[allow(clippy::trivially_copy_pass_by_ref)]
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    o_prot.write_i32(self.0)
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<Action> {
    let enum_value = i_prot.read_i32()?;
    Ok(Action::from(enum_value))
  }
}

impl From<i32> for Action {
  fn from(i: i32) -> Self {
    match i {
      1101 => Action::WECHAT_PAY_NATIVE_PREPAY,
      1201 => Action::WECHAT_PAY_JSAPI_PREPAY,
      1202 => Action::WECHAT_PAY_JSAPI_QUERY_ORDER_BY_OUT_TRADE_NO,
      1203 => Action::WECHAT_PAY_JSAPI_QUERY_ORDER_BY_ID,
      1204 => Action::WECHAT_PAY_JSAPI_CLOSE_ORDER,
      1301 => Action::WECHAT_PAY_BILL_TRADE,
      1302 => Action::WECHAT_PAY_BILL_FUND_FLOW,
      1401 => Action::WECHAT_PAY_REFUND_CREATE,
      1402 => Action::WECHAT_PAY_REFUND_QUERY,
      1501 => Action::WECHAT_PAY_TRANSFER_CREATE,
      1502 => Action::WECHAT_PAY_TRANSFER_QUERY,
      _ => Action(i)
    }
  }
}

impl From<&i32> for Action {
  fn from(i: &i32) -> Self {
    Action::from(*i)
  }
}

impl From<Action> for i32 {
  fn from(e: Action) -> i32 {
    e.0
  }
}

impl From<&Action> for i32 {
  fn from(e: &Action) -> i32 {
    e.0
  }
}

//
// Rpc service client
//

pub trait TRpcSyncClient {
  fn call(&mut self, action: Action, request: Vec<u8>) -> thrift::Result<Vec<u8>>;
}

pub trait TRpcSyncClientMarker {}

pub struct RpcSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  _i_prot: IP,
  _o_prot: OP,
  _sequence_number: i32,
}

impl <IP, OP> RpcSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  pub fn new(input_protocol: IP, output_protocol: OP) -> RpcSyncClient<IP, OP> {
    RpcSyncClient { _i_prot: input_protocol, _o_prot: output_protocol, _sequence_number: 0 }
  }
}

impl <IP, OP> TThriftClient for RpcSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  fn i_prot_mut(&mut self) -> &mut dyn TInputProtocol { &mut self._i_prot }
  fn o_prot_mut(&mut self) -> &mut dyn TOutputProtocol { &mut self._o_prot }
  fn sequence_number(&self) -> i32 { self._sequence_number }
  fn increment_sequence_number(&mut self) -> i32 { self._sequence_number += 1; self._sequence_number }
}

impl <IP, OP> TRpcSyncClientMarker for RpcSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {}

impl <C: TThriftClient + TRpcSyncClientMarker> TRpcSyncClient for C {
  fn call(&mut self, action: Action, request: Vec<u8>) -> thrift::Result<Vec<u8>> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("call", TMessageType::Call, self.sequence_number());
        let call_args = RpcCallArgs { action, request };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("call", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = RpcCallResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
}

//
// Rpc service processor
//

pub trait RpcSyncHandler {
  fn handle_call(&self, action: Action, request: Vec<u8>) -> thrift::Result<Vec<u8>>;
}

pub struct RpcSyncProcessor<H: RpcSyncHandler> {
  handler: H,
}

impl <H: RpcSyncHandler> RpcSyncProcessor<H> {
  pub fn new(handler: H) -> RpcSyncProcessor<H> {
    RpcSyncProcessor {
      handler,
    }
  }
  fn process_call(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TRpcProcessFunctions::process_call(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
}

pub struct TRpcProcessFunctions;

impl TRpcProcessFunctions {
  pub fn process_call<H: RpcSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = RpcCallArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_call(args.action, args.request) {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("call", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = RpcCallResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("call", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("call", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
}

impl <H: RpcSyncHandler> TProcessor for RpcSyncProcessor<H> {
  fn process(&self, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let message_ident = i_prot.read_message_begin()?;
    let res = match &*message_ident.name {
      "call" => {
        self.process_call(message_ident.sequence_number, i_prot, o_prot)
      },
      method => {
        Err(
          thrift::Error::Application(
            ApplicationError::new(
              ApplicationErrorKind::UnknownMethod,
              format!("unknown method {}", method)
            )
          )
        )
      },
    };
    thrift::server::handle_process_result(&message_ident, res, o_prot)
  }
}

//
// RpcCallArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct RpcCallArgs {
  action: Action,
  request: Vec<u8>,
}

impl RpcCallArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<RpcCallArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<Action> = None;
    let mut f_2: Option<Vec<u8>> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = Action::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_bytes()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("RpcCallArgs.action", &f_1)?;
    verify_required_field_exists("RpcCallArgs.request", &f_2)?;
    let ret = RpcCallArgs {
      action: f_1.expect("auto-generated code should have checked for presence of required fields"),
      request: f_2.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("call_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("action", TType::I32, 1))?;
    self.action.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("request", TType::String, 2))?;
    o_prot.write_bytes(&self.request)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// RpcCallResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct RpcCallResult {
  result_value: Option<Vec<u8>>,
}

impl RpcCallResult {
  fn ok_or(self) -> thrift::Result<Vec<u8>> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for RpcCall"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<RpcCallResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<Vec<u8>> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = i_prot.read_bytes()?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = RpcCallResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("RpcCallResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::String, 0))?;
      o_prot.write_bytes(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// Health service client
//

pub trait THealthSyncClient {
  fn check(&mut self) -> thrift::Result<()>;
}

pub trait THealthSyncClientMarker {}

pub struct HealthSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  _i_prot: IP,
  _o_prot: OP,
  _sequence_number: i32,
}

impl <IP, OP> HealthSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  pub fn new(input_protocol: IP, output_protocol: OP) -> HealthSyncClient<IP, OP> {
    HealthSyncClient { _i_prot: input_protocol, _o_prot: output_protocol, _sequence_number: 0 }
  }
}

impl <IP, OP> TThriftClient for HealthSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  fn i_prot_mut(&mut self) -> &mut dyn TInputProtocol { &mut self._i_prot }
  fn o_prot_mut(&mut self) -> &mut dyn TOutputProtocol { &mut self._o_prot }
  fn sequence_number(&self) -> i32 { self._sequence_number }
  fn increment_sequence_number(&mut self) -> i32 { self._sequence_number += 1; self._sequence_number }
}

impl <IP, OP> THealthSyncClientMarker for HealthSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {}

impl <C: TThriftClient + THealthSyncClientMarker> THealthSyncClient for C {
  fn check(&mut self) -> thrift::Result<()> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("check", TMessageType::Call, self.sequence_number());
        let call_args = HealthCheckArgs {  };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("check", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = HealthCheckResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
}

//
// Health service processor
//

pub trait HealthSyncHandler {
  fn handle_check(&self) -> thrift::Result<()>;
}

pub struct HealthSyncProcessor<H: HealthSyncHandler> {
  handler: H,
}

impl <H: HealthSyncHandler> HealthSyncProcessor<H> {
  pub fn new(handler: H) -> HealthSyncProcessor<H> {
    HealthSyncProcessor {
      handler,
    }
  }
  fn process_check(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    THealthProcessFunctions::process_check(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
}

pub struct THealthProcessFunctions;

impl THealthProcessFunctions {
  pub fn process_check<H: HealthSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let _ = HealthCheckArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_check() {
      Ok(_) => {
        let message_ident = TMessageIdentifier::new("check", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = HealthCheckResult {  };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("check", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("check", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
}

impl <H: HealthSyncHandler> TProcessor for HealthSyncProcessor<H> {
  fn process(&self, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let message_ident = i_prot.read_message_begin()?;
    let res = match &*message_ident.name {
      "check" => {
        self.process_check(message_ident.sequence_number, i_prot, o_prot)
      },
      method => {
        Err(
          thrift::Error::Application(
            ApplicationError::new(
              ApplicationErrorKind::UnknownMethod,
              format!("unknown method {}", method)
            )
          )
        )
      },
    };
    thrift::server::handle_process_result(&message_ident, res, o_prot)
  }
}

//
// HealthCheckArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HealthCheckArgs {
}

impl HealthCheckArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HealthCheckArgs> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      i_prot.skip(field_ident.field_type)?;
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = HealthCheckArgs {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("check_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// HealthCheckResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HealthCheckResult {
}

impl HealthCheckResult {
  fn ok_or(self) -> thrift::Result<()> {
    Ok(())
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HealthCheckResult> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      i_prot.skip(field_ident.field_type)?;
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = HealthCheckResult {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("HealthCheckResult");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

