// source: ops-router.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.palm.ops.router.v1.Administrator', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Dhcpd', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Dns', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Log', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Log.Level', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Profile', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Profile.In', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Profile.Nat', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Profile.Nat.Destination', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Profile.Nat.Source', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Profile.Out', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Status', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Wan', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Wan.Dhcp', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Wan.IpCase', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Wan.Static', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Administrator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Administrator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Administrator.displayName = 'proto.palm.ops.router.v1.Administrator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Log = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Log, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Log.displayName = 'proto.palm.ops.router.v1.Log';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Wan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.palm.ops.router.v1.Wan.oneofGroups_);
};
goog.inherits(proto.palm.ops.router.v1.Wan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Wan.displayName = 'proto.palm.ops.router.v1.Wan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Wan.Static = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Wan.Static, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Wan.Static.displayName = 'proto.palm.ops.router.v1.Wan.Static';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Wan.Dhcp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Wan.Dhcp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Wan.Dhcp.displayName = 'proto.palm.ops.router.v1.Wan.Dhcp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Dhcpd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Dhcpd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Dhcpd.displayName = 'proto.palm.ops.router.v1.Dhcpd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Dns = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.palm.ops.router.v1.Dns.repeatedFields_, null);
};
goog.inherits(proto.palm.ops.router.v1.Dns, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Dns.displayName = 'proto.palm.ops.router.v1.Dns';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Profile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.palm.ops.router.v1.Profile.repeatedFields_, null);
};
goog.inherits(proto.palm.ops.router.v1.Profile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Profile.displayName = 'proto.palm.ops.router.v1.Profile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Profile.Nat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Profile.Nat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Profile.Nat.displayName = 'proto.palm.ops.router.v1.Profile.Nat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Profile.Nat.Source = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Profile.Nat.Source, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Profile.Nat.Source.displayName = 'proto.palm.ops.router.v1.Profile.Nat.Source';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Profile.Nat.Destination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Profile.Nat.Destination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Profile.Nat.Destination.displayName = 'proto.palm.ops.router.v1.Profile.Nat.Destination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Profile.In = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Profile.In, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Profile.In.displayName = 'proto.palm.ops.router.v1.Profile.In';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Profile.Out = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Profile.Out, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Profile.Out.displayName = 'proto.palm.ops.router.v1.Profile.Out';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.palm.ops.router.v1.Status.repeatedFields_, null);
};
goog.inherits(proto.palm.ops.router.v1.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Status.displayName = 'proto.palm.ops.router.v1.Status';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Administrator.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Administrator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Administrator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Administrator.toObject = function(includeInstance, msg) {
  var f, obj = {
    nickname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Administrator}
 */
proto.palm.ops.router.v1.Administrator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Administrator;
  return proto.palm.ops.router.v1.Administrator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Administrator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Administrator}
 */
proto.palm.ops.router.v1.Administrator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Administrator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Administrator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Administrator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Administrator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string nickname = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Administrator.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Administrator} returns this
 */
proto.palm.ops.router.v1.Administrator.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.palm.ops.router.v1.Administrator.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Administrator} returns this
 */
proto.palm.ops.router.v1.Administrator.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Log.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Log.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Log} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Log.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Log}
 */
proto.palm.ops.router.v1.Log.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Log;
  return proto.palm.ops.router.v1.Log.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Log} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Log}
 */
proto.palm.ops.router.v1.Log.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {!proto.palm.ops.router.v1.Log.Level} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Log.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Log.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Log} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Log.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.palm.ops.router.v1.Log.Level = {
  DEBUG: 0,
  INFO: 1,
  WARNING: 2,
  ERROR: 3
};

/**
 * optional string ip = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Log.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Log} returns this
 */
proto.palm.ops.router.v1.Log.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Level level = 2;
 * @return {!proto.palm.ops.router.v1.Log.Level}
 */
proto.palm.ops.router.v1.Log.prototype.getLevel = function() {
  return /** @type {!proto.palm.ops.router.v1.Log.Level} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.palm.ops.router.v1.Log.Level} value
 * @return {!proto.palm.ops.router.v1.Log} returns this
 */
proto.palm.ops.router.v1.Log.prototype.setLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.palm.ops.router.v1.Log.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Log} returns this
 */
proto.palm.ops.router.v1.Log.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.palm.ops.router.v1.Log.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.palm.ops.router.v1.Log} returns this
*/
proto.palm.ops.router.v1.Log.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Log} returns this
 */
proto.palm.ops.router.v1.Log.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Log.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.palm.ops.router.v1.Wan.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.palm.ops.router.v1.Wan.IpCase = {
  IP_NOT_SET: 0,
  DHCP: 1,
  STATIC: 2
};

/**
 * @return {proto.palm.ops.router.v1.Wan.IpCase}
 */
proto.palm.ops.router.v1.Wan.prototype.getIpCase = function() {
  return /** @type {proto.palm.ops.router.v1.Wan.IpCase} */(jspb.Message.computeOneofCase(this, proto.palm.ops.router.v1.Wan.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Wan.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Wan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Wan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Wan.toObject = function(includeInstance, msg) {
  var f, obj = {
    dhcp: (f = msg.getDhcp()) && proto.palm.ops.router.v1.Wan.Dhcp.toObject(includeInstance, f),
    pb_static: (f = msg.getStatic()) && proto.palm.ops.router.v1.Wan.Static.toObject(includeInstance, f),
    routeMetric: jspb.Message.getFieldWithDefault(msg, 9, 0),
    v6: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Wan}
 */
proto.palm.ops.router.v1.Wan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Wan;
  return proto.palm.ops.router.v1.Wan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Wan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Wan}
 */
proto.palm.ops.router.v1.Wan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.palm.ops.router.v1.Wan.Dhcp;
      reader.readMessage(value,proto.palm.ops.router.v1.Wan.Dhcp.deserializeBinaryFromReader);
      msg.setDhcp(value);
      break;
    case 2:
      var value = new proto.palm.ops.router.v1.Wan.Static;
      reader.readMessage(value,proto.palm.ops.router.v1.Wan.Static.deserializeBinaryFromReader);
      msg.setStatic(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRouteMetric(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setV6(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Wan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Wan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Wan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Wan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDhcp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.palm.ops.router.v1.Wan.Dhcp.serializeBinaryToWriter
    );
  }
  f = message.getStatic();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.palm.ops.router.v1.Wan.Static.serializeBinaryToWriter
    );
  }
  f = message.getRouteMetric();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getV6();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Wan.Static.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Wan.Static.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Wan.Static} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Wan.Static.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subnetPrefixLength: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gateway: jspb.Message.getFieldWithDefault(msg, 3, ""),
    preferredDns: jspb.Message.getFieldWithDefault(msg, 4, ""),
    alternateDns: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Wan.Static}
 */
proto.palm.ops.router.v1.Wan.Static.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Wan.Static;
  return proto.palm.ops.router.v1.Wan.Static.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Wan.Static} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Wan.Static}
 */
proto.palm.ops.router.v1.Wan.Static.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSubnetPrefixLength(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGateway(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreferredDns(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlternateDns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Wan.Static.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Wan.Static.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Wan.Static} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Wan.Static.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubnetPrefixLength();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGateway();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPreferredDns();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string ip_address = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Wan.Static.prototype.getIpAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Wan.Static} returns this
 */
proto.palm.ops.router.v1.Wan.Static.prototype.setIpAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 subnet_prefix_length = 2;
 * @return {number}
 */
proto.palm.ops.router.v1.Wan.Static.prototype.getSubnetPrefixLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.palm.ops.router.v1.Wan.Static} returns this
 */
proto.palm.ops.router.v1.Wan.Static.prototype.setSubnetPrefixLength = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string gateway = 3;
 * @return {string}
 */
proto.palm.ops.router.v1.Wan.Static.prototype.getGateway = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Wan.Static} returns this
 */
proto.palm.ops.router.v1.Wan.Static.prototype.setGateway = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string preferred_dns = 4;
 * @return {string}
 */
proto.palm.ops.router.v1.Wan.Static.prototype.getPreferredDns = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Wan.Static} returns this
 */
proto.palm.ops.router.v1.Wan.Static.prototype.setPreferredDns = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string alternate_dns = 5;
 * @return {string}
 */
proto.palm.ops.router.v1.Wan.Static.prototype.getAlternateDns = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Wan.Static} returns this
 */
proto.palm.ops.router.v1.Wan.Static.prototype.setAlternateDns = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.palm.ops.router.v1.Wan.Static} returns this
 */
proto.palm.ops.router.v1.Wan.Static.prototype.clearAlternateDns = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Wan.Static.prototype.hasAlternateDns = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Wan.Dhcp.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Wan.Dhcp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Wan.Dhcp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Wan.Dhcp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Wan.Dhcp}
 */
proto.palm.ops.router.v1.Wan.Dhcp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Wan.Dhcp;
  return proto.palm.ops.router.v1.Wan.Dhcp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Wan.Dhcp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Wan.Dhcp}
 */
proto.palm.ops.router.v1.Wan.Dhcp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Wan.Dhcp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Wan.Dhcp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Wan.Dhcp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Wan.Dhcp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional Dhcp dhcp = 1;
 * @return {?proto.palm.ops.router.v1.Wan.Dhcp}
 */
proto.palm.ops.router.v1.Wan.prototype.getDhcp = function() {
  return /** @type{?proto.palm.ops.router.v1.Wan.Dhcp} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.Wan.Dhcp, 1));
};


/**
 * @param {?proto.palm.ops.router.v1.Wan.Dhcp|undefined} value
 * @return {!proto.palm.ops.router.v1.Wan} returns this
*/
proto.palm.ops.router.v1.Wan.prototype.setDhcp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.palm.ops.router.v1.Wan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Wan} returns this
 */
proto.palm.ops.router.v1.Wan.prototype.clearDhcp = function() {
  return this.setDhcp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Wan.prototype.hasDhcp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Static static = 2;
 * @return {?proto.palm.ops.router.v1.Wan.Static}
 */
proto.palm.ops.router.v1.Wan.prototype.getStatic = function() {
  return /** @type{?proto.palm.ops.router.v1.Wan.Static} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.Wan.Static, 2));
};


/**
 * @param {?proto.palm.ops.router.v1.Wan.Static|undefined} value
 * @return {!proto.palm.ops.router.v1.Wan} returns this
*/
proto.palm.ops.router.v1.Wan.prototype.setStatic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.palm.ops.router.v1.Wan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Wan} returns this
 */
proto.palm.ops.router.v1.Wan.prototype.clearStatic = function() {
  return this.setStatic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Wan.prototype.hasStatic = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 route_metric = 9;
 * @return {number}
 */
proto.palm.ops.router.v1.Wan.prototype.getRouteMetric = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.palm.ops.router.v1.Wan} returns this
 */
proto.palm.ops.router.v1.Wan.prototype.setRouteMetric = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bool v6 = 11;
 * @return {boolean}
 */
proto.palm.ops.router.v1.Wan.prototype.getV6 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.palm.ops.router.v1.Wan} returns this
 */
proto.palm.ops.router.v1.Wan.prototype.setV6 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Dhcpd.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Dhcpd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Dhcpd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Dhcpd.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    netmask: jspb.Message.getFieldWithDefault(msg, 3, ""),
    v6: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    startAddr: jspb.Message.getFieldWithDefault(msg, 11, ""),
    endAddr: jspb.Message.getFieldWithDefault(msg, 12, ""),
    hostsMap: (f = msg.getHostsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Dhcpd}
 */
proto.palm.ops.router.v1.Dhcpd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Dhcpd;
  return proto.palm.ops.router.v1.Dhcpd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Dhcpd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Dhcpd}
 */
proto.palm.ops.router.v1.Dhcpd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetmask(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setV6(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartAddr(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndAddr(value);
      break;
    case 19:
      var value = msg.getHostsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Dhcpd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Dhcpd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Dhcpd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Dhcpd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNetmask();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getV6();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getStartAddr();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getEndAddr();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getHostsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(19, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string device = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Dhcpd.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Dhcpd} returns this
 */
proto.palm.ops.router.v1.Dhcpd.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.palm.ops.router.v1.Dhcpd.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Dhcpd} returns this
 */
proto.palm.ops.router.v1.Dhcpd.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string netmask = 3;
 * @return {string}
 */
proto.palm.ops.router.v1.Dhcpd.prototype.getNetmask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Dhcpd} returns this
 */
proto.palm.ops.router.v1.Dhcpd.prototype.setNetmask = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool v6 = 9;
 * @return {boolean}
 */
proto.palm.ops.router.v1.Dhcpd.prototype.getV6 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.palm.ops.router.v1.Dhcpd} returns this
 */
proto.palm.ops.router.v1.Dhcpd.prototype.setV6 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string start_addr = 11;
 * @return {string}
 */
proto.palm.ops.router.v1.Dhcpd.prototype.getStartAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Dhcpd} returns this
 */
proto.palm.ops.router.v1.Dhcpd.prototype.setStartAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string end_addr = 12;
 * @return {string}
 */
proto.palm.ops.router.v1.Dhcpd.prototype.getEndAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Dhcpd} returns this
 */
proto.palm.ops.router.v1.Dhcpd.prototype.setEndAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * map<string, string> hosts = 19;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.palm.ops.router.v1.Dhcpd.prototype.getHostsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 19, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.palm.ops.router.v1.Dhcpd} returns this
 */
proto.palm.ops.router.v1.Dhcpd.prototype.clearHostsMap = function() {
  this.getHostsMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.palm.ops.router.v1.Dns.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Dns.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Dns.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Dns} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Dns.toObject = function(includeInstance, msg) {
  var f, obj = {
    serversList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    sec: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Dns}
 */
proto.palm.ops.router.v1.Dns.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Dns;
  return proto.palm.ops.router.v1.Dns.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Dns} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Dns}
 */
proto.palm.ops.router.v1.Dns.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addServers(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Dns.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Dns.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Dns} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Dns.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getSec();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated string servers = 1;
 * @return {!Array<string>}
 */
proto.palm.ops.router.v1.Dns.prototype.getServersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.palm.ops.router.v1.Dns} returns this
 */
proto.palm.ops.router.v1.Dns.prototype.setServersList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.palm.ops.router.v1.Dns} returns this
 */
proto.palm.ops.router.v1.Dns.prototype.addServers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.palm.ops.router.v1.Dns} returns this
 */
proto.palm.ops.router.v1.Dns.prototype.clearServersList = function() {
  return this.setServersList([]);
};


/**
 * optional bool sec = 2;
 * @return {boolean}
 */
proto.palm.ops.router.v1.Dns.prototype.getSec = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.palm.ops.router.v1.Dns} returns this
 */
proto.palm.ops.router.v1.Dns.prototype.setSec = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.palm.ops.router.v1.Profile.repeatedFields_ = [31,32,33];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Profile.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Profile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Profile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Profile.toObject = function(includeInstance, msg) {
  var f, obj = {
    administrator: (f = msg.getAdministrator()) && proto.palm.ops.router.v1.Administrator.toObject(includeInstance, f),
    wanMap: (f = msg.getWanMap()) ? f.toObject(includeInstance, proto.palm.ops.router.v1.Wan.toObject) : [],
    lan: (f = msg.getLan()) && proto.palm.ops.router.v1.Dhcpd.toObject(includeInstance, f),
    dmz: (f = msg.getDmz()) && proto.palm.ops.router.v1.Dhcpd.toObject(includeInstance, f),
    dns: (f = msg.getDns()) && proto.palm.ops.router.v1.Dns.toObject(includeInstance, f),
    inList: jspb.Message.toObjectList(msg.getInList(),
    proto.palm.ops.router.v1.Profile.In.toObject, includeInstance),
    outList: jspb.Message.toObjectList(msg.getOutList(),
    proto.palm.ops.router.v1.Profile.Out.toObject, includeInstance),
    natList: jspb.Message.toObjectList(msg.getNatList(),
    proto.palm.ops.router.v1.Profile.Nat.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Profile}
 */
proto.palm.ops.router.v1.Profile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Profile;
  return proto.palm.ops.router.v1.Profile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Profile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Profile}
 */
proto.palm.ops.router.v1.Profile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.palm.ops.router.v1.Administrator;
      reader.readMessage(value,proto.palm.ops.router.v1.Administrator.deserializeBinaryFromReader);
      msg.setAdministrator(value);
      break;
    case 11:
      var value = msg.getWanMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.palm.ops.router.v1.Wan.deserializeBinaryFromReader, "", new proto.palm.ops.router.v1.Wan());
         });
      break;
    case 21:
      var value = new proto.palm.ops.router.v1.Dhcpd;
      reader.readMessage(value,proto.palm.ops.router.v1.Dhcpd.deserializeBinaryFromReader);
      msg.setLan(value);
      break;
    case 22:
      var value = new proto.palm.ops.router.v1.Dhcpd;
      reader.readMessage(value,proto.palm.ops.router.v1.Dhcpd.deserializeBinaryFromReader);
      msg.setDmz(value);
      break;
    case 29:
      var value = new proto.palm.ops.router.v1.Dns;
      reader.readMessage(value,proto.palm.ops.router.v1.Dns.deserializeBinaryFromReader);
      msg.setDns(value);
      break;
    case 31:
      var value = new proto.palm.ops.router.v1.Profile.In;
      reader.readMessage(value,proto.palm.ops.router.v1.Profile.In.deserializeBinaryFromReader);
      msg.addIn(value);
      break;
    case 32:
      var value = new proto.palm.ops.router.v1.Profile.Out;
      reader.readMessage(value,proto.palm.ops.router.v1.Profile.Out.deserializeBinaryFromReader);
      msg.addOut(value);
      break;
    case 33:
      var value = new proto.palm.ops.router.v1.Profile.Nat;
      reader.readMessage(value,proto.palm.ops.router.v1.Profile.Nat.deserializeBinaryFromReader);
      msg.addNat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Profile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Profile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Profile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Profile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdministrator();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.palm.ops.router.v1.Administrator.serializeBinaryToWriter
    );
  }
  f = message.getWanMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.palm.ops.router.v1.Wan.serializeBinaryToWriter);
  }
  f = message.getLan();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.palm.ops.router.v1.Dhcpd.serializeBinaryToWriter
    );
  }
  f = message.getDmz();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.palm.ops.router.v1.Dhcpd.serializeBinaryToWriter
    );
  }
  f = message.getDns();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.palm.ops.router.v1.Dns.serializeBinaryToWriter
    );
  }
  f = message.getInList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      31,
      f,
      proto.palm.ops.router.v1.Profile.In.serializeBinaryToWriter
    );
  }
  f = message.getOutList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      32,
      f,
      proto.palm.ops.router.v1.Profile.Out.serializeBinaryToWriter
    );
  }
  f = message.getNatList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      33,
      f,
      proto.palm.ops.router.v1.Profile.Nat.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Profile.Nat.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Profile.Nat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Profile.Nat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Profile.Nat.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && proto.palm.ops.router.v1.Profile.Nat.Source.toObject(includeInstance, f),
    destination: (f = msg.getDestination()) && proto.palm.ops.router.v1.Profile.Nat.Destination.toObject(includeInstance, f),
    tcp: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Profile.Nat}
 */
proto.palm.ops.router.v1.Profile.Nat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Profile.Nat;
  return proto.palm.ops.router.v1.Profile.Nat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Profile.Nat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Profile.Nat}
 */
proto.palm.ops.router.v1.Profile.Nat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.palm.ops.router.v1.Profile.Nat.Source;
      reader.readMessage(value,proto.palm.ops.router.v1.Profile.Nat.Source.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = new proto.palm.ops.router.v1.Profile.Nat.Destination;
      reader.readMessage(value,proto.palm.ops.router.v1.Profile.Nat.Destination.deserializeBinaryFromReader);
      msg.setDestination(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTcp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Profile.Nat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Profile.Nat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Profile.Nat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Profile.Nat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.palm.ops.router.v1.Profile.Nat.Source.serializeBinaryToWriter
    );
  }
  f = message.getDestination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.palm.ops.router.v1.Profile.Nat.Destination.serializeBinaryToWriter
    );
  }
  f = message.getTcp();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Profile.Nat.Source.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Profile.Nat.Source.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Profile.Nat.Source} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Profile.Nat.Source.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Profile.Nat.Source}
 */
proto.palm.ops.router.v1.Profile.Nat.Source.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Profile.Nat.Source;
  return proto.palm.ops.router.v1.Profile.Nat.Source.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Profile.Nat.Source} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Profile.Nat.Source}
 */
proto.palm.ops.router.v1.Profile.Nat.Source.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Profile.Nat.Source.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Profile.Nat.Source.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Profile.Nat.Source} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Profile.Nat.Source.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string device = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Profile.Nat.Source.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Profile.Nat.Source} returns this
 */
proto.palm.ops.router.v1.Profile.Nat.Source.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.palm.ops.router.v1.Profile.Nat.Source.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Profile.Nat.Source} returns this
 */
proto.palm.ops.router.v1.Profile.Nat.Source.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 port = 3;
 * @return {number}
 */
proto.palm.ops.router.v1.Profile.Nat.Source.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.palm.ops.router.v1.Profile.Nat.Source} returns this
 */
proto.palm.ops.router.v1.Profile.Nat.Source.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Profile.Nat.Destination.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Profile.Nat.Destination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Profile.Nat.Destination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Profile.Nat.Destination.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Profile.Nat.Destination}
 */
proto.palm.ops.router.v1.Profile.Nat.Destination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Profile.Nat.Destination;
  return proto.palm.ops.router.v1.Profile.Nat.Destination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Profile.Nat.Destination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Profile.Nat.Destination}
 */
proto.palm.ops.router.v1.Profile.Nat.Destination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Profile.Nat.Destination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Profile.Nat.Destination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Profile.Nat.Destination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Profile.Nat.Destination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string device = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Profile.Nat.Destination.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Profile.Nat.Destination} returns this
 */
proto.palm.ops.router.v1.Profile.Nat.Destination.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.palm.ops.router.v1.Profile.Nat.Destination.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Profile.Nat.Destination} returns this
 */
proto.palm.ops.router.v1.Profile.Nat.Destination.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 port = 3;
 * @return {number}
 */
proto.palm.ops.router.v1.Profile.Nat.Destination.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.palm.ops.router.v1.Profile.Nat.Destination} returns this
 */
proto.palm.ops.router.v1.Profile.Nat.Destination.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Source source = 1;
 * @return {?proto.palm.ops.router.v1.Profile.Nat.Source}
 */
proto.palm.ops.router.v1.Profile.Nat.prototype.getSource = function() {
  return /** @type{?proto.palm.ops.router.v1.Profile.Nat.Source} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.Profile.Nat.Source, 1));
};


/**
 * @param {?proto.palm.ops.router.v1.Profile.Nat.Source|undefined} value
 * @return {!proto.palm.ops.router.v1.Profile.Nat} returns this
*/
proto.palm.ops.router.v1.Profile.Nat.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Profile.Nat} returns this
 */
proto.palm.ops.router.v1.Profile.Nat.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Profile.Nat.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Destination destination = 2;
 * @return {?proto.palm.ops.router.v1.Profile.Nat.Destination}
 */
proto.palm.ops.router.v1.Profile.Nat.prototype.getDestination = function() {
  return /** @type{?proto.palm.ops.router.v1.Profile.Nat.Destination} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.Profile.Nat.Destination, 2));
};


/**
 * @param {?proto.palm.ops.router.v1.Profile.Nat.Destination|undefined} value
 * @return {!proto.palm.ops.router.v1.Profile.Nat} returns this
*/
proto.palm.ops.router.v1.Profile.Nat.prototype.setDestination = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Profile.Nat} returns this
 */
proto.palm.ops.router.v1.Profile.Nat.prototype.clearDestination = function() {
  return this.setDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Profile.Nat.prototype.hasDestination = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool tcp = 9;
 * @return {boolean}
 */
proto.palm.ops.router.v1.Profile.Nat.prototype.getTcp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.palm.ops.router.v1.Profile.Nat} returns this
 */
proto.palm.ops.router.v1.Profile.Nat.prototype.setTcp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Profile.In.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Profile.In.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Profile.In} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Profile.In.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sourceIp: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tcp: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Profile.In}
 */
proto.palm.ops.router.v1.Profile.In.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Profile.In;
  return proto.palm.ops.router.v1.Profile.In.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Profile.In} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Profile.In}
 */
proto.palm.ops.router.v1.Profile.In.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceIp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTcp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Profile.In.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Profile.In.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Profile.In} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Profile.In.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTcp();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional string device = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Profile.In.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Profile.In} returns this
 */
proto.palm.ops.router.v1.Profile.In.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string source_ip = 2;
 * @return {string}
 */
proto.palm.ops.router.v1.Profile.In.prototype.getSourceIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Profile.In} returns this
 */
proto.palm.ops.router.v1.Profile.In.prototype.setSourceIp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.palm.ops.router.v1.Profile.In} returns this
 */
proto.palm.ops.router.v1.Profile.In.prototype.clearSourceIp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Profile.In.prototype.hasSourceIp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 port = 3;
 * @return {number}
 */
proto.palm.ops.router.v1.Profile.In.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.palm.ops.router.v1.Profile.In} returns this
 */
proto.palm.ops.router.v1.Profile.In.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool tcp = 9;
 * @return {boolean}
 */
proto.palm.ops.router.v1.Profile.In.prototype.getTcp = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.palm.ops.router.v1.Profile.In} returns this
 */
proto.palm.ops.router.v1.Profile.In.prototype.setTcp = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Profile.Out.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Profile.Out.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Profile.Out} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Profile.Out.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Profile.Out}
 */
proto.palm.ops.router.v1.Profile.Out.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Profile.Out;
  return proto.palm.ops.router.v1.Profile.Out.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Profile.Out} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Profile.Out}
 */
proto.palm.ops.router.v1.Profile.Out.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Profile.Out.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Profile.Out.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Profile.Out} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Profile.Out.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * optional Administrator administrator = 1;
 * @return {?proto.palm.ops.router.v1.Administrator}
 */
proto.palm.ops.router.v1.Profile.prototype.getAdministrator = function() {
  return /** @type{?proto.palm.ops.router.v1.Administrator} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.Administrator, 1));
};


/**
 * @param {?proto.palm.ops.router.v1.Administrator|undefined} value
 * @return {!proto.palm.ops.router.v1.Profile} returns this
*/
proto.palm.ops.router.v1.Profile.prototype.setAdministrator = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Profile} returns this
 */
proto.palm.ops.router.v1.Profile.prototype.clearAdministrator = function() {
  return this.setAdministrator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Profile.prototype.hasAdministrator = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<string, Wan> wan = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.palm.ops.router.v1.Wan>}
 */
proto.palm.ops.router.v1.Profile.prototype.getWanMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.palm.ops.router.v1.Wan>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      proto.palm.ops.router.v1.Wan));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.palm.ops.router.v1.Profile} returns this
 */
proto.palm.ops.router.v1.Profile.prototype.clearWanMap = function() {
  this.getWanMap().clear();
  return this;
};


/**
 * optional Dhcpd lan = 21;
 * @return {?proto.palm.ops.router.v1.Dhcpd}
 */
proto.palm.ops.router.v1.Profile.prototype.getLan = function() {
  return /** @type{?proto.palm.ops.router.v1.Dhcpd} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.Dhcpd, 21));
};


/**
 * @param {?proto.palm.ops.router.v1.Dhcpd|undefined} value
 * @return {!proto.palm.ops.router.v1.Profile} returns this
*/
proto.palm.ops.router.v1.Profile.prototype.setLan = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Profile} returns this
 */
proto.palm.ops.router.v1.Profile.prototype.clearLan = function() {
  return this.setLan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Profile.prototype.hasLan = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional Dhcpd dmz = 22;
 * @return {?proto.palm.ops.router.v1.Dhcpd}
 */
proto.palm.ops.router.v1.Profile.prototype.getDmz = function() {
  return /** @type{?proto.palm.ops.router.v1.Dhcpd} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.Dhcpd, 22));
};


/**
 * @param {?proto.palm.ops.router.v1.Dhcpd|undefined} value
 * @return {!proto.palm.ops.router.v1.Profile} returns this
*/
proto.palm.ops.router.v1.Profile.prototype.setDmz = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Profile} returns this
 */
proto.palm.ops.router.v1.Profile.prototype.clearDmz = function() {
  return this.setDmz(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Profile.prototype.hasDmz = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional Dns dns = 29;
 * @return {?proto.palm.ops.router.v1.Dns}
 */
proto.palm.ops.router.v1.Profile.prototype.getDns = function() {
  return /** @type{?proto.palm.ops.router.v1.Dns} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.Dns, 29));
};


/**
 * @param {?proto.palm.ops.router.v1.Dns|undefined} value
 * @return {!proto.palm.ops.router.v1.Profile} returns this
*/
proto.palm.ops.router.v1.Profile.prototype.setDns = function(value) {
  return jspb.Message.setWrapperField(this, 29, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Profile} returns this
 */
proto.palm.ops.router.v1.Profile.prototype.clearDns = function() {
  return this.setDns(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Profile.prototype.hasDns = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * repeated In in = 31;
 * @return {!Array<!proto.palm.ops.router.v1.Profile.In>}
 */
proto.palm.ops.router.v1.Profile.prototype.getInList = function() {
  return /** @type{!Array<!proto.palm.ops.router.v1.Profile.In>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.palm.ops.router.v1.Profile.In, 31));
};


/**
 * @param {!Array<!proto.palm.ops.router.v1.Profile.In>} value
 * @return {!proto.palm.ops.router.v1.Profile} returns this
*/
proto.palm.ops.router.v1.Profile.prototype.setInList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 31, value);
};


/**
 * @param {!proto.palm.ops.router.v1.Profile.In=} opt_value
 * @param {number=} opt_index
 * @return {!proto.palm.ops.router.v1.Profile.In}
 */
proto.palm.ops.router.v1.Profile.prototype.addIn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 31, opt_value, proto.palm.ops.router.v1.Profile.In, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.palm.ops.router.v1.Profile} returns this
 */
proto.palm.ops.router.v1.Profile.prototype.clearInList = function() {
  return this.setInList([]);
};


/**
 * repeated Out out = 32;
 * @return {!Array<!proto.palm.ops.router.v1.Profile.Out>}
 */
proto.palm.ops.router.v1.Profile.prototype.getOutList = function() {
  return /** @type{!Array<!proto.palm.ops.router.v1.Profile.Out>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.palm.ops.router.v1.Profile.Out, 32));
};


/**
 * @param {!Array<!proto.palm.ops.router.v1.Profile.Out>} value
 * @return {!proto.palm.ops.router.v1.Profile} returns this
*/
proto.palm.ops.router.v1.Profile.prototype.setOutList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 32, value);
};


/**
 * @param {!proto.palm.ops.router.v1.Profile.Out=} opt_value
 * @param {number=} opt_index
 * @return {!proto.palm.ops.router.v1.Profile.Out}
 */
proto.palm.ops.router.v1.Profile.prototype.addOut = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 32, opt_value, proto.palm.ops.router.v1.Profile.Out, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.palm.ops.router.v1.Profile} returns this
 */
proto.palm.ops.router.v1.Profile.prototype.clearOutList = function() {
  return this.setOutList([]);
};


/**
 * repeated Nat nat = 33;
 * @return {!Array<!proto.palm.ops.router.v1.Profile.Nat>}
 */
proto.palm.ops.router.v1.Profile.prototype.getNatList = function() {
  return /** @type{!Array<!proto.palm.ops.router.v1.Profile.Nat>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.palm.ops.router.v1.Profile.Nat, 33));
};


/**
 * @param {!Array<!proto.palm.ops.router.v1.Profile.Nat>} value
 * @return {!proto.palm.ops.router.v1.Profile} returns this
*/
proto.palm.ops.router.v1.Profile.prototype.setNatList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 33, value);
};


/**
 * @param {!proto.palm.ops.router.v1.Profile.Nat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.palm.ops.router.v1.Profile.Nat}
 */
proto.palm.ops.router.v1.Profile.prototype.addNat = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 33, opt_value, proto.palm.ops.router.v1.Profile.Nat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.palm.ops.router.v1.Profile} returns this
 */
proto.palm.ops.router.v1.Profile.prototype.clearNatList = function() {
  return this.setNatList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.palm.ops.router.v1.Status.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    profile: (f = msg.getProfile()) && proto.palm.ops.router.v1.Profile.toObject(includeInstance, f),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.palm.ops.router.v1.Log.toObject, includeInstance),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Status}
 */
proto.palm.ops.router.v1.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Status;
  return proto.palm.ops.router.v1.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Status}
 */
proto.palm.ops.router.v1.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.palm.ops.router.v1.Profile;
      reader.readMessage(value,proto.palm.ops.router.v1.Profile.deserializeBinaryFromReader);
      msg.setProfile(value);
      break;
    case 2:
      var value = new proto.palm.ops.router.v1.Log;
      reader.readMessage(value,proto.palm.ops.router.v1.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.palm.ops.router.v1.Profile.serializeBinaryToWriter
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.palm.ops.router.v1.Log.serializeBinaryToWriter
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional Profile profile = 1;
 * @return {?proto.palm.ops.router.v1.Profile}
 */
proto.palm.ops.router.v1.Status.prototype.getProfile = function() {
  return /** @type{?proto.palm.ops.router.v1.Profile} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.Profile, 1));
};


/**
 * @param {?proto.palm.ops.router.v1.Profile|undefined} value
 * @return {!proto.palm.ops.router.v1.Status} returns this
*/
proto.palm.ops.router.v1.Status.prototype.setProfile = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Status} returns this
 */
proto.palm.ops.router.v1.Status.prototype.clearProfile = function() {
  return this.setProfile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Status.prototype.hasProfile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Log logs = 2;
 * @return {!Array<!proto.palm.ops.router.v1.Log>}
 */
proto.palm.ops.router.v1.Status.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.palm.ops.router.v1.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.palm.ops.router.v1.Log, 2));
};


/**
 * @param {!Array<!proto.palm.ops.router.v1.Log>} value
 * @return {!proto.palm.ops.router.v1.Status} returns this
*/
proto.palm.ops.router.v1.Status.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.palm.ops.router.v1.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.palm.ops.router.v1.Log}
 */
proto.palm.ops.router.v1.Status.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.palm.ops.router.v1.Log, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.palm.ops.router.v1.Status} returns this
 */
proto.palm.ops.router.v1.Status.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};


/**
 * optional google.protobuf.Timestamp created_at = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.palm.ops.router.v1.Status.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.palm.ops.router.v1.Status} returns this
*/
proto.palm.ops.router.v1.Status.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Status} returns this
 */
proto.palm.ops.router.v1.Status.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Status.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 9) != null;
};


goog.object.extend(exports, proto.palm.ops.router.v1);
