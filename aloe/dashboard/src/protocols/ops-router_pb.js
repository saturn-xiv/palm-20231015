// source: ops-router.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
goog.exportSymbol('proto.palm.ops.router.v1.Bound', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Contact', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Dhcp', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Host', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Input', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Lan', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Lan.Dhcp', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Nat', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Nat.Lan', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Nat.Wan', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Output', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Output.DestinationCase', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Protocol', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.RouterStatusResponse', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Rule', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.ScanTask', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Static', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.UserLogsResponse', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.UserProfile', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.UserSignInRequest', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.UserSignInResponse', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.UserUpdateRequest', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Wan', null, global);
goog.exportSymbol('proto.palm.ops.router.v1.Wan.IpCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Rule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Rule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Rule.displayName = 'proto.palm.ops.router.v1.Rule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Contact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Contact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Contact.displayName = 'proto.palm.ops.router.v1.Contact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Host = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Host, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Host.displayName = 'proto.palm.ops.router.v1.Host';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Input = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Input, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Input.displayName = 'proto.palm.ops.router.v1.Input';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Output = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.palm.ops.router.v1.Output.oneofGroups_);
};
goog.inherits(proto.palm.ops.router.v1.Output, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Output.displayName = 'proto.palm.ops.router.v1.Output';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Nat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Nat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Nat.displayName = 'proto.palm.ops.router.v1.Nat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Nat.Wan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Nat.Wan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Nat.Wan.displayName = 'proto.palm.ops.router.v1.Nat.Wan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Nat.Lan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Nat.Lan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Nat.Lan.displayName = 'proto.palm.ops.router.v1.Nat.Lan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.RouterStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.palm.ops.router.v1.RouterStatusResponse.repeatedFields_, null);
};
goog.inherits(proto.palm.ops.router.v1.RouterStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.RouterStatusResponse.displayName = 'proto.palm.ops.router.v1.RouterStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.ScanTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.ScanTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.ScanTask.displayName = 'proto.palm.ops.router.v1.ScanTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Dhcp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Dhcp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Dhcp.displayName = 'proto.palm.ops.router.v1.Dhcp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Static = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Static, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Static.displayName = 'proto.palm.ops.router.v1.Static';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Wan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.palm.ops.router.v1.Wan.oneofGroups_);
};
goog.inherits(proto.palm.ops.router.v1.Wan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Wan.displayName = 'proto.palm.ops.router.v1.Wan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Bound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.palm.ops.router.v1.Bound.repeatedFields_, null);
};
goog.inherits(proto.palm.ops.router.v1.Bound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Bound.displayName = 'proto.palm.ops.router.v1.Bound';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Lan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Lan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Lan.displayName = 'proto.palm.ops.router.v1.Lan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.Lan.Dhcp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.Lan.Dhcp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.Lan.Dhcp.displayName = 'proto.palm.ops.router.v1.Lan.Dhcp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.UserProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.UserProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.UserProfile.displayName = 'proto.palm.ops.router.v1.UserProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.UserSignInRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.UserSignInRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.UserSignInRequest.displayName = 'proto.palm.ops.router.v1.UserSignInRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.UserSignInResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.UserSignInResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.UserSignInResponse.displayName = 'proto.palm.ops.router.v1.UserSignInResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.UserUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.palm.ops.router.v1.UserUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.UserUpdateRequest.displayName = 'proto.palm.ops.router.v1.UserUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.palm.ops.router.v1.UserLogsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.palm.ops.router.v1.UserLogsResponse.repeatedFields_, null);
};
goog.inherits(proto.palm.ops.router.v1.UserLogsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.palm.ops.router.v1.UserLogsResponse.displayName = 'proto.palm.ops.router.v1.UserLogsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Rule.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Rule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Rule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Rule.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Rule}
 */
proto.palm.ops.router.v1.Rule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Rule;
  return proto.palm.ops.router.v1.Rule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Rule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Rule}
 */
proto.palm.ops.router.v1.Rule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Rule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Rule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Rule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Rule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Contact.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Contact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Contact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Contact.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Contact}
 */
proto.palm.ops.router.v1.Contact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Contact;
  return proto.palm.ops.router.v1.Contact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Contact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Contact}
 */
proto.palm.ops.router.v1.Contact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Contact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Contact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Contact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Contact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Host.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Host.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Host} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Host.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    mac: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Host}
 */
proto.palm.ops.router.v1.Host.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Host;
  return proto.palm.ops.router.v1.Host.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Host} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Host}
 */
proto.palm.ops.router.v1.Host.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMac(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Host.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Host.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Host} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Host.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMac();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Host.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Host} returns this
 */
proto.palm.ops.router.v1.Host.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.palm.ops.router.v1.Host.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Host} returns this
 */
proto.palm.ops.router.v1.Host.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string mac = 3;
 * @return {string}
 */
proto.palm.ops.router.v1.Host.prototype.getMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Host} returns this
 */
proto.palm.ops.router.v1.Host.prototype.setMac = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Input.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Input.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Input} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Input.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: jspb.Message.getFieldWithDefault(msg, 1, ""),
    protocol: jspb.Message.getFieldWithDefault(msg, 2, 0),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    source: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Input}
 */
proto.palm.ops.router.v1.Input.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Input;
  return proto.palm.ops.router.v1.Input.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Input} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Input}
 */
proto.palm.ops.router.v1.Input.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    case 2:
      var value = /** @type {!proto.palm.ops.router.v1.Protocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Input.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Input.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Input} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Input.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string device = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Input.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Input} returns this
 */
proto.palm.ops.router.v1.Input.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Protocol protocol = 2;
 * @return {!proto.palm.ops.router.v1.Protocol}
 */
proto.palm.ops.router.v1.Input.prototype.getProtocol = function() {
  return /** @type {!proto.palm.ops.router.v1.Protocol} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.palm.ops.router.v1.Protocol} value
 * @return {!proto.palm.ops.router.v1.Input} returns this
 */
proto.palm.ops.router.v1.Input.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 port = 3;
 * @return {number}
 */
proto.palm.ops.router.v1.Input.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.palm.ops.router.v1.Input} returns this
 */
proto.palm.ops.router.v1.Input.prototype.setPort = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.palm.ops.router.v1.Input} returns this
 */
proto.palm.ops.router.v1.Input.prototype.clearPort = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Input.prototype.hasPort = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string source = 4;
 * @return {string}
 */
proto.palm.ops.router.v1.Input.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Input} returns this
 */
proto.palm.ops.router.v1.Input.prototype.setSource = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.palm.ops.router.v1.Input} returns this
 */
proto.palm.ops.router.v1.Input.prototype.clearSource = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Input.prototype.hasSource = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.palm.ops.router.v1.Output.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.palm.ops.router.v1.Output.DestinationCase = {
  DESTINATION_NOT_SET: 0,
  IP: 1,
  DOMAIN: 2
};

/**
 * @return {proto.palm.ops.router.v1.Output.DestinationCase}
 */
proto.palm.ops.router.v1.Output.prototype.getDestinationCase = function() {
  return /** @type {proto.palm.ops.router.v1.Output.DestinationCase} */(jspb.Message.computeOneofCase(this, proto.palm.ops.router.v1.Output.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Output.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Output.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Output} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Output.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    domain: jspb.Message.getFieldWithDefault(msg, 2, ""),
    protocol: jspb.Message.getFieldWithDefault(msg, 11, 0),
    port: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Output}
 */
proto.palm.ops.router.v1.Output.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Output;
  return proto.palm.ops.router.v1.Output.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Output} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Output}
 */
proto.palm.ops.router.v1.Output.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 11:
      var value = /** @type {!proto.palm.ops.router.v1.Protocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Output.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Output.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Output} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Output.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.palm.ops.router.v1.Protocol} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Output.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Output} returns this
 */
proto.palm.ops.router.v1.Output.prototype.setIp = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.palm.ops.router.v1.Output.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.palm.ops.router.v1.Output} returns this
 */
proto.palm.ops.router.v1.Output.prototype.clearIp = function() {
  return jspb.Message.setOneofField(this, 1, proto.palm.ops.router.v1.Output.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Output.prototype.hasIp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string domain = 2;
 * @return {string}
 */
proto.palm.ops.router.v1.Output.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Output} returns this
 */
proto.palm.ops.router.v1.Output.prototype.setDomain = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.palm.ops.router.v1.Output.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.palm.ops.router.v1.Output} returns this
 */
proto.palm.ops.router.v1.Output.prototype.clearDomain = function() {
  return jspb.Message.setOneofField(this, 2, proto.palm.ops.router.v1.Output.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Output.prototype.hasDomain = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Protocol protocol = 11;
 * @return {!proto.palm.ops.router.v1.Protocol}
 */
proto.palm.ops.router.v1.Output.prototype.getProtocol = function() {
  return /** @type {!proto.palm.ops.router.v1.Protocol} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.palm.ops.router.v1.Protocol} value
 * @return {!proto.palm.ops.router.v1.Output} returns this
 */
proto.palm.ops.router.v1.Output.prototype.setProtocol = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.palm.ops.router.v1.Output} returns this
 */
proto.palm.ops.router.v1.Output.prototype.clearProtocol = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Output.prototype.hasProtocol = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 port = 12;
 * @return {number}
 */
proto.palm.ops.router.v1.Output.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.palm.ops.router.v1.Output} returns this
 */
proto.palm.ops.router.v1.Output.prototype.setPort = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.palm.ops.router.v1.Output} returns this
 */
proto.palm.ops.router.v1.Output.prototype.clearPort = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Output.prototype.hasPort = function() {
  return jspb.Message.getField(this, 12) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Nat.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Nat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Nat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Nat.toObject = function(includeInstance, msg) {
  var f, obj = {
    wan: (f = msg.getWan()) && proto.palm.ops.router.v1.Nat.Wan.toObject(includeInstance, f),
    protocol: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lan: (f = msg.getLan()) && proto.palm.ops.router.v1.Nat.Lan.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Nat}
 */
proto.palm.ops.router.v1.Nat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Nat;
  return proto.palm.ops.router.v1.Nat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Nat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Nat}
 */
proto.palm.ops.router.v1.Nat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.palm.ops.router.v1.Nat.Wan;
      reader.readMessage(value,proto.palm.ops.router.v1.Nat.Wan.deserializeBinaryFromReader);
      msg.setWan(value);
      break;
    case 2:
      var value = /** @type {!proto.palm.ops.router.v1.Protocol} */ (reader.readEnum());
      msg.setProtocol(value);
      break;
    case 3:
      var value = new proto.palm.ops.router.v1.Nat.Lan;
      reader.readMessage(value,proto.palm.ops.router.v1.Nat.Lan.deserializeBinaryFromReader);
      msg.setLan(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Nat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Nat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Nat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Nat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWan();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.palm.ops.router.v1.Nat.Wan.serializeBinaryToWriter
    );
  }
  f = message.getProtocol();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getLan();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.palm.ops.router.v1.Nat.Lan.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Nat.Wan.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Nat.Wan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Nat.Wan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Nat.Wan.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Nat.Wan}
 */
proto.palm.ops.router.v1.Nat.Wan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Nat.Wan;
  return proto.palm.ops.router.v1.Nat.Wan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Nat.Wan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Nat.Wan}
 */
proto.palm.ops.router.v1.Nat.Wan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Nat.Wan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Nat.Wan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Nat.Wan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Nat.Wan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string device = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Nat.Wan.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Nat.Wan} returns this
 */
proto.palm.ops.router.v1.Nat.Wan.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.palm.ops.router.v1.Nat.Wan.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.palm.ops.router.v1.Nat.Wan} returns this
 */
proto.palm.ops.router.v1.Nat.Wan.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Nat.Lan.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Nat.Lan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Nat.Lan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Nat.Lan.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Nat.Lan}
 */
proto.palm.ops.router.v1.Nat.Lan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Nat.Lan;
  return proto.palm.ops.router.v1.Nat.Lan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Nat.Lan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Nat.Lan}
 */
proto.palm.ops.router.v1.Nat.Lan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Nat.Lan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Nat.Lan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Nat.Lan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Nat.Lan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Nat.Lan.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Nat.Lan} returns this
 */
proto.palm.ops.router.v1.Nat.Lan.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.palm.ops.router.v1.Nat.Lan.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.palm.ops.router.v1.Nat.Lan} returns this
 */
proto.palm.ops.router.v1.Nat.Lan.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Wan wan = 1;
 * @return {?proto.palm.ops.router.v1.Nat.Wan}
 */
proto.palm.ops.router.v1.Nat.prototype.getWan = function() {
  return /** @type{?proto.palm.ops.router.v1.Nat.Wan} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.Nat.Wan, 1));
};


/**
 * @param {?proto.palm.ops.router.v1.Nat.Wan|undefined} value
 * @return {!proto.palm.ops.router.v1.Nat} returns this
*/
proto.palm.ops.router.v1.Nat.prototype.setWan = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Nat} returns this
 */
proto.palm.ops.router.v1.Nat.prototype.clearWan = function() {
  return this.setWan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Nat.prototype.hasWan = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Protocol protocol = 2;
 * @return {!proto.palm.ops.router.v1.Protocol}
 */
proto.palm.ops.router.v1.Nat.prototype.getProtocol = function() {
  return /** @type {!proto.palm.ops.router.v1.Protocol} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.palm.ops.router.v1.Protocol} value
 * @return {!proto.palm.ops.router.v1.Nat} returns this
 */
proto.palm.ops.router.v1.Nat.prototype.setProtocol = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Lan lan = 3;
 * @return {?proto.palm.ops.router.v1.Nat.Lan}
 */
proto.palm.ops.router.v1.Nat.prototype.getLan = function() {
  return /** @type{?proto.palm.ops.router.v1.Nat.Lan} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.Nat.Lan, 3));
};


/**
 * @param {?proto.palm.ops.router.v1.Nat.Lan|undefined} value
 * @return {!proto.palm.ops.router.v1.Nat} returns this
*/
proto.palm.ops.router.v1.Nat.prototype.setLan = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Nat} returns this
 */
proto.palm.ops.router.v1.Nat.prototype.clearLan = function() {
  return this.setLan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Nat.prototype.hasLan = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.palm.ops.router.v1.RouterStatusResponse.repeatedFields_ = [1,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.RouterStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.RouterStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.RouterStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    wanList: jspb.Message.toObjectList(msg.getWanList(),
    proto.palm.ops.router.v1.Wan.toObject, includeInstance),
    lan: (f = msg.getLan()) && proto.palm.ops.router.v1.Lan.toObject(includeInstance, f),
    hostsList: jspb.Message.toObjectList(msg.getHostsList(),
    proto.palm.ops.router.v1.Host.toObject, includeInstance),
    rules: jspb.Message.getFieldWithDefault(msg, 11, ""),
    bootedAt: (f = msg.getBootedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.RouterStatusResponse}
 */
proto.palm.ops.router.v1.RouterStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.RouterStatusResponse;
  return proto.palm.ops.router.v1.RouterStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.RouterStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.RouterStatusResponse}
 */
proto.palm.ops.router.v1.RouterStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.palm.ops.router.v1.Wan;
      reader.readMessage(value,proto.palm.ops.router.v1.Wan.deserializeBinaryFromReader);
      msg.addWan(value);
      break;
    case 2:
      var value = new proto.palm.ops.router.v1.Lan;
      reader.readMessage(value,proto.palm.ops.router.v1.Lan.deserializeBinaryFromReader);
      msg.setLan(value);
      break;
    case 9:
      var value = new proto.palm.ops.router.v1.Host;
      reader.readMessage(value,proto.palm.ops.router.v1.Host.deserializeBinaryFromReader);
      msg.addHosts(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRules(value);
      break;
    case 100:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setBootedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.RouterStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.RouterStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.RouterStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWanList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.palm.ops.router.v1.Wan.serializeBinaryToWriter
    );
  }
  f = message.getLan();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.palm.ops.router.v1.Lan.serializeBinaryToWriter
    );
  }
  f = message.getHostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.palm.ops.router.v1.Host.serializeBinaryToWriter
    );
  }
  f = message.getRules();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getBootedAt();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Wan wan = 1;
 * @return {!Array<!proto.palm.ops.router.v1.Wan>}
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.getWanList = function() {
  return /** @type{!Array<!proto.palm.ops.router.v1.Wan>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.palm.ops.router.v1.Wan, 1));
};


/**
 * @param {!Array<!proto.palm.ops.router.v1.Wan>} value
 * @return {!proto.palm.ops.router.v1.RouterStatusResponse} returns this
*/
proto.palm.ops.router.v1.RouterStatusResponse.prototype.setWanList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.palm.ops.router.v1.Wan=} opt_value
 * @param {number=} opt_index
 * @return {!proto.palm.ops.router.v1.Wan}
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.addWan = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.palm.ops.router.v1.Wan, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.palm.ops.router.v1.RouterStatusResponse} returns this
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.clearWanList = function() {
  return this.setWanList([]);
};


/**
 * optional Lan lan = 2;
 * @return {?proto.palm.ops.router.v1.Lan}
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.getLan = function() {
  return /** @type{?proto.palm.ops.router.v1.Lan} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.Lan, 2));
};


/**
 * @param {?proto.palm.ops.router.v1.Lan|undefined} value
 * @return {!proto.palm.ops.router.v1.RouterStatusResponse} returns this
*/
proto.palm.ops.router.v1.RouterStatusResponse.prototype.setLan = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.RouterStatusResponse} returns this
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.clearLan = function() {
  return this.setLan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.hasLan = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Host hosts = 9;
 * @return {!Array<!proto.palm.ops.router.v1.Host>}
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.getHostsList = function() {
  return /** @type{!Array<!proto.palm.ops.router.v1.Host>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.palm.ops.router.v1.Host, 9));
};


/**
 * @param {!Array<!proto.palm.ops.router.v1.Host>} value
 * @return {!proto.palm.ops.router.v1.RouterStatusResponse} returns this
*/
proto.palm.ops.router.v1.RouterStatusResponse.prototype.setHostsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.palm.ops.router.v1.Host=} opt_value
 * @param {number=} opt_index
 * @return {!proto.palm.ops.router.v1.Host}
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.addHosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.palm.ops.router.v1.Host, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.palm.ops.router.v1.RouterStatusResponse} returns this
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.clearHostsList = function() {
  return this.setHostsList([]);
};


/**
 * optional string rules = 11;
 * @return {string}
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.getRules = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.RouterStatusResponse} returns this
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.setRules = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional google.protobuf.Timestamp booted_at = 100;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.getBootedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 100));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.palm.ops.router.v1.RouterStatusResponse} returns this
*/
proto.palm.ops.router.v1.RouterStatusResponse.prototype.setBootedAt = function(value) {
  return jspb.Message.setWrapperField(this, 100, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.RouterStatusResponse} returns this
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.clearBootedAt = function() {
  return this.setBootedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.RouterStatusResponse.prototype.hasBootedAt = function() {
  return jspb.Message.getField(this, 100) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.ScanTask.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.ScanTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.ScanTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.ScanTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    ttl: (f = msg.getTtl()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.ScanTask}
 */
proto.palm.ops.router.v1.ScanTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.ScanTask;
  return proto.palm.ops.router.v1.ScanTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.ScanTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.ScanTask}
 */
proto.palm.ops.router.v1.ScanTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 9:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setTtl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.ScanTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.ScanTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.ScanTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.ScanTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTtl();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Duration ttl = 9;
 * @return {?proto.google.protobuf.Duration}
 */
proto.palm.ops.router.v1.ScanTask.prototype.getTtl = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 9));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.palm.ops.router.v1.ScanTask} returns this
*/
proto.palm.ops.router.v1.ScanTask.prototype.setTtl = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.ScanTask} returns this
 */
proto.palm.ops.router.v1.ScanTask.prototype.clearTtl = function() {
  return this.setTtl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.ScanTask.prototype.hasTtl = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Dhcp.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Dhcp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Dhcp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Dhcp.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Dhcp}
 */
proto.palm.ops.router.v1.Dhcp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Dhcp;
  return proto.palm.ops.router.v1.Dhcp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Dhcp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Dhcp}
 */
proto.palm.ops.router.v1.Dhcp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Dhcp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Dhcp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Dhcp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Dhcp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Static.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Static.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Static} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Static.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    netmask: jspb.Message.getFieldWithDefault(msg, 2, ""),
    gateway: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dns1: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dns2: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Static}
 */
proto.palm.ops.router.v1.Static.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Static;
  return proto.palm.ops.router.v1.Static.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Static} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Static}
 */
proto.palm.ops.router.v1.Static.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetmask(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGateway(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDns1(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDns2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Static.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Static.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Static} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Static.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNetmask();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGateway();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDns1();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Static.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Static} returns this
 */
proto.palm.ops.router.v1.Static.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string netmask = 2;
 * @return {string}
 */
proto.palm.ops.router.v1.Static.prototype.getNetmask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Static} returns this
 */
proto.palm.ops.router.v1.Static.prototype.setNetmask = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string gateway = 3;
 * @return {string}
 */
proto.palm.ops.router.v1.Static.prototype.getGateway = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Static} returns this
 */
proto.palm.ops.router.v1.Static.prototype.setGateway = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string dns1 = 4;
 * @return {string}
 */
proto.palm.ops.router.v1.Static.prototype.getDns1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Static} returns this
 */
proto.palm.ops.router.v1.Static.prototype.setDns1 = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string dns2 = 5;
 * @return {string}
 */
proto.palm.ops.router.v1.Static.prototype.getDns2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Static} returns this
 */
proto.palm.ops.router.v1.Static.prototype.setDns2 = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.palm.ops.router.v1.Static} returns this
 */
proto.palm.ops.router.v1.Static.prototype.clearDns2 = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Static.prototype.hasDns2 = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.palm.ops.router.v1.Wan.oneofGroups_ = [[11,12]];

/**
 * @enum {number}
 */
proto.palm.ops.router.v1.Wan.IpCase = {
  IP_NOT_SET: 0,
  DHCP: 11,
  STATIC: 12
};

/**
 * @return {proto.palm.ops.router.v1.Wan.IpCase}
 */
proto.palm.ops.router.v1.Wan.prototype.getIpCase = function() {
  return /** @type {proto.palm.ops.router.v1.Wan.IpCase} */(jspb.Message.computeOneofCase(this, proto.palm.ops.router.v1.Wan.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Wan.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Wan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Wan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Wan.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dhcp: (f = msg.getDhcp()) && proto.palm.ops.router.v1.Dhcp.toObject(includeInstance, f),
    pb_static: (f = msg.getStatic()) && proto.palm.ops.router.v1.Static.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Wan}
 */
proto.palm.ops.router.v1.Wan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Wan;
  return proto.palm.ops.router.v1.Wan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Wan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Wan}
 */
proto.palm.ops.router.v1.Wan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    case 11:
      var value = new proto.palm.ops.router.v1.Dhcp;
      reader.readMessage(value,proto.palm.ops.router.v1.Dhcp.deserializeBinaryFromReader);
      msg.setDhcp(value);
      break;
    case 12:
      var value = new proto.palm.ops.router.v1.Static;
      reader.readMessage(value,proto.palm.ops.router.v1.Static.deserializeBinaryFromReader);
      msg.setStatic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Wan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Wan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Wan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Wan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDhcp();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.palm.ops.router.v1.Dhcp.serializeBinaryToWriter
    );
  }
  f = message.getStatic();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.palm.ops.router.v1.Static.serializeBinaryToWriter
    );
  }
};


/**
 * optional string device = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Wan.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Wan} returns this
 */
proto.palm.ops.router.v1.Wan.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Dhcp dhcp = 11;
 * @return {?proto.palm.ops.router.v1.Dhcp}
 */
proto.palm.ops.router.v1.Wan.prototype.getDhcp = function() {
  return /** @type{?proto.palm.ops.router.v1.Dhcp} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.Dhcp, 11));
};


/**
 * @param {?proto.palm.ops.router.v1.Dhcp|undefined} value
 * @return {!proto.palm.ops.router.v1.Wan} returns this
*/
proto.palm.ops.router.v1.Wan.prototype.setDhcp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.palm.ops.router.v1.Wan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Wan} returns this
 */
proto.palm.ops.router.v1.Wan.prototype.clearDhcp = function() {
  return this.setDhcp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Wan.prototype.hasDhcp = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Static static = 12;
 * @return {?proto.palm.ops.router.v1.Static}
 */
proto.palm.ops.router.v1.Wan.prototype.getStatic = function() {
  return /** @type{?proto.palm.ops.router.v1.Static} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.Static, 12));
};


/**
 * @param {?proto.palm.ops.router.v1.Static|undefined} value
 * @return {!proto.palm.ops.router.v1.Wan} returns this
*/
proto.palm.ops.router.v1.Wan.prototype.setStatic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.palm.ops.router.v1.Wan.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Wan} returns this
 */
proto.palm.ops.router.v1.Wan.prototype.clearStatic = function() {
  return this.setStatic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Wan.prototype.hasStatic = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.palm.ops.router.v1.Bound.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Bound.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Bound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Bound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Bound.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    address: jspb.Message.getFieldWithDefault(msg, 11, ""),
    netmask: jspb.Message.getFieldWithDefault(msg, 22, ""),
    gateway: jspb.Message.getFieldWithDefault(msg, 33, ""),
    miimon: jspb.Message.getFieldWithDefault(msg, 41, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 42, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Bound}
 */
proto.palm.ops.router.v1.Bound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Bound;
  return proto.palm.ops.router.v1.Bound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Bound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Bound}
 */
proto.palm.ops.router.v1.Bound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addDevices(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetmask(value);
      break;
    case 33:
      var value = /** @type {string} */ (reader.readString());
      msg.setGateway(value);
      break;
    case 41:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMiimon(value);
      break;
    case 42:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Bound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Bound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Bound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Bound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getNetmask();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getGateway();
  if (f.length > 0) {
    writer.writeString(
      33,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 41));
  if (f != null) {
    writer.writeInt32(
      41,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 42));
  if (f != null) {
    writer.writeInt32(
      42,
      f
    );
  }
};


/**
 * repeated string devices = 1;
 * @return {!Array<string>}
 */
proto.palm.ops.router.v1.Bound.prototype.getDevicesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.palm.ops.router.v1.Bound} returns this
 */
proto.palm.ops.router.v1.Bound.prototype.setDevicesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.palm.ops.router.v1.Bound} returns this
 */
proto.palm.ops.router.v1.Bound.prototype.addDevices = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.palm.ops.router.v1.Bound} returns this
 */
proto.palm.ops.router.v1.Bound.prototype.clearDevicesList = function() {
  return this.setDevicesList([]);
};


/**
 * optional string address = 11;
 * @return {string}
 */
proto.palm.ops.router.v1.Bound.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Bound} returns this
 */
proto.palm.ops.router.v1.Bound.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string netmask = 22;
 * @return {string}
 */
proto.palm.ops.router.v1.Bound.prototype.getNetmask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Bound} returns this
 */
proto.palm.ops.router.v1.Bound.prototype.setNetmask = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional string gateway = 33;
 * @return {string}
 */
proto.palm.ops.router.v1.Bound.prototype.getGateway = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 33, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Bound} returns this
 */
proto.palm.ops.router.v1.Bound.prototype.setGateway = function(value) {
  return jspb.Message.setProto3StringField(this, 33, value);
};


/**
 * optional int32 miimon = 41;
 * @return {number}
 */
proto.palm.ops.router.v1.Bound.prototype.getMiimon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 41, 0));
};


/**
 * @param {number} value
 * @return {!proto.palm.ops.router.v1.Bound} returns this
 */
proto.palm.ops.router.v1.Bound.prototype.setMiimon = function(value) {
  return jspb.Message.setField(this, 41, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.palm.ops.router.v1.Bound} returns this
 */
proto.palm.ops.router.v1.Bound.prototype.clearMiimon = function() {
  return jspb.Message.setField(this, 41, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Bound.prototype.hasMiimon = function() {
  return jspb.Message.getField(this, 41) != null;
};


/**
 * optional int32 mode = 42;
 * @return {number}
 */
proto.palm.ops.router.v1.Bound.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 42, 0));
};


/**
 * @param {number} value
 * @return {!proto.palm.ops.router.v1.Bound} returns this
 */
proto.palm.ops.router.v1.Bound.prototype.setMode = function(value) {
  return jspb.Message.setField(this, 42, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.palm.ops.router.v1.Bound} returns this
 */
proto.palm.ops.router.v1.Bound.prototype.clearMode = function() {
  return jspb.Message.setField(this, 42, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Bound.prototype.hasMode = function() {
  return jspb.Message.getField(this, 42) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Lan.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Lan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Lan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Lan.toObject = function(includeInstance, msg) {
  var f, obj = {
    device: jspb.Message.getFieldWithDefault(msg, 1, ""),
    string: jspb.Message.getFieldWithDefault(msg, 2, ""),
    netmask: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dhcp: (f = msg.getDhcp()) && proto.palm.ops.router.v1.Lan.Dhcp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Lan}
 */
proto.palm.ops.router.v1.Lan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Lan;
  return proto.palm.ops.router.v1.Lan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Lan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Lan}
 */
proto.palm.ops.router.v1.Lan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetmask(value);
      break;
    case 4:
      var value = new proto.palm.ops.router.v1.Lan.Dhcp;
      reader.readMessage(value,proto.palm.ops.router.v1.Lan.Dhcp.deserializeBinaryFromReader);
      msg.setDhcp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Lan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Lan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Lan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Lan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getString();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNetmask();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDhcp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.palm.ops.router.v1.Lan.Dhcp.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.Lan.Dhcp.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.Lan.Dhcp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.Lan.Dhcp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Lan.Dhcp.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dns1: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dns2: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.Lan.Dhcp}
 */
proto.palm.ops.router.v1.Lan.Dhcp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.Lan.Dhcp;
  return proto.palm.ops.router.v1.Lan.Dhcp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.Lan.Dhcp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.Lan.Dhcp}
 */
proto.palm.ops.router.v1.Lan.Dhcp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDns1(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDns2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.Lan.Dhcp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.Lan.Dhcp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.Lan.Dhcp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.Lan.Dhcp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDns1();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Lan.Dhcp.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Lan.Dhcp} returns this
 */
proto.palm.ops.router.v1.Lan.Dhcp.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.palm.ops.router.v1.Lan.Dhcp.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Lan.Dhcp} returns this
 */
proto.palm.ops.router.v1.Lan.Dhcp.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string dns1 = 3;
 * @return {string}
 */
proto.palm.ops.router.v1.Lan.Dhcp.prototype.getDns1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Lan.Dhcp} returns this
 */
proto.palm.ops.router.v1.Lan.Dhcp.prototype.setDns1 = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string dns2 = 4;
 * @return {string}
 */
proto.palm.ops.router.v1.Lan.Dhcp.prototype.getDns2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Lan.Dhcp} returns this
 */
proto.palm.ops.router.v1.Lan.Dhcp.prototype.setDns2 = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.palm.ops.router.v1.Lan.Dhcp} returns this
 */
proto.palm.ops.router.v1.Lan.Dhcp.prototype.clearDns2 = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Lan.Dhcp.prototype.hasDns2 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string device = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.Lan.prototype.getDevice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Lan} returns this
 */
proto.palm.ops.router.v1.Lan.prototype.setDevice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string string = 2;
 * @return {string}
 */
proto.palm.ops.router.v1.Lan.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Lan} returns this
 */
proto.palm.ops.router.v1.Lan.prototype.setString = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string netmask = 3;
 * @return {string}
 */
proto.palm.ops.router.v1.Lan.prototype.getNetmask = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.Lan} returns this
 */
proto.palm.ops.router.v1.Lan.prototype.setNetmask = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Dhcp dhcp = 4;
 * @return {?proto.palm.ops.router.v1.Lan.Dhcp}
 */
proto.palm.ops.router.v1.Lan.prototype.getDhcp = function() {
  return /** @type{?proto.palm.ops.router.v1.Lan.Dhcp} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.Lan.Dhcp, 4));
};


/**
 * @param {?proto.palm.ops.router.v1.Lan.Dhcp|undefined} value
 * @return {!proto.palm.ops.router.v1.Lan} returns this
*/
proto.palm.ops.router.v1.Lan.prototype.setDhcp = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.Lan} returns this
 */
proto.palm.ops.router.v1.Lan.prototype.clearDhcp = function() {
  return this.setDhcp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.Lan.prototype.hasDhcp = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.UserProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.UserProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.UserProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.UserProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    nickname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.UserProfile}
 */
proto.palm.ops.router.v1.UserProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.UserProfile;
  return proto.palm.ops.router.v1.UserProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.UserProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.UserProfile}
 */
proto.palm.ops.router.v1.UserProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.UserProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.UserProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.UserProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.UserProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string nickname = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.UserProfile.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.UserProfile} returns this
 */
proto.palm.ops.router.v1.UserProfile.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.palm.ops.router.v1.UserProfile.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.UserProfile} returns this
 */
proto.palm.ops.router.v1.UserProfile.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.UserSignInRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.UserSignInRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.UserSignInRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.UserSignInRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.palm.ops.router.v1.UserProfile.toObject(includeInstance, f),
    ttl: (f = msg.getTtl()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.UserSignInRequest}
 */
proto.palm.ops.router.v1.UserSignInRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.UserSignInRequest;
  return proto.palm.ops.router.v1.UserSignInRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.UserSignInRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.UserSignInRequest}
 */
proto.palm.ops.router.v1.UserSignInRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.palm.ops.router.v1.UserProfile;
      reader.readMessage(value,proto.palm.ops.router.v1.UserProfile.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 9:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setTtl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.UserSignInRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.UserSignInRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.UserSignInRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.UserSignInRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.palm.ops.router.v1.UserProfile.serializeBinaryToWriter
    );
  }
  f = message.getTtl();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserProfile user = 1;
 * @return {?proto.palm.ops.router.v1.UserProfile}
 */
proto.palm.ops.router.v1.UserSignInRequest.prototype.getUser = function() {
  return /** @type{?proto.palm.ops.router.v1.UserProfile} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.UserProfile, 1));
};


/**
 * @param {?proto.palm.ops.router.v1.UserProfile|undefined} value
 * @return {!proto.palm.ops.router.v1.UserSignInRequest} returns this
*/
proto.palm.ops.router.v1.UserSignInRequest.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.UserSignInRequest} returns this
 */
proto.palm.ops.router.v1.UserSignInRequest.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.UserSignInRequest.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Duration ttl = 9;
 * @return {?proto.google.protobuf.Duration}
 */
proto.palm.ops.router.v1.UserSignInRequest.prototype.getTtl = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 9));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.palm.ops.router.v1.UserSignInRequest} returns this
*/
proto.palm.ops.router.v1.UserSignInRequest.prototype.setTtl = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.UserSignInRequest} returns this
 */
proto.palm.ops.router.v1.UserSignInRequest.prototype.clearTtl = function() {
  return this.setTtl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.UserSignInRequest.prototype.hasTtl = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.UserSignInResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.UserSignInResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.UserSignInResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.UserSignInResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.UserSignInResponse}
 */
proto.palm.ops.router.v1.UserSignInResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.UserSignInResponse;
  return proto.palm.ops.router.v1.UserSignInResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.UserSignInResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.UserSignInResponse}
 */
proto.palm.ops.router.v1.UserSignInResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.UserSignInResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.UserSignInResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.UserSignInResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.UserSignInResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.palm.ops.router.v1.UserSignInResponse.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.palm.ops.router.v1.UserSignInResponse} returns this
 */
proto.palm.ops.router.v1.UserSignInResponse.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.UserUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.UserUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.UserUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.UserUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    current: (f = msg.getCurrent()) && proto.palm.ops.router.v1.UserProfile.toObject(includeInstance, f),
    pb_new: (f = msg.getNew()) && proto.palm.ops.router.v1.UserProfile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.UserUpdateRequest}
 */
proto.palm.ops.router.v1.UserUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.UserUpdateRequest;
  return proto.palm.ops.router.v1.UserUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.UserUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.UserUpdateRequest}
 */
proto.palm.ops.router.v1.UserUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.palm.ops.router.v1.UserProfile;
      reader.readMessage(value,proto.palm.ops.router.v1.UserProfile.deserializeBinaryFromReader);
      msg.setCurrent(value);
      break;
    case 2:
      var value = new proto.palm.ops.router.v1.UserProfile;
      reader.readMessage(value,proto.palm.ops.router.v1.UserProfile.deserializeBinaryFromReader);
      msg.setNew(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.UserUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.UserUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.UserUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.UserUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.palm.ops.router.v1.UserProfile.serializeBinaryToWriter
    );
  }
  f = message.getNew();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.palm.ops.router.v1.UserProfile.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserProfile current = 1;
 * @return {?proto.palm.ops.router.v1.UserProfile}
 */
proto.palm.ops.router.v1.UserUpdateRequest.prototype.getCurrent = function() {
  return /** @type{?proto.palm.ops.router.v1.UserProfile} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.UserProfile, 1));
};


/**
 * @param {?proto.palm.ops.router.v1.UserProfile|undefined} value
 * @return {!proto.palm.ops.router.v1.UserUpdateRequest} returns this
*/
proto.palm.ops.router.v1.UserUpdateRequest.prototype.setCurrent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.UserUpdateRequest} returns this
 */
proto.palm.ops.router.v1.UserUpdateRequest.prototype.clearCurrent = function() {
  return this.setCurrent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.UserUpdateRequest.prototype.hasCurrent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UserProfile new = 2;
 * @return {?proto.palm.ops.router.v1.UserProfile}
 */
proto.palm.ops.router.v1.UserUpdateRequest.prototype.getNew = function() {
  return /** @type{?proto.palm.ops.router.v1.UserProfile} */ (
    jspb.Message.getWrapperField(this, proto.palm.ops.router.v1.UserProfile, 2));
};


/**
 * @param {?proto.palm.ops.router.v1.UserProfile|undefined} value
 * @return {!proto.palm.ops.router.v1.UserUpdateRequest} returns this
*/
proto.palm.ops.router.v1.UserUpdateRequest.prototype.setNew = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.palm.ops.router.v1.UserUpdateRequest} returns this
 */
proto.palm.ops.router.v1.UserUpdateRequest.prototype.clearNew = function() {
  return this.setNew(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.palm.ops.router.v1.UserUpdateRequest.prototype.hasNew = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.palm.ops.router.v1.UserLogsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.palm.ops.router.v1.UserLogsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.palm.ops.router.v1.UserLogsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.palm.ops.router.v1.UserLogsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.UserLogsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.palm.ops.router.v1.UserLogsResponse}
 */
proto.palm.ops.router.v1.UserLogsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.palm.ops.router.v1.UserLogsResponse;
  return proto.palm.ops.router.v1.UserLogsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.palm.ops.router.v1.UserLogsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.palm.ops.router.v1.UserLogsResponse}
 */
proto.palm.ops.router.v1.UserLogsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.palm.ops.router.v1.UserLogsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.palm.ops.router.v1.UserLogsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.palm.ops.router.v1.UserLogsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.palm.ops.router.v1.UserLogsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string items = 1;
 * @return {!Array<string>}
 */
proto.palm.ops.router.v1.UserLogsResponse.prototype.getItemsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.palm.ops.router.v1.UserLogsResponse} returns this
 */
proto.palm.ops.router.v1.UserLogsResponse.prototype.setItemsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.palm.ops.router.v1.UserLogsResponse} returns this
 */
proto.palm.ops.router.v1.UserLogsResponse.prototype.addItems = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.palm.ops.router.v1.UserLogsResponse} returns this
 */
proto.palm.ops.router.v1.UserLogsResponse.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * @enum {number}
 */
proto.palm.ops.router.v1.Protocol = {
  ICMP: 0,
  TCP: 1,
  UDP: 2
};

goog.object.extend(exports, proto.palm.ops.router.v1);
