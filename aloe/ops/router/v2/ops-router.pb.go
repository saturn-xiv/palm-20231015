// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: ops-router.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Rule_Protocol int32

const (
	Rule_Icmp Rule_Protocol = 0
	Rule_Tcp  Rule_Protocol = 1
	Rule_Udp  Rule_Protocol = 2
)

// Enum value maps for Rule_Protocol.
var (
	Rule_Protocol_name = map[int32]string{
		0: "Icmp",
		1: "Tcp",
		2: "Udp",
	}
	Rule_Protocol_value = map[string]int32{
		"Icmp": 0,
		"Tcp":  1,
		"Udp":  2,
	}
)

func (x Rule_Protocol) Enum() *Rule_Protocol {
	p := new(Rule_Protocol)
	*p = x
	return p
}

func (x Rule_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_ops_router_proto_enumTypes[0].Descriptor()
}

func (Rule_Protocol) Type() protoreflect.EnumType {
	return &file_ops_router_proto_enumTypes[0]
}

func (x Rule_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_Protocol.Descriptor instead.
func (Rule_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{10, 0}
}

type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone   *string `protobuf:"bytes,1,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	Wechat  *string `protobuf:"bytes,2,opt,name=wechat,proto3,oneof" json:"wechat,omitempty"`
	Email   *string `protobuf:"bytes,3,opt,name=email,proto3,oneof" json:"email,omitempty"`
	Address *string `protobuf:"bytes,99,opt,name=address,proto3,oneof" json:"address,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{0}
}

func (x *Contact) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *Contact) GetWechat() string {
	if x != nil && x.Wechat != nil {
		return *x.Wechat
	}
	return ""
}

func (x *Contact) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *Contact) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

type RouterSetLanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *Lan `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Enable  bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *RouterSetLanRequest) Reset() {
	*x = RouterSetLanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterSetLanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterSetLanRequest) ProtoMessage() {}

func (x *RouterSetLanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterSetLanRequest.ProtoReflect.Descriptor instead.
func (*RouterSetLanRequest) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{1}
}

func (x *RouterSetLanRequest) GetPayload() *Lan {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RouterSetLanRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type RouterSetDmzRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *Dmz `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Enable  bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *RouterSetDmzRequest) Reset() {
	*x = RouterSetDmzRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterSetDmzRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterSetDmzRequest) ProtoMessage() {}

func (x *RouterSetDmzRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterSetDmzRequest.ProtoReflect.Descriptor instead.
func (*RouterSetDmzRequest) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{2}
}

func (x *RouterSetDmzRequest) GetPayload() *Dmz {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RouterSetDmzRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type RouterSetWanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *Wan `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Enable  bool `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *RouterSetWanRequest) Reset() {
	*x = RouterSetWanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterSetWanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterSetWanRequest) ProtoMessage() {}

func (x *RouterSetWanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterSetWanRequest.ProtoReflect.Descriptor instead.
func (*RouterSetWanRequest) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{3}
}

func (x *RouterSetWanRequest) GetPayload() *Wan {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RouterSetWanRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type WanPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*WanPool_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *WanPool) Reset() {
	*x = WanPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WanPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WanPool) ProtoMessage() {}

func (x *WanPool) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WanPool.ProtoReflect.Descriptor instead.
func (*WanPool) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{4}
}

func (x *WanPool) GetItems() []*WanPool_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type RouterCreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Contact *Contact `protobuf:"bytes,2,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *RouterCreateUserRequest) Reset() {
	*x = RouterCreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterCreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterCreateUserRequest) ProtoMessage() {}

func (x *RouterCreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterCreateUserRequest.ProtoReflect.Descriptor instead.
func (*RouterCreateUserRequest) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{5}
}

func (x *RouterCreateUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouterCreateUserRequest) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type RouterIndexUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RouterIndexUserResponse_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RouterIndexUserResponse) Reset() {
	*x = RouterIndexUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterIndexUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterIndexUserResponse) ProtoMessage() {}

func (x *RouterIndexUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterIndexUserResponse.ProtoReflect.Descriptor instead.
func (*RouterIndexUserResponse) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{6}
}

func (x *RouterIndexUserResponse) GetItems() []*RouterIndexUserResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type RouterUpdateHostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	User     int32   `protobuf:"varint,2,opt,name=user,proto3" json:"user,omitempty"`
	Group    string  `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Ip       string  `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Fixed    bool    `protobuf:"varint,5,opt,name=fixed,proto3" json:"fixed,omitempty"`
	Zone     string  `protobuf:"bytes,8,opt,name=zone,proto3" json:"zone,omitempty"`
	Location *string `protobuf:"bytes,9,opt,name=location,proto3,oneof" json:"location,omitempty"`
}

func (x *RouterUpdateHostRequest) Reset() {
	*x = RouterUpdateHostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterUpdateHostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterUpdateHostRequest) ProtoMessage() {}

func (x *RouterUpdateHostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterUpdateHostRequest.ProtoReflect.Descriptor instead.
func (*RouterUpdateHostRequest) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{7}
}

func (x *RouterUpdateHostRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RouterUpdateHostRequest) GetUser() int32 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *RouterUpdateHostRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *RouterUpdateHostRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RouterUpdateHostRequest) GetFixed() bool {
	if x != nil {
		return x.Fixed
	}
	return false
}

func (x *RouterUpdateHostRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *RouterUpdateHostRequest) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

type RouterIndexRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*RouterIndexRuleResponse_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *RouterIndexRuleResponse) Reset() {
	*x = RouterIndexRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterIndexRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterIndexRuleResponse) ProtoMessage() {}

func (x *RouterIndexRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterIndexRuleResponse.ProtoReflect.Descriptor instead.
func (*RouterIndexRuleResponse) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{8}
}

func (x *RouterIndexRuleResponse) GetItems() []*RouterIndexRuleResponse_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mac      string      `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty"`
	Ip       string      `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Fixed    bool        `protobuf:"varint,5,opt,name=fixed,proto3" json:"fixed,omitempty"`
	Group    string      `protobuf:"bytes,9,opt,name=group,proto3" json:"group,omitempty"`
	Location *string     `protobuf:"bytes,11,opt,name=location,proto3,oneof" json:"location,omitempty"`
	Owner    *Host_Owner `protobuf:"bytes,12,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{9}
}

func (x *Host) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Host) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Host) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Host) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Host) GetFixed() bool {
	if x != nil {
		return x.Fixed
	}
	return false
}

func (x *Host) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Host) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *Host) GetOwner() *Host_Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*Rule_In
	//	*Rule_Out
	//	*Rule_Nat_
	Payload isRule_Payload `protobuf_oneof:"payload"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{10}
}

func (x *Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rule) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (m *Rule) GetPayload() isRule_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Rule) GetIn() *Rule_InBound {
	if x, ok := x.GetPayload().(*Rule_In); ok {
		return x.In
	}
	return nil
}

func (x *Rule) GetOut() *Rule_OutBound {
	if x, ok := x.GetPayload().(*Rule_Out); ok {
		return x.Out
	}
	return nil
}

func (x *Rule) GetNat() *Rule_Nat {
	if x, ok := x.GetPayload().(*Rule_Nat_); ok {
		return x.Nat
	}
	return nil
}

type isRule_Payload interface {
	isRule_Payload()
}

type Rule_In struct {
	In *Rule_InBound `protobuf:"bytes,11,opt,name=in,proto3,oneof"`
}

type Rule_Out struct {
	Out *Rule_OutBound `protobuf:"bytes,12,opt,name=out,proto3,oneof"`
}

type Rule_Nat_ struct {
	Nat *Rule_Nat `protobuf:"bytes,13,opt,name=nat,proto3,oneof"`
}

func (*Rule_In) isRule_Payload() {}

func (*Rule_Out) isRule_Payload() {}

func (*Rule_Nat_) isRule_Payload() {}

type RouterStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interfaces map[string]string        `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Lan        *Lan                     `protobuf:"bytes,11,opt,name=lan,proto3" json:"lan,omitempty"`
	Dmz        *Dmz                     `protobuf:"bytes,12,opt,name=dmz,proto3" json:"dmz,omitempty"`
	Dns        *Dns                     `protobuf:"bytes,13,opt,name=dns,proto3" json:"dns,omitempty"`
	Wan        []*Wan                   `protobuf:"bytes,14,rep,name=wan,proto3" json:"wan,omitempty"`
	WanPool    *WanPool                 `protobuf:"bytes,15,opt,name=wan_pool,json=wanPool,proto3" json:"wan_pool,omitempty"`
	Rules      []*Rule                  `protobuf:"bytes,21,rep,name=rules,proto3" json:"rules,omitempty"`
	Hosts      []*Host                  `protobuf:"bytes,22,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Ip         *RouterStatusResponse_Ip `protobuf:"bytes,97,opt,name=ip,proto3" json:"ip,omitempty"`
	Firewall   string                   `protobuf:"bytes,98,opt,name=firewall,proto3" json:"firewall,omitempty"`
	Uptime     *durationpb.Duration     `protobuf:"bytes,99,opt,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *RouterStatusResponse) Reset() {
	*x = RouterStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterStatusResponse) ProtoMessage() {}

func (x *RouterStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterStatusResponse.ProtoReflect.Descriptor instead.
func (*RouterStatusResponse) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{11}
}

func (x *RouterStatusResponse) GetInterfaces() map[string]string {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *RouterStatusResponse) GetLan() *Lan {
	if x != nil {
		return x.Lan
	}
	return nil
}

func (x *RouterStatusResponse) GetDmz() *Dmz {
	if x != nil {
		return x.Dmz
	}
	return nil
}

func (x *RouterStatusResponse) GetDns() *Dns {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *RouterStatusResponse) GetWan() []*Wan {
	if x != nil {
		return x.Wan
	}
	return nil
}

func (x *RouterStatusResponse) GetWanPool() *WanPool {
	if x != nil {
		return x.WanPool
	}
	return nil
}

func (x *RouterStatusResponse) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *RouterStatusResponse) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *RouterStatusResponse) GetIp() *RouterStatusResponse_Ip {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *RouterStatusResponse) GetFirewall() string {
	if x != nil {
		return x.Firewall
	}
	return ""
}

func (x *RouterStatusResponse) GetUptime() *durationpb.Duration {
	if x != nil {
		return x.Uptime
	}
	return nil
}

type Lan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device  string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Mac     string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Metric  uint32 `protobuf:"varint,3,opt,name=metric,proto3" json:"metric,omitempty"`
	Address string `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Lan) Reset() {
	*x = Lan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lan) ProtoMessage() {}

func (x *Lan) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lan.ProtoReflect.Descriptor instead.
func (*Lan) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{12}
}

func (x *Lan) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Lan) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Lan) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *Lan) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Dmz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device  string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Mac     string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Metric  uint32 `protobuf:"varint,3,opt,name=metric,proto3" json:"metric,omitempty"`
	Address string `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Dmz) Reset() {
	*x = Dmz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dmz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dmz) ProtoMessage() {}

func (x *Dmz) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dmz.ProtoReflect.Descriptor instead.
func (*Dmz) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{13}
}

func (x *Dmz) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Dmz) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Dmz) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *Dmz) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Wan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Metric uint32 `protobuf:"varint,2,opt,name=metric,proto3" json:"metric,omitempty"`
	Name   string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Mac    string `protobuf:"bytes,11,opt,name=mac,proto3" json:"mac,omitempty"`
	// Types that are assignable to Ip:
	//
	//	*Wan_Dhcp
	//	*Wan_Static
	Ip     isWan_Ip `protobuf_oneof:"ip"`
	Enable bool     `protobuf:"varint,99,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *Wan) Reset() {
	*x = Wan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wan) ProtoMessage() {}

func (x *Wan) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wan.ProtoReflect.Descriptor instead.
func (*Wan) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{14}
}

func (x *Wan) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Wan) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *Wan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Wan) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (m *Wan) GetIp() isWan_Ip {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (x *Wan) GetDhcp() *Dhcp {
	if x, ok := x.GetIp().(*Wan_Dhcp); ok {
		return x.Dhcp
	}
	return nil
}

func (x *Wan) GetStatic() *Static {
	if x, ok := x.GetIp().(*Wan_Static); ok {
		return x.Static
	}
	return nil
}

func (x *Wan) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type isWan_Ip interface {
	isWan_Ip()
}

type Wan_Dhcp struct {
	Dhcp *Dhcp `protobuf:"bytes,21,opt,name=dhcp,proto3,oneof"`
}

type Wan_Static struct {
	Static *Static `protobuf:"bytes,22,opt,name=static,proto3,oneof"`
}

func (*Wan_Dhcp) isWan_Ip() {}

func (*Wan_Static) isWan_Ip() {}

type Dhcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V6 bool `protobuf:"varint,1,opt,name=v6,proto3" json:"v6,omitempty"`
}

func (x *Dhcp) Reset() {
	*x = Dhcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dhcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dhcp) ProtoMessage() {}

func (x *Dhcp) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dhcp.ProtoReflect.Descriptor instead.
func (*Dhcp) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{15}
}

func (x *Dhcp) GetV6() bool {
	if x != nil {
		return x.V6
	}
	return false
}

type Static struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Gateway string  `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Dns1    string  `protobuf:"bytes,4,opt,name=dns1,proto3" json:"dns1,omitempty"`
	Dns2    *string `protobuf:"bytes,5,opt,name=dns2,proto3,oneof" json:"dns2,omitempty"`
}

func (x *Static) Reset() {
	*x = Static{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Static) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Static) ProtoMessage() {}

func (x *Static) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Static.ProtoReflect.Descriptor instead.
func (*Static) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{16}
}

func (x *Static) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Static) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *Static) GetDns1() string {
	if x != nil {
		return x.Dns1
	}
	return ""
}

func (x *Static) GetDns2() string {
	if x != nil && x.Dns2 != nil {
		return *x.Dns2
	}
	return ""
}

type Dns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Dns) Reset() {
	*x = Dns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dns) ProtoMessage() {}

func (x *Dns) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dns.ProtoReflect.Descriptor instead.
func (*Dns) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{17}
}

func (x *Dns) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

type UserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *UserProfile) Reset() {
	*x = UserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfile) ProtoMessage() {}

func (x *UserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfile.ProtoReflect.Descriptor instead.
func (*UserProfile) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{18}
}

func (x *UserProfile) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserProfile) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type UserSignInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *UserProfile         `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Ttl  *durationpb.Duration `protobuf:"bytes,9,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *UserSignInRequest) Reset() {
	*x = UserSignInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSignInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSignInRequest) ProtoMessage() {}

func (x *UserSignInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSignInRequest.ProtoReflect.Descriptor instead.
func (*UserSignInRequest) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{19}
}

func (x *UserSignInRequest) GetUser() *UserProfile {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserSignInRequest) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type UserSignInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UserSignInResponse) Reset() {
	*x = UserSignInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSignInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSignInResponse) ProtoMessage() {}

func (x *UserSignInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSignInResponse.ProtoReflect.Descriptor instead.
func (*UserSignInResponse) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{20}
}

func (x *UserSignInResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UserUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current *UserProfile `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	New     *UserProfile `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *UserUpdateRequest) Reset() {
	*x = UserUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUpdateRequest) ProtoMessage() {}

func (x *UserUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUpdateRequest.ProtoReflect.Descriptor instead.
func (*UserUpdateRequest) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{21}
}

func (x *UserUpdateRequest) GetCurrent() *UserProfile {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *UserUpdateRequest) GetNew() *UserProfile {
	if x != nil {
		return x.New
	}
	return nil
}

type UserLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *UserLogsResponse) Reset() {
	*x = UserLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogsResponse) ProtoMessage() {}

func (x *UserLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogsResponse.ProtoReflect.Descriptor instead.
func (*UserLogsResponse) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{22}
}

func (x *UserLogsResponse) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

type WanPool_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Weight uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *WanPool_Item) Reset() {
	*x = WanPool_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WanPool_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WanPool_Item) ProtoMessage() {}

func (x *WanPool_Item) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WanPool_Item.ProtoReflect.Descriptor instead.
func (*WanPool_Item) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{4, 0}
}

func (x *WanPool_Item) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *WanPool_Item) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type RouterIndexUserResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Contact *Contact `protobuf:"bytes,3,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *RouterIndexUserResponse_Item) Reset() {
	*x = RouterIndexUserResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterIndexUserResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterIndexUserResponse_Item) ProtoMessage() {}

func (x *RouterIndexUserResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterIndexUserResponse_Item.ProtoReflect.Descriptor instead.
func (*RouterIndexUserResponse_Item) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{6, 0}
}

func (x *RouterIndexUserResponse_Item) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RouterIndexUserResponse_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouterIndexUserResponse_Item) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type RouterIndexRuleResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Group string `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*RouterIndexRuleResponse_Item_In
	//	*RouterIndexRuleResponse_Item_Out
	//	*RouterIndexRuleResponse_Item_Nat
	Payload isRouterIndexRuleResponse_Item_Payload `protobuf_oneof:"payload"`
}

func (x *RouterIndexRuleResponse_Item) Reset() {
	*x = RouterIndexRuleResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterIndexRuleResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterIndexRuleResponse_Item) ProtoMessage() {}

func (x *RouterIndexRuleResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterIndexRuleResponse_Item.ProtoReflect.Descriptor instead.
func (*RouterIndexRuleResponse_Item) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{8, 0}
}

func (x *RouterIndexRuleResponse_Item) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RouterIndexRuleResponse_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouterIndexRuleResponse_Item) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (m *RouterIndexRuleResponse_Item) GetPayload() isRouterIndexRuleResponse_Item_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *RouterIndexRuleResponse_Item) GetIn() *Rule_InBound {
	if x, ok := x.GetPayload().(*RouterIndexRuleResponse_Item_In); ok {
		return x.In
	}
	return nil
}

func (x *RouterIndexRuleResponse_Item) GetOut() *Rule_OutBound {
	if x, ok := x.GetPayload().(*RouterIndexRuleResponse_Item_Out); ok {
		return x.Out
	}
	return nil
}

func (x *RouterIndexRuleResponse_Item) GetNat() *Rule_Nat {
	if x, ok := x.GetPayload().(*RouterIndexRuleResponse_Item_Nat); ok {
		return x.Nat
	}
	return nil
}

type isRouterIndexRuleResponse_Item_Payload interface {
	isRouterIndexRuleResponse_Item_Payload()
}

type RouterIndexRuleResponse_Item_In struct {
	In *Rule_InBound `protobuf:"bytes,11,opt,name=in,proto3,oneof"`
}

type RouterIndexRuleResponse_Item_Out struct {
	Out *Rule_OutBound `protobuf:"bytes,12,opt,name=out,proto3,oneof"`
}

type RouterIndexRuleResponse_Item_Nat struct {
	Nat *Rule_Nat `protobuf:"bytes,13,opt,name=nat,proto3,oneof"`
}

func (*RouterIndexRuleResponse_Item_In) isRouterIndexRuleResponse_Item_Payload() {}

func (*RouterIndexRuleResponse_Item_Out) isRouterIndexRuleResponse_Item_Payload() {}

func (*RouterIndexRuleResponse_Item_Nat) isRouterIndexRuleResponse_Item_Payload() {}

type Host_Owner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Contact *Contact `protobuf:"bytes,2,opt,name=contact,proto3" json:"contact,omitempty"`
}

func (x *Host_Owner) Reset() {
	*x = Host_Owner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host_Owner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host_Owner) ProtoMessage() {}

func (x *Host_Owner) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host_Owner.ProtoReflect.Descriptor instead.
func (*Host_Owner) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{9, 0}
}

func (x *Host_Owner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Host_Owner) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type Rule_InBound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device string  `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Tcp    bool    `protobuf:"varint,2,opt,name=tcp,proto3" json:"tcp,omitempty"`
	Port   uint32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Source *string `protobuf:"bytes,4,opt,name=source,proto3,oneof" json:"source,omitempty"`
}

func (x *Rule_InBound) Reset() {
	*x = Rule_InBound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_InBound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_InBound) ProtoMessage() {}

func (x *Rule_InBound) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_InBound.ProtoReflect.Descriptor instead.
func (*Rule_InBound) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Rule_InBound) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Rule_InBound) GetTcp() bool {
	if x != nil {
		return x.Tcp
	}
	return false
}

func (x *Rule_InBound) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Rule_InBound) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

type Rule_OutBound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*Rule_OutBound_Host_
	//	*Rule_OutBound_Speed_
	//	*Rule_OutBound_Time_
	Payload isRule_OutBound_Payload `protobuf_oneof:"payload"`
}

func (x *Rule_OutBound) Reset() {
	*x = Rule_OutBound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_OutBound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_OutBound) ProtoMessage() {}

func (x *Rule_OutBound) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_OutBound.ProtoReflect.Descriptor instead.
func (*Rule_OutBound) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{10, 1}
}

func (m *Rule_OutBound) GetPayload() isRule_OutBound_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Rule_OutBound) GetHost() *Rule_OutBound_Host {
	if x, ok := x.GetPayload().(*Rule_OutBound_Host_); ok {
		return x.Host
	}
	return nil
}

func (x *Rule_OutBound) GetSpeed() *Rule_OutBound_Speed {
	if x, ok := x.GetPayload().(*Rule_OutBound_Speed_); ok {
		return x.Speed
	}
	return nil
}

func (x *Rule_OutBound) GetTime() *Rule_OutBound_Time {
	if x, ok := x.GetPayload().(*Rule_OutBound_Time_); ok {
		return x.Time
	}
	return nil
}

type isRule_OutBound_Payload interface {
	isRule_OutBound_Payload()
}

type Rule_OutBound_Host_ struct {
	Host *Rule_OutBound_Host `protobuf:"bytes,1,opt,name=host,proto3,oneof"`
}

type Rule_OutBound_Speed_ struct {
	Speed *Rule_OutBound_Speed `protobuf:"bytes,2,opt,name=speed,proto3,oneof"`
}

type Rule_OutBound_Time_ struct {
	Time *Rule_OutBound_Time `protobuf:"bytes,3,opt,name=time,proto3,oneof"`
}

func (*Rule_OutBound_Host_) isRule_OutBound_Payload() {}

func (*Rule_OutBound_Speed_) isRule_OutBound_Payload() {}

func (*Rule_OutBound_Time_) isRule_OutBound_Payload() {}

type Rule_Nat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      *Rule_Nat_Source      `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Tcp         bool                  `protobuf:"varint,2,opt,name=tcp,proto3" json:"tcp,omitempty"`
	Destination *Rule_Nat_Destination `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *Rule_Nat) Reset() {
	*x = Rule_Nat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_Nat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_Nat) ProtoMessage() {}

func (x *Rule_Nat) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_Nat.ProtoReflect.Descriptor instead.
func (*Rule_Nat) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{10, 2}
}

func (x *Rule_Nat) GetSource() *Rule_Nat_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Rule_Nat) GetTcp() bool {
	if x != nil {
		return x.Tcp
	}
	return false
}

func (x *Rule_Nat) GetDestination() *Rule_Nat_Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

type Rule_OutBound_Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	To       string        `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Protocol Rule_Protocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=palm.ops.router.v1.Rule_Protocol" json:"protocol,omitempty"`
	Port     uint32        `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Rule_OutBound_Host) Reset() {
	*x = Rule_OutBound_Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_OutBound_Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_OutBound_Host) ProtoMessage() {}

func (x *Rule_OutBound_Host) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_OutBound_Host.ProtoReflect.Descriptor instead.
func (*Rule_OutBound_Host) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{10, 1, 0}
}

func (x *Rule_OutBound_Host) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Rule_OutBound_Host) GetProtocol() Rule_Protocol {
	if x != nil {
		return x.Protocol
	}
	return Rule_Icmp
}

func (x *Rule_OutBound_Host) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Rule_OutBound_Speed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Up   *uint32 `protobuf:"varint,1,opt,name=up,proto3,oneof" json:"up,omitempty"`
	Down *uint32 `protobuf:"varint,2,opt,name=down,proto3,oneof" json:"down,omitempty"`
}

func (x *Rule_OutBound_Speed) Reset() {
	*x = Rule_OutBound_Speed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_OutBound_Speed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_OutBound_Speed) ProtoMessage() {}

func (x *Rule_OutBound_Speed) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_OutBound_Speed.ProtoReflect.Descriptor instead.
func (*Rule_OutBound_Speed) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{10, 1, 1}
}

func (x *Rule_OutBound_Speed) GetUp() uint32 {
	if x != nil && x.Up != nil {
		return *x.Up
	}
	return 0
}

func (x *Rule_OutBound_Speed) GetDown() uint32 {
	if x != nil && x.Down != nil {
		return *x.Down
	}
	return 0
}

type Rule_OutBound_Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Monday    bool                   `protobuf:"varint,11,opt,name=monday,proto3" json:"monday,omitempty"`
	Tuesday   bool                   `protobuf:"varint,12,opt,name=tuesday,proto3" json:"tuesday,omitempty"`
	Wednesday bool                   `protobuf:"varint,13,opt,name=wednesday,proto3" json:"wednesday,omitempty"`
	Thursday  bool                   `protobuf:"varint,14,opt,name=thursday,proto3" json:"thursday,omitempty"`
	Friday    bool                   `protobuf:"varint,15,opt,name=friday,proto3" json:"friday,omitempty"`
	Saturday  bool                   `protobuf:"varint,16,opt,name=saturday,proto3" json:"saturday,omitempty"`
	Sunday    bool                   `protobuf:"varint,17,opt,name=sunday,proto3" json:"sunday,omitempty"`
}

func (x *Rule_OutBound_Time) Reset() {
	*x = Rule_OutBound_Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_OutBound_Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_OutBound_Time) ProtoMessage() {}

func (x *Rule_OutBound_Time) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_OutBound_Time.ProtoReflect.Descriptor instead.
func (*Rule_OutBound_Time) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{10, 1, 2}
}

func (x *Rule_OutBound_Time) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Rule_OutBound_Time) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Rule_OutBound_Time) GetMonday() bool {
	if x != nil {
		return x.Monday
	}
	return false
}

func (x *Rule_OutBound_Time) GetTuesday() bool {
	if x != nil {
		return x.Tuesday
	}
	return false
}

func (x *Rule_OutBound_Time) GetWednesday() bool {
	if x != nil {
		return x.Wednesday
	}
	return false
}

func (x *Rule_OutBound_Time) GetThursday() bool {
	if x != nil {
		return x.Thursday
	}
	return false
}

func (x *Rule_OutBound_Time) GetFriday() bool {
	if x != nil {
		return x.Friday
	}
	return false
}

func (x *Rule_OutBound_Time) GetSaturday() bool {
	if x != nil {
		return x.Saturday
	}
	return false
}

func (x *Rule_OutBound_Time) GetSunday() bool {
	if x != nil {
		return x.Sunday
	}
	return false
}

type Rule_Nat_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Port   uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Rule_Nat_Source) Reset() {
	*x = Rule_Nat_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_Nat_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_Nat_Source) ProtoMessage() {}

func (x *Rule_Nat_Source) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_Nat_Source.ProtoReflect.Descriptor instead.
func (*Rule_Nat_Source) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{10, 2, 0}
}

func (x *Rule_Nat_Source) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Rule_Nat_Source) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Rule_Nat_Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Rule_Nat_Destination) Reset() {
	*x = Rule_Nat_Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_Nat_Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_Nat_Destination) ProtoMessage() {}

func (x *Rule_Nat_Destination) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_Nat_Destination.ProtoReflect.Descriptor instead.
func (*Rule_Nat_Destination) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{10, 2, 1}
}

func (x *Rule_Nat_Destination) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Rule_Nat_Destination) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type RouterStatusResponse_Ip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Route   string `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	Rule    string `protobuf:"bytes,3,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *RouterStatusResponse_Ip) Reset() {
	*x = RouterStatusResponse_Ip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ops_router_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterStatusResponse_Ip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterStatusResponse_Ip) ProtoMessage() {}

func (x *RouterStatusResponse_Ip) ProtoReflect() protoreflect.Message {
	mi := &file_ops_router_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterStatusResponse_Ip.ProtoReflect.Descriptor instead.
func (*RouterStatusResponse_Ip) Descriptor() ([]byte, []int) {
	return file_ops_router_proto_rawDescGZIP(), []int{11, 1}
}

func (x *RouterStatusResponse_Ip) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RouterStatusResponse_Ip) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *RouterStatusResponse_Ip) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

var File_ops_router_proto protoreflect.FileDescriptor

var file_ops_router_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6f, 0x70, 0x73, 0x2d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x63,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x60, 0x0a,
	0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6e, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x60, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x6d, 0x7a, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f,
	0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6d, 0x7a,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x60, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x57, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x6e, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x79, 0x0a, 0x07, 0x57, 0x61, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x36,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x36, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x64,
	0x0a, 0x17, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x17, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x61, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x17,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x02, 0x0a, 0x17, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xe8, 0x01,
	0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x32, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x03, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x6e,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x2e, 0x4e, 0x61, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x61, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xb0, 0x02, 0x0a, 0x04, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x2e, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x1a, 0x52, 0x0a, 0x05, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x0a, 0x0a, 0x04,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32,
	0x0a, 0x02, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x6e, 0x12, 0x35, 0x0a, 0x03, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x6e, 0x61, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70,
	0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x2e, 0x4e, 0x61, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x61, 0x74, 0x1a, 0x6f, 0x0a, 0x07, 0x49,
	0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x63, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xa1, 0x05, 0x0a,
	0x08, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f,
	0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x2e, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70,
	0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x2e, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70,
	0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x2e, 0x4f, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x69, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x3d,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x1a, 0x45, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52,
	0x04, 0x64, 0x6f, 0x77, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x75, 0x70, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x9a, 0x02, 0x0a, 0x04, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d,
	0x6f, 0x6e, 0x64, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x77, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x74, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x69,
	0x64, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x72, 0x69, 0x64, 0x61,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x75, 0x6e, 0x64, 0x61, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x1a, 0x89, 0x02, 0x0a, 0x03, 0x4e, 0x61, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x2e, 0x4e, 0x61, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4e, 0x61, 0x74, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x34, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x31, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x26, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x63, 0x6d, 0x70,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x63, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55,
	0x64, 0x70, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0xc9, 0x05, 0x0a, 0x14, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x03, 0x6c, 0x61, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6e, 0x52, 0x03, 0x6c, 0x61, 0x6e, 0x12, 0x29, 0x0a,
	0x03, 0x64, 0x6d, 0x7a, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6d, 0x7a, 0x52, 0x03, 0x64, 0x6d, 0x7a, 0x12, 0x29, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x52, 0x03,
	0x64, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x03, 0x77, 0x61, 0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6e, 0x52, 0x03, 0x77, 0x61, 0x6e, 0x12, 0x36,
	0x0a, 0x08, 0x77, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x77,
	0x61, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x61, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x70, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x18,
	0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12,
	0x31, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x48, 0x0a, 0x02, 0x49, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x61, 0x0a, 0x03, 0x4c,
	0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x61,
	0x0a, 0x03, 0x44, 0x6d, 0x7a, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xdf, 0x01, 0x0a, 0x03, 0x57, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x68, 0x63, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x48, 0x00, 0x52, 0x04, 0x64, 0x68, 0x63, 0x70, 0x12,
	0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x04, 0x0a,
	0x02, 0x69, 0x70, 0x22, 0x16, 0x0a, 0x04, 0x44, 0x68, 0x63, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x76,
	0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x76, 0x36, 0x22, 0x72, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6e, 0x73,
	0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x6e, 0x73, 0x31, 0x12, 0x17, 0x0a,
	0x04, 0x64, 0x6e, 0x73, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x6e, 0x73, 0x32, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x6e, 0x73, 0x32, 0x22,
	0x1b, 0x0a, 0x03, 0x44, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x45, 0x0a, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x75, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70,
	0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x03, 0x74, 0x74, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x2a, 0x0a, 0x12, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x22, 0x28, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x32, 0xfe, 0x08, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x06, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x05, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x44, 0x6e, 0x73, 0x12, 0x17,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6e, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6e, 0x12, 0x27, 0x2e, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x0a, 0x53, 0x65, 0x74, 0x57, 0x61, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1b, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x61, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x12, 0x27, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x44, 0x6d, 0x7a, 0x12, 0x27, 0x2e, 0x70, 0x61, 0x6c,
	0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x44, 0x6d, 0x7a, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x30, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x09, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f,
	0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2b,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x81, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x59,
	0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x07, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x26, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x46, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x5e, 0x0a, 0x30, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x61, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x78,
	0x69, 0x76, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e,
	0x6f, 0x70, 0x73, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a,
	0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x61, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x78, 0x69, 0x76, 0x2f, 0x70, 0x61, 0x6c, 0x6d, 0x2f, 0x6f, 0x70, 0x73, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ops_router_proto_rawDescOnce sync.Once
	file_ops_router_proto_rawDescData = file_ops_router_proto_rawDesc
)

func file_ops_router_proto_rawDescGZIP() []byte {
	file_ops_router_proto_rawDescOnce.Do(func() {
		file_ops_router_proto_rawDescData = protoimpl.X.CompressGZIP(file_ops_router_proto_rawDescData)
	})
	return file_ops_router_proto_rawDescData
}

var file_ops_router_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ops_router_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_ops_router_proto_goTypes = []interface{}{
	(Rule_Protocol)(0),                   // 0: palm.ops.router.v1.Rule.Protocol
	(*Contact)(nil),                      // 1: palm.ops.router.v1.Contact
	(*RouterSetLanRequest)(nil),          // 2: palm.ops.router.v1.RouterSetLanRequest
	(*RouterSetDmzRequest)(nil),          // 3: palm.ops.router.v1.RouterSetDmzRequest
	(*RouterSetWanRequest)(nil),          // 4: palm.ops.router.v1.RouterSetWanRequest
	(*WanPool)(nil),                      // 5: palm.ops.router.v1.WanPool
	(*RouterCreateUserRequest)(nil),      // 6: palm.ops.router.v1.RouterCreateUserRequest
	(*RouterIndexUserResponse)(nil),      // 7: palm.ops.router.v1.RouterIndexUserResponse
	(*RouterUpdateHostRequest)(nil),      // 8: palm.ops.router.v1.RouterUpdateHostRequest
	(*RouterIndexRuleResponse)(nil),      // 9: palm.ops.router.v1.RouterIndexRuleResponse
	(*Host)(nil),                         // 10: palm.ops.router.v1.Host
	(*Rule)(nil),                         // 11: palm.ops.router.v1.Rule
	(*RouterStatusResponse)(nil),         // 12: palm.ops.router.v1.RouterStatusResponse
	(*Lan)(nil),                          // 13: palm.ops.router.v1.Lan
	(*Dmz)(nil),                          // 14: palm.ops.router.v1.Dmz
	(*Wan)(nil),                          // 15: palm.ops.router.v1.Wan
	(*Dhcp)(nil),                         // 16: palm.ops.router.v1.Dhcp
	(*Static)(nil),                       // 17: palm.ops.router.v1.Static
	(*Dns)(nil),                          // 18: palm.ops.router.v1.Dns
	(*UserProfile)(nil),                  // 19: palm.ops.router.v1.UserProfile
	(*UserSignInRequest)(nil),            // 20: palm.ops.router.v1.UserSignInRequest
	(*UserSignInResponse)(nil),           // 21: palm.ops.router.v1.UserSignInResponse
	(*UserUpdateRequest)(nil),            // 22: palm.ops.router.v1.UserUpdateRequest
	(*UserLogsResponse)(nil),             // 23: palm.ops.router.v1.UserLogsResponse
	(*WanPool_Item)(nil),                 // 24: palm.ops.router.v1.WanPool.Item
	(*RouterIndexUserResponse_Item)(nil), // 25: palm.ops.router.v1.RouterIndexUserResponse.Item
	(*RouterIndexRuleResponse_Item)(nil), // 26: palm.ops.router.v1.RouterIndexRuleResponse.Item
	(*Host_Owner)(nil),                   // 27: palm.ops.router.v1.Host.Owner
	(*Rule_InBound)(nil),                 // 28: palm.ops.router.v1.Rule.InBound
	(*Rule_OutBound)(nil),                // 29: palm.ops.router.v1.Rule.OutBound
	(*Rule_Nat)(nil),                     // 30: palm.ops.router.v1.Rule.Nat
	(*Rule_OutBound_Host)(nil),           // 31: palm.ops.router.v1.Rule.OutBound.Host
	(*Rule_OutBound_Speed)(nil),          // 32: palm.ops.router.v1.Rule.OutBound.Speed
	(*Rule_OutBound_Time)(nil),           // 33: palm.ops.router.v1.Rule.OutBound.Time
	(*Rule_Nat_Source)(nil),              // 34: palm.ops.router.v1.Rule.Nat.Source
	(*Rule_Nat_Destination)(nil),         // 35: palm.ops.router.v1.Rule.Nat.Destination
	nil,                                  // 36: palm.ops.router.v1.RouterStatusResponse.InterfacesEntry
	(*RouterStatusResponse_Ip)(nil),      // 37: palm.ops.router.v1.RouterStatusResponse.Ip
	(*durationpb.Duration)(nil),          // 38: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),        // 39: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                // 40: google.protobuf.Empty
}
var file_ops_router_proto_depIdxs = []int32{
	13, // 0: palm.ops.router.v1.RouterSetLanRequest.payload:type_name -> palm.ops.router.v1.Lan
	14, // 1: palm.ops.router.v1.RouterSetDmzRequest.payload:type_name -> palm.ops.router.v1.Dmz
	15, // 2: palm.ops.router.v1.RouterSetWanRequest.payload:type_name -> palm.ops.router.v1.Wan
	24, // 3: palm.ops.router.v1.WanPool.items:type_name -> palm.ops.router.v1.WanPool.Item
	1,  // 4: palm.ops.router.v1.RouterCreateUserRequest.contact:type_name -> palm.ops.router.v1.Contact
	25, // 5: palm.ops.router.v1.RouterIndexUserResponse.items:type_name -> palm.ops.router.v1.RouterIndexUserResponse.Item
	26, // 6: palm.ops.router.v1.RouterIndexRuleResponse.items:type_name -> palm.ops.router.v1.RouterIndexRuleResponse.Item
	27, // 7: palm.ops.router.v1.Host.owner:type_name -> palm.ops.router.v1.Host.Owner
	28, // 8: palm.ops.router.v1.Rule.in:type_name -> palm.ops.router.v1.Rule.InBound
	29, // 9: palm.ops.router.v1.Rule.out:type_name -> palm.ops.router.v1.Rule.OutBound
	30, // 10: palm.ops.router.v1.Rule.nat:type_name -> palm.ops.router.v1.Rule.Nat
	36, // 11: palm.ops.router.v1.RouterStatusResponse.interfaces:type_name -> palm.ops.router.v1.RouterStatusResponse.InterfacesEntry
	13, // 12: palm.ops.router.v1.RouterStatusResponse.lan:type_name -> palm.ops.router.v1.Lan
	14, // 13: palm.ops.router.v1.RouterStatusResponse.dmz:type_name -> palm.ops.router.v1.Dmz
	18, // 14: palm.ops.router.v1.RouterStatusResponse.dns:type_name -> palm.ops.router.v1.Dns
	15, // 15: palm.ops.router.v1.RouterStatusResponse.wan:type_name -> palm.ops.router.v1.Wan
	5,  // 16: palm.ops.router.v1.RouterStatusResponse.wan_pool:type_name -> palm.ops.router.v1.WanPool
	11, // 17: palm.ops.router.v1.RouterStatusResponse.rules:type_name -> palm.ops.router.v1.Rule
	10, // 18: palm.ops.router.v1.RouterStatusResponse.hosts:type_name -> palm.ops.router.v1.Host
	37, // 19: palm.ops.router.v1.RouterStatusResponse.ip:type_name -> palm.ops.router.v1.RouterStatusResponse.Ip
	38, // 20: palm.ops.router.v1.RouterStatusResponse.uptime:type_name -> google.protobuf.Duration
	16, // 21: palm.ops.router.v1.Wan.dhcp:type_name -> palm.ops.router.v1.Dhcp
	17, // 22: palm.ops.router.v1.Wan.static:type_name -> palm.ops.router.v1.Static
	19, // 23: palm.ops.router.v1.UserSignInRequest.user:type_name -> palm.ops.router.v1.UserProfile
	38, // 24: palm.ops.router.v1.UserSignInRequest.ttl:type_name -> google.protobuf.Duration
	19, // 25: palm.ops.router.v1.UserUpdateRequest.current:type_name -> palm.ops.router.v1.UserProfile
	19, // 26: palm.ops.router.v1.UserUpdateRequest.new:type_name -> palm.ops.router.v1.UserProfile
	1,  // 27: palm.ops.router.v1.RouterIndexUserResponse.Item.contact:type_name -> palm.ops.router.v1.Contact
	28, // 28: palm.ops.router.v1.RouterIndexRuleResponse.Item.in:type_name -> palm.ops.router.v1.Rule.InBound
	29, // 29: palm.ops.router.v1.RouterIndexRuleResponse.Item.out:type_name -> palm.ops.router.v1.Rule.OutBound
	30, // 30: palm.ops.router.v1.RouterIndexRuleResponse.Item.nat:type_name -> palm.ops.router.v1.Rule.Nat
	1,  // 31: palm.ops.router.v1.Host.Owner.contact:type_name -> palm.ops.router.v1.Contact
	31, // 32: palm.ops.router.v1.Rule.OutBound.host:type_name -> palm.ops.router.v1.Rule.OutBound.Host
	32, // 33: palm.ops.router.v1.Rule.OutBound.speed:type_name -> palm.ops.router.v1.Rule.OutBound.Speed
	33, // 34: palm.ops.router.v1.Rule.OutBound.time:type_name -> palm.ops.router.v1.Rule.OutBound.Time
	34, // 35: palm.ops.router.v1.Rule.Nat.source:type_name -> palm.ops.router.v1.Rule.Nat.Source
	35, // 36: palm.ops.router.v1.Rule.Nat.destination:type_name -> palm.ops.router.v1.Rule.Nat.Destination
	0,  // 37: palm.ops.router.v1.Rule.OutBound.Host.protocol:type_name -> palm.ops.router.v1.Rule.Protocol
	39, // 38: palm.ops.router.v1.Rule.OutBound.Time.from:type_name -> google.protobuf.Timestamp
	39, // 39: palm.ops.router.v1.Rule.OutBound.Time.to:type_name -> google.protobuf.Timestamp
	40, // 40: palm.ops.router.v1.Router.Reboot:input_type -> google.protobuf.Empty
	40, // 41: palm.ops.router.v1.Router.Apply:input_type -> google.protobuf.Empty
	40, // 42: palm.ops.router.v1.Router.Status:input_type -> google.protobuf.Empty
	18, // 43: palm.ops.router.v1.Router.SetDns:input_type -> palm.ops.router.v1.Dns
	4,  // 44: palm.ops.router.v1.Router.SetWan:input_type -> palm.ops.router.v1.RouterSetWanRequest
	5,  // 45: palm.ops.router.v1.Router.SetWanPool:input_type -> palm.ops.router.v1.WanPool
	2,  // 46: palm.ops.router.v1.Router.SetLan:input_type -> palm.ops.router.v1.RouterSetLanRequest
	3,  // 47: palm.ops.router.v1.Router.SetDmz:input_type -> palm.ops.router.v1.RouterSetDmzRequest
	11, // 48: palm.ops.router.v1.Router.CreateRule:input_type -> palm.ops.router.v1.Rule
	26, // 49: palm.ops.router.v1.Router.UpdateRule:input_type -> palm.ops.router.v1.RouterIndexRuleResponse.Item
	40, // 50: palm.ops.router.v1.Router.IndexRule:input_type -> google.protobuf.Empty
	8,  // 51: palm.ops.router.v1.Router.UpdateHost:input_type -> palm.ops.router.v1.RouterUpdateHostRequest
	40, // 52: palm.ops.router.v1.Router.IndexUser:input_type -> google.protobuf.Empty
	25, // 53: palm.ops.router.v1.Router.UpdateUser:input_type -> palm.ops.router.v1.RouterIndexUserResponse.Item
	6,  // 54: palm.ops.router.v1.Router.CreateUser:input_type -> palm.ops.router.v1.RouterCreateUserRequest
	20, // 55: palm.ops.router.v1.User.SignIn:input_type -> palm.ops.router.v1.UserSignInRequest
	38, // 56: palm.ops.router.v1.User.Refresh:input_type -> google.protobuf.Duration
	22, // 57: palm.ops.router.v1.User.Update:input_type -> palm.ops.router.v1.UserUpdateRequest
	40, // 58: palm.ops.router.v1.User.SignOut:input_type -> google.protobuf.Empty
	40, // 59: palm.ops.router.v1.User.Logs:input_type -> google.protobuf.Empty
	40, // 60: palm.ops.router.v1.Router.Reboot:output_type -> google.protobuf.Empty
	40, // 61: palm.ops.router.v1.Router.Apply:output_type -> google.protobuf.Empty
	12, // 62: palm.ops.router.v1.Router.Status:output_type -> palm.ops.router.v1.RouterStatusResponse
	40, // 63: palm.ops.router.v1.Router.SetDns:output_type -> google.protobuf.Empty
	40, // 64: palm.ops.router.v1.Router.SetWan:output_type -> google.protobuf.Empty
	40, // 65: palm.ops.router.v1.Router.SetWanPool:output_type -> google.protobuf.Empty
	40, // 66: palm.ops.router.v1.Router.SetLan:output_type -> google.protobuf.Empty
	40, // 67: palm.ops.router.v1.Router.SetDmz:output_type -> google.protobuf.Empty
	40, // 68: palm.ops.router.v1.Router.CreateRule:output_type -> google.protobuf.Empty
	40, // 69: palm.ops.router.v1.Router.UpdateRule:output_type -> google.protobuf.Empty
	9,  // 70: palm.ops.router.v1.Router.IndexRule:output_type -> palm.ops.router.v1.RouterIndexRuleResponse
	40, // 71: palm.ops.router.v1.Router.UpdateHost:output_type -> google.protobuf.Empty
	7,  // 72: palm.ops.router.v1.Router.IndexUser:output_type -> palm.ops.router.v1.RouterIndexUserResponse
	40, // 73: palm.ops.router.v1.Router.UpdateUser:output_type -> google.protobuf.Empty
	40, // 74: palm.ops.router.v1.Router.CreateUser:output_type -> google.protobuf.Empty
	21, // 75: palm.ops.router.v1.User.SignIn:output_type -> palm.ops.router.v1.UserSignInResponse
	21, // 76: palm.ops.router.v1.User.Refresh:output_type -> palm.ops.router.v1.UserSignInResponse
	40, // 77: palm.ops.router.v1.User.Update:output_type -> google.protobuf.Empty
	40, // 78: palm.ops.router.v1.User.SignOut:output_type -> google.protobuf.Empty
	23, // 79: palm.ops.router.v1.User.Logs:output_type -> palm.ops.router.v1.UserLogsResponse
	60, // [60:80] is the sub-list for method output_type
	40, // [40:60] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_ops_router_proto_init() }
func file_ops_router_proto_init() {
	if File_ops_router_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ops_router_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterSetLanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterSetDmzRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterSetWanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WanPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterCreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterIndexUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterUpdateHostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterIndexRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dmz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dhcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Static); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSignInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSignInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WanPool_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterIndexUserResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterIndexRuleResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host_Owner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_InBound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_OutBound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_Nat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_OutBound_Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_OutBound_Speed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_OutBound_Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_Nat_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_Nat_Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ops_router_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterStatusResponse_Ip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ops_router_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_ops_router_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_ops_router_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_ops_router_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Rule_In)(nil),
		(*Rule_Out)(nil),
		(*Rule_Nat_)(nil),
	}
	file_ops_router_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*Wan_Dhcp)(nil),
		(*Wan_Static)(nil),
	}
	file_ops_router_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_ops_router_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*RouterIndexRuleResponse_Item_In)(nil),
		(*RouterIndexRuleResponse_Item_Out)(nil),
		(*RouterIndexRuleResponse_Item_Nat)(nil),
	}
	file_ops_router_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_ops_router_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*Rule_OutBound_Host_)(nil),
		(*Rule_OutBound_Speed_)(nil),
		(*Rule_OutBound_Time_)(nil),
	}
	file_ops_router_proto_msgTypes[31].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ops_router_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_ops_router_proto_goTypes,
		DependencyIndexes: file_ops_router_proto_depIdxs,
		EnumInfos:         file_ops_router_proto_enumTypes,
		MessageInfos:      file_ops_router_proto_msgTypes,
	}.Build()
	File_ops_router_proto = out.File
	file_ops_router_proto_rawDesc = nil
	file_ops_router_proto_goTypes = nil
	file_ops_router_proto_depIdxs = nil
}
