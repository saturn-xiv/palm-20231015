// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rbac.proto

#include "rbac.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace palm {
namespace rbac {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR CasbinSyncTask::CasbinSyncTask(
    ::_pbi::ConstantInitialized) {}
struct CasbinSyncTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CasbinSyncTaskDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CasbinSyncTaskDefaultTypeInternal() {}
  union {
    CasbinSyncTask _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CasbinSyncTaskDefaultTypeInternal _CasbinSyncTask_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UsersResponse_Item::UsersResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.real_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.email_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UsersResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UsersResponse_ItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UsersResponse_ItemDefaultTypeInternal() {}
  union {
    UsersResponse_Item _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UsersResponse_ItemDefaultTypeInternal _UsersResponse_Item_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UsersResponse::UsersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UsersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UsersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UsersResponseDefaultTypeInternal() {}
  union {
    UsersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UsersResponseDefaultTypeInternal _UsersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ResourcesResponse_Item::ResourcesResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ 0
} {}
struct ResourcesResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourcesResponse_ItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourcesResponse_ItemDefaultTypeInternal() {}
  union {
    ResourcesResponse_Item _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourcesResponse_ItemDefaultTypeInternal _ResourcesResponse_Item_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ResourcesResponse::ResourcesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourcesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourcesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourcesResponseDefaultTypeInternal() {}
  union {
    ResourcesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourcesResponseDefaultTypeInternal _ResourcesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OperationsResponse::OperationsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationsResponseDefaultTypeInternal() {}
  union {
    OperationsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationsResponseDefaultTypeInternal _OperationsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RolesResponse::RolesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RolesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RolesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RolesResponseDefaultTypeInternal() {}
  union {
    RolesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RolesResponseDefaultTypeInternal _RolesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UserRequest::UserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserRequestDefaultTypeInternal() {}
  union {
    UserRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserRequestDefaultTypeInternal _UserRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RoleRequest::RoleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleRequestDefaultTypeInternal() {}
  union {
    RoleRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleRequestDefaultTypeInternal _RoleRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UserRolesRequest::UserRolesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roles_)*/{}
  , /*decltype(_impl_.user_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserRolesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserRolesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserRolesRequestDefaultTypeInternal() {}
  union {
    UserRolesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserRolesRequestDefaultTypeInternal _UserRolesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UserPermissionsRequest::UserPermissionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.permissions_)*/{}
  , /*decltype(_impl_.user_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserPermissionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserPermissionsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserPermissionsRequestDefaultTypeInternal() {}
  union {
    UserPermissionsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserPermissionsRequestDefaultTypeInternal _UserPermissionsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RolePermissionsRequest::RolePermissionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.permissions_)*/{}
  , /*decltype(_impl_.role_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RolePermissionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RolePermissionsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RolePermissionsRequestDefaultTypeInternal() {}
  union {
    RolePermissionsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RolePermissionsRequestDefaultTypeInternal _RolePermissionsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PermissionsResponse_Item::PermissionsResponse_Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operation_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.resource_)*/nullptr} {}
struct PermissionsResponse_ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PermissionsResponse_ItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PermissionsResponse_ItemDefaultTypeInternal() {}
  union {
    PermissionsResponse_Item _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PermissionsResponse_ItemDefaultTypeInternal _PermissionsResponse_Item_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PermissionsResponse::PermissionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PermissionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PermissionsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PermissionsResponseDefaultTypeInternal() {}
  union {
    PermissionsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PermissionsResponseDefaultTypeInternal _PermissionsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HasRoleForUserRequest::HasRoleForUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.role_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HasRoleForUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HasRoleForUserRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HasRoleForUserRequestDefaultTypeInternal() {}
  union {
    HasRoleForUserRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HasRoleForUserRequestDefaultTypeInternal _HasRoleForUserRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HasPermissionForUserRequest::HasPermissionForUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operation_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_.user_)*/ 0
} {}
struct HasPermissionForUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HasPermissionForUserRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HasPermissionForUserRequestDefaultTypeInternal() {}
  union {
    HasPermissionForUserRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HasPermissionForUserRequestDefaultTypeInternal _HasPermissionForUserRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpdatePermissionsForUserRequest::UpdatePermissionsForUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.removed_)*/{}
  , /*decltype(_impl_.saved_)*/{}
  , /*decltype(_impl_.user_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdatePermissionsForUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdatePermissionsForUserRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdatePermissionsForUserRequestDefaultTypeInternal() {}
  union {
    UpdatePermissionsForUserRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdatePermissionsForUserRequestDefaultTypeInternal _UpdatePermissionsForUserRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpdatePermissionsForRoleRequest::UpdatePermissionsForRoleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.removed_)*/{}
  , /*decltype(_impl_.saved_)*/{}
  , /*decltype(_impl_.role_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdatePermissionsForRoleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdatePermissionsForRoleRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdatePermissionsForRoleRequestDefaultTypeInternal() {}
  union {
    UpdatePermissionsForRoleRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdatePermissionsForRoleRequestDefaultTypeInternal _UpdatePermissionsForRoleRequest_default_instance_;
}  // namespace v1
}  // namespace rbac
}  // namespace palm
static ::_pb::Metadata file_level_metadata_rbac_2eproto[18];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_rbac_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_rbac_2eproto = nullptr;
const ::uint32_t TableStruct_rbac_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::CasbinSyncTask, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UsersResponse_Item, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UsersResponse_Item, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UsersResponse_Item, _impl_.nickname_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UsersResponse_Item, _impl_.real_name_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UsersResponse_Item, _impl_.email_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UsersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UsersResponse, _impl_.items_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::ResourcesResponse_Item, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::ResourcesResponse_Item, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::ResourcesResponse_Item, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::ResourcesResponse_Item, _impl_.id_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::ResourcesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::ResourcesResponse, _impl_.items_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::OperationsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::OperationsResponse, _impl_.items_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::RolesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::RolesResponse, _impl_.items_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UserRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UserRequest, _impl_.id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::RoleRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::RoleRequest, _impl_.code_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UserRolesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UserRolesRequest, _impl_.user_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UserRolesRequest, _impl_.roles_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UserPermissionsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UserPermissionsRequest, _impl_.user_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UserPermissionsRequest, _impl_.permissions_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::RolePermissionsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::RolePermissionsRequest, _impl_.role_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::RolePermissionsRequest, _impl_.permissions_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::PermissionsResponse_Item, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::PermissionsResponse_Item, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::PermissionsResponse_Item, _impl_.operation_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::PermissionsResponse_Item, _impl_.resource_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::PermissionsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::PermissionsResponse, _impl_.items_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::HasRoleForUserRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::HasRoleForUserRequest, _impl_.user_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::HasRoleForUserRequest, _impl_.role_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::HasPermissionForUserRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::HasPermissionForUserRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::HasPermissionForUserRequest, _impl_.user_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::HasPermissionForUserRequest, _impl_.operation_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::HasPermissionForUserRequest, _impl_.resource_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UpdatePermissionsForUserRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UpdatePermissionsForUserRequest, _impl_.user_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UpdatePermissionsForUserRequest, _impl_.removed_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UpdatePermissionsForUserRequest, _impl_.saved_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UpdatePermissionsForRoleRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UpdatePermissionsForRoleRequest, _impl_.role_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UpdatePermissionsForRoleRequest, _impl_.removed_),
    PROTOBUF_FIELD_OFFSET(::palm::rbac::v1::UpdatePermissionsForRoleRequest, _impl_.saved_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::palm::rbac::v1::CasbinSyncTask)},
        { 8, -1, -1, sizeof(::palm::rbac::v1::UsersResponse_Item)},
        { 20, -1, -1, sizeof(::palm::rbac::v1::UsersResponse)},
        { 29, 39, -1, sizeof(::palm::rbac::v1::ResourcesResponse_Item)},
        { 41, -1, -1, sizeof(::palm::rbac::v1::ResourcesResponse)},
        { 50, -1, -1, sizeof(::palm::rbac::v1::OperationsResponse)},
        { 59, -1, -1, sizeof(::palm::rbac::v1::RolesResponse)},
        { 68, -1, -1, sizeof(::palm::rbac::v1::UserRequest)},
        { 77, -1, -1, sizeof(::palm::rbac::v1::RoleRequest)},
        { 86, -1, -1, sizeof(::palm::rbac::v1::UserRolesRequest)},
        { 96, -1, -1, sizeof(::palm::rbac::v1::UserPermissionsRequest)},
        { 106, -1, -1, sizeof(::palm::rbac::v1::RolePermissionsRequest)},
        { 116, 126, -1, sizeof(::palm::rbac::v1::PermissionsResponse_Item)},
        { 128, -1, -1, sizeof(::palm::rbac::v1::PermissionsResponse)},
        { 137, -1, -1, sizeof(::palm::rbac::v1::HasRoleForUserRequest)},
        { 147, 158, -1, sizeof(::palm::rbac::v1::HasPermissionForUserRequest)},
        { 161, -1, -1, sizeof(::palm::rbac::v1::UpdatePermissionsForUserRequest)},
        { 172, -1, -1, sizeof(::palm::rbac::v1::UpdatePermissionsForRoleRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::palm::rbac::v1::_CasbinSyncTask_default_instance_._instance,
    &::palm::rbac::v1::_UsersResponse_Item_default_instance_._instance,
    &::palm::rbac::v1::_UsersResponse_default_instance_._instance,
    &::palm::rbac::v1::_ResourcesResponse_Item_default_instance_._instance,
    &::palm::rbac::v1::_ResourcesResponse_default_instance_._instance,
    &::palm::rbac::v1::_OperationsResponse_default_instance_._instance,
    &::palm::rbac::v1::_RolesResponse_default_instance_._instance,
    &::palm::rbac::v1::_UserRequest_default_instance_._instance,
    &::palm::rbac::v1::_RoleRequest_default_instance_._instance,
    &::palm::rbac::v1::_UserRolesRequest_default_instance_._instance,
    &::palm::rbac::v1::_UserPermissionsRequest_default_instance_._instance,
    &::palm::rbac::v1::_RolePermissionsRequest_default_instance_._instance,
    &::palm::rbac::v1::_PermissionsResponse_Item_default_instance_._instance,
    &::palm::rbac::v1::_PermissionsResponse_default_instance_._instance,
    &::palm::rbac::v1::_HasRoleForUserRequest_default_instance_._instance,
    &::palm::rbac::v1::_HasPermissionForUserRequest_default_instance_._instance,
    &::palm::rbac::v1::_UpdatePermissionsForUserRequest_default_instance_._instance,
    &::palm::rbac::v1::_UpdatePermissionsForRoleRequest_default_instance_._instance,
};
const char descriptor_table_protodef_rbac_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nrbac.proto\022\014palm.rbac.v1\032\033google/proto"
    "buf/empty.proto\"\020\n\016CasbinSyncTask\"\210\001\n\rUs"
    "ersResponse\022/\n\005items\030\001 \003(\0132 .palm.rbac.v"
    "1.UsersResponse.Item\032F\n\004Item\022\n\n\002id\030\001 \001(\005"
    "\022\020\n\010nickname\030\002 \001(\t\022\021\n\treal_name\030\003 \001(\t\022\r\n"
    "\005email\030\004 \001(\t\"v\n\021ResourcesResponse\0223\n\005ite"
    "ms\030\001 \003(\0132$.palm.rbac.v1.ResourcesRespons"
    "e.Item\032,\n\004Item\022\014\n\004type\030\001 \001(\t\022\017\n\002id\030\002 \001(\005"
    "H\000\210\001\001B\005\n\003_id\"#\n\022OperationsResponse\022\r\n\005it"
    "ems\030\001 \003(\t\"\036\n\rRolesResponse\022\r\n\005items\030\001 \003("
    "\t\"\031\n\013UserRequest\022\n\n\002id\030\001 \001(\005\"\033\n\013RoleRequ"
    "est\022\014\n\004code\030\001 \001(\t\"/\n\020UserRolesRequest\022\014\n"
    "\004user\030\001 \001(\005\022\r\n\005roles\030\002 \003(\t\"c\n\026UserPermis"
    "sionsRequest\022\014\n\004user\030\001 \001(\005\022;\n\013permission"
    "s\030\002 \003(\0132&.palm.rbac.v1.PermissionsRespon"
    "se.Item\"c\n\026RolePermissionsRequest\022\014\n\004rol"
    "e\030\001 \001(\t\022;\n\013permissions\030\002 \003(\0132&.palm.rbac"
    ".v1.PermissionsResponse.Item\"\237\001\n\023Permiss"
    "ionsResponse\0225\n\005items\030\001 \003(\0132&.palm.rbac."
    "v1.PermissionsResponse.Item\032Q\n\004Item\022\021\n\to"
    "peration\030\001 \001(\t\0226\n\010resource\030\002 \001(\0132$.palm."
    "rbac.v1.ResourcesResponse.Item\"3\n\025HasRol"
    "eForUserRequest\022\014\n\004user\030\001 \001(\005\022\014\n\004role\030\002 "
    "\001(\t\"v\n\033HasPermissionForUserRequest\022\014\n\004us"
    "er\030\001 \001(\005\022\021\n\toperation\030\002 \001(\t\0226\n\010resource\030"
    "\003 \001(\0132$.palm.rbac.v1.ResourcesResponse.I"
    "tem\"\237\001\n\037UpdatePermissionsForUserRequest\022"
    "\014\n\004user\030\001 \001(\005\0227\n\007removed\030\002 \003(\0132&.palm.rb"
    "ac.v1.PermissionsResponse.Item\0225\n\005saved\030"
    "\003 \003(\0132&.palm.rbac.v1.PermissionsResponse"
    ".Item\"\237\001\n\037UpdatePermissionsForRoleReques"
    "t\022\014\n\004role\030\001 \001(\t\0227\n\007removed\030\002 \003(\0132&.palm."
    "rbac.v1.PermissionsResponse.Item\0225\n\005save"
    "d\030\003 \003(\0132&.palm.rbac.v1.PermissionsRespon"
    "se.Item2\271\016\n\006Policy\022D\n\013GetAllUsers\022\026.goog"
    "le.protobuf.Empty\032\033.palm.rbac.v1.UsersRe"
    "sponse\"\000\022L\n\017GetAllResources\022\026.google.pro"
    "tobuf.Empty\032\037.palm.rbac.v1.ResourcesResp"
    "onse\"\000\022N\n\020GetAllOperations\022\026.google.prot"
    "obuf.Empty\032 .palm.rbac.v1.OperationsResp"
    "onse\"\000\022D\n\013GetAllRoles\022\026.google.protobuf."
    "Empty\032\033.palm.rbac.v1.RolesResponse\"\000\022K\n\017"
    "GetRolesForUser\022\031.palm.rbac.v1.UserReque"
    "st\032\033.palm.rbac.v1.RolesResponse\"\000\022S\n\027Get"
    "ImplicitRolesForUser\022\031.palm.rbac.v1.User"
    "Request\032\033.palm.rbac.v1.RolesResponse\"\000\022K"
    "\n\017GetUsersForRole\022\031.palm.rbac.v1.RoleReq"
    "uest\032\033.palm.rbac.v1.UsersResponse\"\000\022N\n\022D"
    "eleteRolesForUser\022\036.palm.rbac.v1.UserRol"
    "esRequest\032\026.google.protobuf.Empty\"\000\022K\n\017A"
    "ddRolesForUser\022\036.palm.rbac.v1.UserRolesR"
    "equest\032\026.google.protobuf.Empty\"\000\022A\n\nDele"
    "teUser\022\031.palm.rbac.v1.UserRequest\032\026.goog"
    "le.protobuf.Empty\"\000\022A\n\nDeleteRole\022\031.palm"
    ".rbac.v1.RoleRequest\032\026.google.protobuf.E"
    "mpty\"\000\022W\n\025AddPermissionsForRole\022$.palm.r"
    "bac.v1.RolePermissionsRequest\032\026.google.p"
    "rotobuf.Empty\"\000\022Z\n\030DeletePermissionsForR"
    "ole\022$.palm.rbac.v1.RolePermissionsReques"
    "t\032\026.google.protobuf.Empty\"\000\022W\n\025AddPermis"
    "sionsForUser\022$.palm.rbac.v1.UserPermissi"
    "onsRequest\032\026.google.protobuf.Empty\"\000\022Z\n\030"
    "DeletePermissionsForUser\022$.palm.rbac.v1."
    "UserPermissionsRequest\032\026.google.protobuf"
    ".Empty\"\000\022W\n\025GetPermissionsForUser\022\031.palm"
    ".rbac.v1.UserRequest\032!.palm.rbac.v1.Perm"
    "issionsResponse\"\000\022W\n\025GetPermissionsForRo"
    "le\022\031.palm.rbac.v1.RoleRequest\032!.palm.rba"
    "c.v1.PermissionsResponse\"\000\022_\n\035GetImplici"
    "tPermissionsForUser\022\031.palm.rbac.v1.UserR"
    "equest\032!.palm.rbac.v1.PermissionsRespons"
    "e\"\000\022O\n\016HasRoleForUser\022#.palm.rbac.v1.Has"
    "RoleForUserRequest\032\026.google.protobuf.Emp"
    "ty\"\000\022[\n\024HasPermissionForUser\022).palm.rbac"
    ".v1.HasPermissionForUserRequest\032\026.google"
    ".protobuf.Empty\"\000\022c\n\030UpdatePermissionsFo"
    "rRole\022-.palm.rbac.v1.UpdatePermissionsFo"
    "rRoleRequest\032\026.google.protobuf.Empty\"\000\022c"
    "\n\030UpdatePermissionsForUser\022-.palm.rbac.v"
    "1.UpdatePermissionsForUserRequest\032\026.goog"
    "le.protobuf.Empty\"\000B.\n*com.github.saturn"
    "_xiv.palm.plugins.rbac.v1P\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_rbac_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_rbac_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rbac_2eproto = {
    false,
    false,
    3275,
    descriptor_table_protodef_rbac_2eproto,
    "rbac.proto",
    &descriptor_table_rbac_2eproto_once,
    descriptor_table_rbac_2eproto_deps,
    1,
    18,
    schemas,
    file_default_instances,
    TableStruct_rbac_2eproto::offsets,
    file_level_metadata_rbac_2eproto,
    file_level_enum_descriptors_rbac_2eproto,
    file_level_service_descriptors_rbac_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rbac_2eproto_getter() {
  return &descriptor_table_rbac_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rbac_2eproto(&descriptor_table_rbac_2eproto);
namespace palm {
namespace rbac {
namespace v1 {
// ===================================================================

class CasbinSyncTask::_Internal {
 public:
};

CasbinSyncTask::CasbinSyncTask(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.CasbinSyncTask)
}
CasbinSyncTask::CasbinSyncTask(const CasbinSyncTask& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CasbinSyncTask* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.CasbinSyncTask)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CasbinSyncTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CasbinSyncTask::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CasbinSyncTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[0]);
}
// ===================================================================

class UsersResponse_Item::_Internal {
 public:
};

UsersResponse_Item::UsersResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.UsersResponse.Item)
}
UsersResponse_Item::UsersResponse_Item(const UsersResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UsersResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_) {}

    , decltype(_impl_.real_name_) {}

    , decltype(_impl_.email_) {}

    , decltype(_impl_.id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), _this->GetArenaForAllocation());
  }
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_real_name().empty()) {
    _this->_impl_.real_name_.Set(from._internal_real_name(), _this->GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.email_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _this->_impl_.email_.Set(from._internal_email(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.UsersResponse.Item)
}

inline void UsersResponse_Item::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_) {}

    , decltype(_impl_.real_name_) {}

    , decltype(_impl_.email_) {}

    , decltype(_impl_.id_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.real_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.real_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.email_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UsersResponse_Item::~UsersResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.UsersResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UsersResponse_Item::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
  _impl_.real_name_.Destroy();
  _impl_.email_.Destroy();
}

void UsersResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UsersResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.UsersResponse.Item)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _impl_.real_name_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsersResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.UsersResponse.Item.nickname"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string real_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_real_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.UsersResponse.Item.real_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string email = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.UsersResponse.Item.email"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UsersResponse_Item::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.UsersResponse.Item)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_id(), target);
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    const std::string& _s = this->_internal_nickname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.rbac.v1.UsersResponse.Item.nickname");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string real_name = 3;
  if (!this->_internal_real_name().empty()) {
    const std::string& _s = this->_internal_real_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.rbac.v1.UsersResponse.Item.real_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string email = 4;
  if (!this->_internal_email().empty()) {
    const std::string& _s = this->_internal_email();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.rbac.v1.UsersResponse.Item.email");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.UsersResponse.Item)
  return target;
}

::size_t UsersResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.UsersResponse.Item)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_nickname());
  }

  // string real_name = 3;
  if (!this->_internal_real_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_real_name());
  }

  // string email = 4;
  if (!this->_internal_email().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_email());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UsersResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UsersResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UsersResponse_Item::GetClassData() const { return &_class_data_; }


void UsersResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UsersResponse_Item*>(&to_msg);
  auto& from = static_cast<const UsersResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.UsersResponse.Item)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_real_name().empty()) {
    _this->_internal_set_real_name(from._internal_real_name());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UsersResponse_Item::CopyFrom(const UsersResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.UsersResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsersResponse_Item::IsInitialized() const {
  return true;
}

void UsersResponse_Item::InternalSwap(UsersResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nickname_, lhs_arena,
                                       &other->_impl_.nickname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.real_name_, lhs_arena,
                                       &other->_impl_.real_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_, lhs_arena,
                                       &other->_impl_.email_, rhs_arena);

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UsersResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[1]);
}
// ===================================================================

class UsersResponse::_Internal {
 public:
};

UsersResponse::UsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.UsersResponse)
}
UsersResponse::UsersResponse(const UsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UsersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.UsersResponse)
}

inline void UsersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UsersResponse::~UsersResponse() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.UsersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UsersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_items()->~RepeatedPtrField();
}

void UsersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.UsersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_items()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.rbac.v1.UsersResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UsersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.UsersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.rbac.v1.UsersResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.UsersResponse)
  return target;
}

::size_t UsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.UsersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.rbac.v1.UsersResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_internal_items()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UsersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UsersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UsersResponse::GetClassData() const { return &_class_data_; }


void UsersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UsersResponse*>(&to_msg);
  auto& from = static_cast<const UsersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.UsersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(from._internal_items());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UsersResponse::CopyFrom(const UsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.UsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsersResponse::IsInitialized() const {
  return true;
}

void UsersResponse::InternalSwap(UsersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_items()->InternalSwap(other->_internal_mutable_items());
}

::PROTOBUF_NAMESPACE_ID::Metadata UsersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[2]);
}
// ===================================================================

class ResourcesResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourcesResponse_Item>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ResourcesResponse_Item, _impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResourcesResponse_Item::ResourcesResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.ResourcesResponse.Item)
}
ResourcesResponse_Item::ResourcesResponse_Item(const ResourcesResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourcesResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_) {}

    , decltype(_impl_.id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.ResourcesResponse.Item)
}

inline void ResourcesResponse_Item::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_) {}

    , decltype(_impl_.id_) { 0 }

  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResourcesResponse_Item::~ResourcesResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.ResourcesResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourcesResponse_Item::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
}

void ResourcesResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourcesResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.ResourcesResponse.Item)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourcesResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.ResourcesResponse.Item.type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ResourcesResponse_Item::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.ResourcesResponse.Item)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.rbac.v1.ResourcesResponse.Item.type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.ResourcesResponse.Item)
  return target;
}

::size_t ResourcesResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.ResourcesResponse.Item)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // optional int32 id = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourcesResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourcesResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourcesResponse_Item::GetClassData() const { return &_class_data_; }


void ResourcesResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourcesResponse_Item*>(&to_msg);
  auto& from = static_cast<const ResourcesResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.ResourcesResponse.Item)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourcesResponse_Item::CopyFrom(const ResourcesResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.ResourcesResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourcesResponse_Item::IsInitialized() const {
  return true;
}

void ResourcesResponse_Item::InternalSwap(ResourcesResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourcesResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[3]);
}
// ===================================================================

class ResourcesResponse::_Internal {
 public:
};

ResourcesResponse::ResourcesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.ResourcesResponse)
}
ResourcesResponse::ResourcesResponse(const ResourcesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourcesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.ResourcesResponse)
}

inline void ResourcesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResourcesResponse::~ResourcesResponse() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.ResourcesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourcesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_items()->~RepeatedPtrField();
}

void ResourcesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourcesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.ResourcesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_items()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourcesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.rbac.v1.ResourcesResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ResourcesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.ResourcesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.rbac.v1.ResourcesResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.ResourcesResponse)
  return target;
}

::size_t ResourcesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.ResourcesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.rbac.v1.ResourcesResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_internal_items()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourcesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourcesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourcesResponse::GetClassData() const { return &_class_data_; }


void ResourcesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourcesResponse*>(&to_msg);
  auto& from = static_cast<const ResourcesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.ResourcesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(from._internal_items());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourcesResponse::CopyFrom(const ResourcesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.ResourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourcesResponse::IsInitialized() const {
  return true;
}

void ResourcesResponse::InternalSwap(ResourcesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_items()->InternalSwap(other->_internal_mutable_items());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourcesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[4]);
}
// ===================================================================

class OperationsResponse::_Internal {
 public:
};

OperationsResponse::OperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.OperationsResponse)
}
OperationsResponse::OperationsResponse(const OperationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.OperationsResponse)
}

inline void OperationsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OperationsResponse::~OperationsResponse() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.OperationsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_items()->~RepeatedPtrField();
}

void OperationsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.OperationsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_items()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_items();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.OperationsResponse.items"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OperationsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.OperationsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string items = 1;
  for (int i = 0, n = this->_internal_items_size(); i < n; ++i) {
    const auto& s = this->_internal_items(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.rbac.v1.OperationsResponse.items");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.OperationsResponse)
  return target;
}

::size_t OperationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.OperationsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string items = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_items().size());
  for (int i = 0, n = _internal_items().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_items().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationsResponse::GetClassData() const { return &_class_data_; }


void OperationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationsResponse*>(&to_msg);
  auto& from = static_cast<const OperationsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.OperationsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(from._internal_items());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationsResponse::CopyFrom(const OperationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.OperationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationsResponse::IsInitialized() const {
  return true;
}

void OperationsResponse::InternalSwap(OperationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_items()->InternalSwap(
      other->_internal_mutable_items());
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[5]);
}
// ===================================================================

class RolesResponse::_Internal {
 public:
};

RolesResponse::RolesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.RolesResponse)
}
RolesResponse::RolesResponse(const RolesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RolesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.RolesResponse)
}

inline void RolesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RolesResponse::~RolesResponse() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.RolesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RolesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_items()->~RepeatedPtrField();
}

void RolesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RolesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.RolesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_items()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RolesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_items();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.RolesResponse.items"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RolesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.RolesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string items = 1;
  for (int i = 0, n = this->_internal_items_size(); i < n; ++i) {
    const auto& s = this->_internal_items(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.rbac.v1.RolesResponse.items");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.RolesResponse)
  return target;
}

::size_t RolesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.RolesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string items = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_items().size());
  for (int i = 0, n = _internal_items().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_items().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RolesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RolesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RolesResponse::GetClassData() const { return &_class_data_; }


void RolesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RolesResponse*>(&to_msg);
  auto& from = static_cast<const RolesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.RolesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(from._internal_items());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RolesResponse::CopyFrom(const RolesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.RolesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolesResponse::IsInitialized() const {
  return true;
}

void RolesResponse::InternalSwap(RolesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_items()->InternalSwap(
      other->_internal_mutable_items());
}

::PROTOBUF_NAMESPACE_ID::Metadata RolesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[6]);
}
// ===================================================================

class UserRequest::_Internal {
 public:
};

UserRequest::UserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.UserRequest)
}
UserRequest::UserRequest(const UserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.UserRequest)
}

inline void UserRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserRequest::~UserRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.UserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.UserRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UserRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.UserRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.UserRequest)
  return target;
}

::size_t UserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.UserRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserRequest::GetClassData() const { return &_class_data_; }


void UserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserRequest*>(&to_msg);
  auto& from = static_cast<const UserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.UserRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserRequest::CopyFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.UserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequest::IsInitialized() const {
  return true;
}

void UserRequest::InternalSwap(UserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[7]);
}
// ===================================================================

class RoleRequest::_Internal {
 public:
};

RoleRequest::RoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.RoleRequest)
}
RoleRequest::RoleRequest(const RoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.RoleRequest)
}

inline void RoleRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.code_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleRequest::~RoleRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.RoleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void RoleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.RoleRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.RoleRequest.code"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RoleRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.RoleRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    const std::string& _s = this->_internal_code();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.rbac.v1.RoleRequest.code");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.RoleRequest)
  return target;
}

::size_t RoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.RoleRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleRequest::GetClassData() const { return &_class_data_; }


void RoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleRequest*>(&to_msg);
  auto& from = static_cast<const RoleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.RoleRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleRequest::CopyFrom(const RoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.RoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleRequest::IsInitialized() const {
  return true;
}

void RoleRequest::InternalSwap(RoleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_, lhs_arena,
                                       &other->_impl_.code_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[8]);
}
// ===================================================================

class UserRolesRequest::_Internal {
 public:
};

UserRolesRequest::UserRolesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.UserRolesRequest)
}
UserRolesRequest::UserRolesRequest(const UserRolesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserRolesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){from._impl_.roles_}
    , decltype(_impl_.user_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.UserRolesRequest)
}

inline void UserRolesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.roles_){arena}
    , decltype(_impl_.user_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserRolesRequest::~UserRolesRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.UserRolesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserRolesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_roles()->~RepeatedPtrField();
}

void UserRolesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserRolesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.UserRolesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_roles()->Clear();
  _impl_.user_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserRolesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string roles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_roles();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.UserRolesRequest.roles"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UserRolesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.UserRolesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_user(), target);
  }

  // repeated string roles = 2;
  for (int i = 0, n = this->_internal_roles_size(); i < n; ++i) {
    const auto& s = this->_internal_roles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.rbac.v1.UserRolesRequest.roles");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.UserRolesRequest)
  return target;
}

::size_t UserRolesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.UserRolesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roles = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_roles().size());
  for (int i = 0, n = _internal_roles().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_roles().Get(i));
  }

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserRolesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserRolesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserRolesRequest::GetClassData() const { return &_class_data_; }


void UserRolesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserRolesRequest*>(&to_msg);
  auto& from = static_cast<const UserRolesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.UserRolesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_roles()->MergeFrom(from._internal_roles());
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserRolesRequest::CopyFrom(const UserRolesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.UserRolesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRolesRequest::IsInitialized() const {
  return true;
}

void UserRolesRequest::InternalSwap(UserRolesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_roles()->InternalSwap(
      other->_internal_mutable_roles());

  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRolesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[9]);
}
// ===================================================================

class UserPermissionsRequest::_Internal {
 public:
};

UserPermissionsRequest::UserPermissionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.UserPermissionsRequest)
}
UserPermissionsRequest::UserPermissionsRequest(const UserPermissionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserPermissionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.permissions_){from._impl_.permissions_}
    , decltype(_impl_.user_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.UserPermissionsRequest)
}

inline void UserPermissionsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.permissions_){arena}
    , decltype(_impl_.user_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserPermissionsRequest::~UserPermissionsRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.UserPermissionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserPermissionsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_permissions()->~RepeatedPtrField();
}

void UserPermissionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserPermissionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.UserPermissionsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_permissions()->Clear();
  _impl_.user_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserPermissionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .palm.rbac.v1.PermissionsResponse.Item permissions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UserPermissionsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.UserPermissionsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_user(), target);
  }

  // repeated .palm.rbac.v1.PermissionsResponse.Item permissions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_permissions_size()); i < n; i++) {
    const auto& repfield = this->_internal_permissions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.UserPermissionsRequest)
  return target;
}

::size_t UserPermissionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.UserPermissionsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.rbac.v1.PermissionsResponse.Item permissions = 2;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->_internal_permissions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserPermissionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserPermissionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserPermissionsRequest::GetClassData() const { return &_class_data_; }


void UserPermissionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserPermissionsRequest*>(&to_msg);
  auto& from = static_cast<const UserPermissionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.UserPermissionsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_permissions()->MergeFrom(from._internal_permissions());
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserPermissionsRequest::CopyFrom(const UserPermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.UserPermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPermissionsRequest::IsInitialized() const {
  return true;
}

void UserPermissionsRequest::InternalSwap(UserPermissionsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_permissions()->InternalSwap(other->_internal_mutable_permissions());

  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserPermissionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[10]);
}
// ===================================================================

class RolePermissionsRequest::_Internal {
 public:
};

RolePermissionsRequest::RolePermissionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.RolePermissionsRequest)
}
RolePermissionsRequest::RolePermissionsRequest(const RolePermissionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RolePermissionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.permissions_){from._impl_.permissions_}
    , decltype(_impl_.role_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.role_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    _this->_impl_.role_.Set(from._internal_role(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.RolePermissionsRequest)
}

inline void RolePermissionsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.permissions_){arena}
    , decltype(_impl_.role_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.role_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RolePermissionsRequest::~RolePermissionsRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.RolePermissionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RolePermissionsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_permissions()->~RepeatedPtrField();
  _impl_.role_.Destroy();
}

void RolePermissionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RolePermissionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.RolePermissionsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_permissions()->Clear();
  _impl_.role_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RolePermissionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.RolePermissionsRequest.role"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .palm.rbac.v1.PermissionsResponse.Item permissions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RolePermissionsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.RolePermissionsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string role = 1;
  if (!this->_internal_role().empty()) {
    const std::string& _s = this->_internal_role();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.rbac.v1.RolePermissionsRequest.role");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .palm.rbac.v1.PermissionsResponse.Item permissions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_permissions_size()); i < n; i++) {
    const auto& repfield = this->_internal_permissions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.RolePermissionsRequest)
  return target;
}

::size_t RolePermissionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.RolePermissionsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.rbac.v1.PermissionsResponse.Item permissions = 2;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->_internal_permissions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string role = 1;
  if (!this->_internal_role().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RolePermissionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RolePermissionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RolePermissionsRequest::GetClassData() const { return &_class_data_; }


void RolePermissionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RolePermissionsRequest*>(&to_msg);
  auto& from = static_cast<const RolePermissionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.RolePermissionsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_permissions()->MergeFrom(from._internal_permissions());
  if (!from._internal_role().empty()) {
    _this->_internal_set_role(from._internal_role());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RolePermissionsRequest::CopyFrom(const RolePermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.RolePermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolePermissionsRequest::IsInitialized() const {
  return true;
}

void RolePermissionsRequest::InternalSwap(RolePermissionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_permissions()->InternalSwap(other->_internal_mutable_permissions());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.role_, lhs_arena,
                                       &other->_impl_.role_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RolePermissionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[11]);
}
// ===================================================================

class PermissionsResponse_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<PermissionsResponse_Item>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PermissionsResponse_Item, _impl_._has_bits_);
  static const ::palm::rbac::v1::ResourcesResponse_Item& resource(const PermissionsResponse_Item* msg);
  static void set_has_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::palm::rbac::v1::ResourcesResponse_Item&
PermissionsResponse_Item::_Internal::resource(const PermissionsResponse_Item* msg) {
  return *msg->_impl_.resource_;
}
PermissionsResponse_Item::PermissionsResponse_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.PermissionsResponse.Item)
}
PermissionsResponse_Item::PermissionsResponse_Item(const PermissionsResponse_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PermissionsResponse_Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_) {}

    , decltype(_impl_.resource_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation().empty()) {
    _this->_impl_.operation_.Set(from._internal_operation(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.resource_ = new ::palm::rbac::v1::ResourcesResponse_Item(*from._impl_.resource_);
  }
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.PermissionsResponse.Item)
}

inline void PermissionsResponse_Item::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_) {}

    , decltype(_impl_.resource_){nullptr}
  };
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PermissionsResponse_Item::~PermissionsResponse_Item() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.PermissionsResponse.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PermissionsResponse_Item::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_.Destroy();
  if (this != internal_default_instance()) delete _impl_.resource_;
}

void PermissionsResponse_Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PermissionsResponse_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.PermissionsResponse.Item)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.resource_ != nullptr);
    _impl_.resource_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PermissionsResponse_Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_operation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.PermissionsResponse.Item.operation"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.rbac.v1.ResourcesResponse.Item resource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PermissionsResponse_Item::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.PermissionsResponse.Item)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string operation = 1;
  if (!this->_internal_operation().empty()) {
    const std::string& _s = this->_internal_operation();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.rbac.v1.PermissionsResponse.Item.operation");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .palm.rbac.v1.ResourcesResponse.Item resource = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.PermissionsResponse.Item)
  return target;
}

::size_t PermissionsResponse_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.PermissionsResponse.Item)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation = 1;
  if (!this->_internal_operation().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_operation());
  }

  // .palm.rbac.v1.ResourcesResponse.Item resource = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PermissionsResponse_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PermissionsResponse_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PermissionsResponse_Item::GetClassData() const { return &_class_data_; }


void PermissionsResponse_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PermissionsResponse_Item*>(&to_msg);
  auto& from = static_cast<const PermissionsResponse_Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.PermissionsResponse.Item)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operation().empty()) {
    _this->_internal_set_operation(from._internal_operation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_resource()->::palm::rbac::v1::ResourcesResponse_Item::MergeFrom(
        from._internal_resource());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PermissionsResponse_Item::CopyFrom(const PermissionsResponse_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.PermissionsResponse.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionsResponse_Item::IsInitialized() const {
  return true;
}

void PermissionsResponse_Item::InternalSwap(PermissionsResponse_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operation_, lhs_arena,
                                       &other->_impl_.operation_, rhs_arena);
  swap(_impl_.resource_, other->_impl_.resource_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PermissionsResponse_Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[12]);
}
// ===================================================================

class PermissionsResponse::_Internal {
 public:
};

PermissionsResponse::PermissionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.PermissionsResponse)
}
PermissionsResponse::PermissionsResponse(const PermissionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PermissionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.PermissionsResponse)
}

inline void PermissionsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PermissionsResponse::~PermissionsResponse() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.PermissionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PermissionsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_items()->~RepeatedPtrField();
}

void PermissionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PermissionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.PermissionsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_items()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PermissionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .palm.rbac.v1.PermissionsResponse.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PermissionsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.PermissionsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .palm.rbac.v1.PermissionsResponse.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.PermissionsResponse)
  return target;
}

::size_t PermissionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.PermissionsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.rbac.v1.PermissionsResponse.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_internal_items()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PermissionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PermissionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PermissionsResponse::GetClassData() const { return &_class_data_; }


void PermissionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PermissionsResponse*>(&to_msg);
  auto& from = static_cast<const PermissionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.PermissionsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(from._internal_items());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PermissionsResponse::CopyFrom(const PermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.PermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionsResponse::IsInitialized() const {
  return true;
}

void PermissionsResponse::InternalSwap(PermissionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_items()->InternalSwap(other->_internal_mutable_items());
}

::PROTOBUF_NAMESPACE_ID::Metadata PermissionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[13]);
}
// ===================================================================

class HasRoleForUserRequest::_Internal {
 public:
};

HasRoleForUserRequest::HasRoleForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.HasRoleForUserRequest)
}
HasRoleForUserRequest::HasRoleForUserRequest(const HasRoleForUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HasRoleForUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.role_) {}

    , decltype(_impl_.user_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.role_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    _this->_impl_.role_.Set(from._internal_role(), _this->GetArenaForAllocation());
  }
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.HasRoleForUserRequest)
}

inline void HasRoleForUserRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.role_) {}

    , decltype(_impl_.user_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.role_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HasRoleForUserRequest::~HasRoleForUserRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.HasRoleForUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HasRoleForUserRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.role_.Destroy();
}

void HasRoleForUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HasRoleForUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.HasRoleForUserRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.role_.ClearToEmpty();
  _impl_.user_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HasRoleForUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.HasRoleForUserRequest.role"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HasRoleForUserRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.HasRoleForUserRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_user(), target);
  }

  // string role = 2;
  if (!this->_internal_role().empty()) {
    const std::string& _s = this->_internal_role();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.rbac.v1.HasRoleForUserRequest.role");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.HasRoleForUserRequest)
  return target;
}

::size_t HasRoleForUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.HasRoleForUserRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role = 2;
  if (!this->_internal_role().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_role());
  }

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HasRoleForUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HasRoleForUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HasRoleForUserRequest::GetClassData() const { return &_class_data_; }


void HasRoleForUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HasRoleForUserRequest*>(&to_msg);
  auto& from = static_cast<const HasRoleForUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.HasRoleForUserRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_role().empty()) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HasRoleForUserRequest::CopyFrom(const HasRoleForUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.HasRoleForUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasRoleForUserRequest::IsInitialized() const {
  return true;
}

void HasRoleForUserRequest::InternalSwap(HasRoleForUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.role_, lhs_arena,
                                       &other->_impl_.role_, rhs_arena);

  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HasRoleForUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[14]);
}
// ===================================================================

class HasPermissionForUserRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<HasPermissionForUserRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HasPermissionForUserRequest, _impl_._has_bits_);
  static const ::palm::rbac::v1::ResourcesResponse_Item& resource(const HasPermissionForUserRequest* msg);
  static void set_has_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::palm::rbac::v1::ResourcesResponse_Item&
HasPermissionForUserRequest::_Internal::resource(const HasPermissionForUserRequest* msg) {
  return *msg->_impl_.resource_;
}
HasPermissionForUserRequest::HasPermissionForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.HasPermissionForUserRequest)
}
HasPermissionForUserRequest::HasPermissionForUserRequest(const HasPermissionForUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HasPermissionForUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_) {}

    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.user_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation().empty()) {
    _this->_impl_.operation_.Set(from._internal_operation(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.resource_ = new ::palm::rbac::v1::ResourcesResponse_Item(*from._impl_.resource_);
  }
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.HasPermissionForUserRequest)
}

inline void HasPermissionForUserRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_) {}

    , decltype(_impl_.resource_){nullptr}
    , decltype(_impl_.user_) { 0 }

  };
  _impl_.operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HasPermissionForUserRequest::~HasPermissionForUserRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.HasPermissionForUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HasPermissionForUserRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_.Destroy();
  if (this != internal_default_instance()) delete _impl_.resource_;
}

void HasPermissionForUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HasPermissionForUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.HasPermissionForUserRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.resource_ != nullptr);
    _impl_.resource_->Clear();
  }
  _impl_.user_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HasPermissionForUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_operation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.HasPermissionForUserRequest.operation"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .palm.rbac.v1.ResourcesResponse.Item resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HasPermissionForUserRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.HasPermissionForUserRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_user(), target);
  }

  // string operation = 2;
  if (!this->_internal_operation().empty()) {
    const std::string& _s = this->_internal_operation();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.rbac.v1.HasPermissionForUserRequest.operation");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .palm.rbac.v1.ResourcesResponse.Item resource = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.HasPermissionForUserRequest)
  return target;
}

::size_t HasPermissionForUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.HasPermissionForUserRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation = 2;
  if (!this->_internal_operation().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_operation());
  }

  // .palm.rbac.v1.ResourcesResponse.Item resource = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HasPermissionForUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HasPermissionForUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HasPermissionForUserRequest::GetClassData() const { return &_class_data_; }


void HasPermissionForUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HasPermissionForUserRequest*>(&to_msg);
  auto& from = static_cast<const HasPermissionForUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.HasPermissionForUserRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operation().empty()) {
    _this->_internal_set_operation(from._internal_operation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_resource()->::palm::rbac::v1::ResourcesResponse_Item::MergeFrom(
        from._internal_resource());
  }
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HasPermissionForUserRequest::CopyFrom(const HasPermissionForUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.HasPermissionForUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasPermissionForUserRequest::IsInitialized() const {
  return true;
}

void HasPermissionForUserRequest::InternalSwap(HasPermissionForUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operation_, lhs_arena,
                                       &other->_impl_.operation_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HasPermissionForUserRequest, _impl_.user_)
      + sizeof(HasPermissionForUserRequest::_impl_.user_)
      - PROTOBUF_FIELD_OFFSET(HasPermissionForUserRequest, _impl_.resource_)>(
          reinterpret_cast<char*>(&_impl_.resource_),
          reinterpret_cast<char*>(&other->_impl_.resource_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HasPermissionForUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[15]);
}
// ===================================================================

class UpdatePermissionsForUserRequest::_Internal {
 public:
};

UpdatePermissionsForUserRequest::UpdatePermissionsForUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.UpdatePermissionsForUserRequest)
}
UpdatePermissionsForUserRequest::UpdatePermissionsForUserRequest(const UpdatePermissionsForUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdatePermissionsForUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.removed_){from._impl_.removed_}
    , decltype(_impl_.saved_){from._impl_.saved_}
    , decltype(_impl_.user_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.user_ = from._impl_.user_;
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.UpdatePermissionsForUserRequest)
}

inline void UpdatePermissionsForUserRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.removed_){arena}
    , decltype(_impl_.saved_){arena}
    , decltype(_impl_.user_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdatePermissionsForUserRequest::~UpdatePermissionsForUserRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.UpdatePermissionsForUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdatePermissionsForUserRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_removed()->~RepeatedPtrField();
  _internal_mutable_saved()->~RepeatedPtrField();
}

void UpdatePermissionsForUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdatePermissionsForUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.UpdatePermissionsForUserRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_removed()->Clear();
  _internal_mutable_saved()->Clear();
  _impl_.user_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePermissionsForUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .palm.rbac.v1.PermissionsResponse.Item removed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .palm.rbac.v1.PermissionsResponse.Item saved = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_saved(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdatePermissionsForUserRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.UpdatePermissionsForUserRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_user(), target);
  }

  // repeated .palm.rbac.v1.PermissionsResponse.Item removed = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_removed_size()); i < n; i++) {
    const auto& repfield = this->_internal_removed(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .palm.rbac.v1.PermissionsResponse.Item saved = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_saved_size()); i < n; i++) {
    const auto& repfield = this->_internal_saved(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.UpdatePermissionsForUserRequest)
  return target;
}

::size_t UpdatePermissionsForUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.UpdatePermissionsForUserRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.rbac.v1.PermissionsResponse.Item removed = 2;
  total_size += 1UL * this->_internal_removed_size();
  for (const auto& msg : this->_internal_removed()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .palm.rbac.v1.PermissionsResponse.Item saved = 3;
  total_size += 1UL * this->_internal_saved_size();
  for (const auto& msg : this->_internal_saved()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 user = 1;
  if (this->_internal_user() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdatePermissionsForUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdatePermissionsForUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdatePermissionsForUserRequest::GetClassData() const { return &_class_data_; }


void UpdatePermissionsForUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdatePermissionsForUserRequest*>(&to_msg);
  auto& from = static_cast<const UpdatePermissionsForUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.UpdatePermissionsForUserRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_removed()->MergeFrom(from._internal_removed());
  _this->_internal_mutable_saved()->MergeFrom(from._internal_saved());
  if (from._internal_user() != 0) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdatePermissionsForUserRequest::CopyFrom(const UpdatePermissionsForUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.UpdatePermissionsForUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePermissionsForUserRequest::IsInitialized() const {
  return true;
}

void UpdatePermissionsForUserRequest::InternalSwap(UpdatePermissionsForUserRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_removed()->InternalSwap(other->_internal_mutable_removed());
  _internal_mutable_saved()->InternalSwap(other->_internal_mutable_saved());

  swap(_impl_.user_, other->_impl_.user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePermissionsForUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[16]);
}
// ===================================================================

class UpdatePermissionsForRoleRequest::_Internal {
 public:
};

UpdatePermissionsForRoleRequest::UpdatePermissionsForRoleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:palm.rbac.v1.UpdatePermissionsForRoleRequest)
}
UpdatePermissionsForRoleRequest::UpdatePermissionsForRoleRequest(const UpdatePermissionsForRoleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdatePermissionsForRoleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.removed_){from._impl_.removed_}
    , decltype(_impl_.saved_){from._impl_.saved_}
    , decltype(_impl_.role_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.role_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    _this->_impl_.role_.Set(from._internal_role(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:palm.rbac.v1.UpdatePermissionsForRoleRequest)
}

inline void UpdatePermissionsForRoleRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.removed_){arena}
    , decltype(_impl_.saved_){arena}
    , decltype(_impl_.role_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.role_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdatePermissionsForRoleRequest::~UpdatePermissionsForRoleRequest() {
  // @@protoc_insertion_point(destructor:palm.rbac.v1.UpdatePermissionsForRoleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdatePermissionsForRoleRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_removed()->~RepeatedPtrField();
  _internal_mutable_saved()->~RepeatedPtrField();
  _impl_.role_.Destroy();
}

void UpdatePermissionsForRoleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdatePermissionsForRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:palm.rbac.v1.UpdatePermissionsForRoleRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_removed()->Clear();
  _internal_mutable_saved()->Clear();
  _impl_.role_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePermissionsForRoleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "palm.rbac.v1.UpdatePermissionsForRoleRequest.role"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .palm.rbac.v1.PermissionsResponse.Item removed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .palm.rbac.v1.PermissionsResponse.Item saved = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_saved(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdatePermissionsForRoleRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:palm.rbac.v1.UpdatePermissionsForRoleRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string role = 1;
  if (!this->_internal_role().empty()) {
    const std::string& _s = this->_internal_role();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "palm.rbac.v1.UpdatePermissionsForRoleRequest.role");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .palm.rbac.v1.PermissionsResponse.Item removed = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_removed_size()); i < n; i++) {
    const auto& repfield = this->_internal_removed(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .palm.rbac.v1.PermissionsResponse.Item saved = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_saved_size()); i < n; i++) {
    const auto& repfield = this->_internal_saved(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:palm.rbac.v1.UpdatePermissionsForRoleRequest)
  return target;
}

::size_t UpdatePermissionsForRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:palm.rbac.v1.UpdatePermissionsForRoleRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .palm.rbac.v1.PermissionsResponse.Item removed = 2;
  total_size += 1UL * this->_internal_removed_size();
  for (const auto& msg : this->_internal_removed()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .palm.rbac.v1.PermissionsResponse.Item saved = 3;
  total_size += 1UL * this->_internal_saved_size();
  for (const auto& msg : this->_internal_saved()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string role = 1;
  if (!this->_internal_role().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdatePermissionsForRoleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdatePermissionsForRoleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdatePermissionsForRoleRequest::GetClassData() const { return &_class_data_; }


void UpdatePermissionsForRoleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdatePermissionsForRoleRequest*>(&to_msg);
  auto& from = static_cast<const UpdatePermissionsForRoleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:palm.rbac.v1.UpdatePermissionsForRoleRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_removed()->MergeFrom(from._internal_removed());
  _this->_internal_mutable_saved()->MergeFrom(from._internal_saved());
  if (!from._internal_role().empty()) {
    _this->_internal_set_role(from._internal_role());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdatePermissionsForRoleRequest::CopyFrom(const UpdatePermissionsForRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:palm.rbac.v1.UpdatePermissionsForRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePermissionsForRoleRequest::IsInitialized() const {
  return true;
}

void UpdatePermissionsForRoleRequest::InternalSwap(UpdatePermissionsForRoleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_removed()->InternalSwap(other->_internal_mutable_removed());
  _internal_mutable_saved()->InternalSwap(other->_internal_mutable_saved());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.role_, lhs_arena,
                                       &other->_impl_.role_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePermissionsForRoleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rbac_2eproto_getter, &descriptor_table_rbac_2eproto_once,
      file_level_metadata_rbac_2eproto[17]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace rbac
}  // namespace palm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::CasbinSyncTask*
Arena::CreateMaybeMessage< ::palm::rbac::v1::CasbinSyncTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::CasbinSyncTask >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::UsersResponse_Item*
Arena::CreateMaybeMessage< ::palm::rbac::v1::UsersResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::UsersResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::UsersResponse*
Arena::CreateMaybeMessage< ::palm::rbac::v1::UsersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::UsersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::ResourcesResponse_Item*
Arena::CreateMaybeMessage< ::palm::rbac::v1::ResourcesResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::ResourcesResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::ResourcesResponse*
Arena::CreateMaybeMessage< ::palm::rbac::v1::ResourcesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::ResourcesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::OperationsResponse*
Arena::CreateMaybeMessage< ::palm::rbac::v1::OperationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::OperationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::RolesResponse*
Arena::CreateMaybeMessage< ::palm::rbac::v1::RolesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::RolesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::UserRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::UserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::UserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::RoleRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::RoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::RoleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::UserRolesRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::UserRolesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::UserRolesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::UserPermissionsRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::UserPermissionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::UserPermissionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::RolePermissionsRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::RolePermissionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::RolePermissionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::PermissionsResponse_Item*
Arena::CreateMaybeMessage< ::palm::rbac::v1::PermissionsResponse_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::PermissionsResponse_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::PermissionsResponse*
Arena::CreateMaybeMessage< ::palm::rbac::v1::PermissionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::PermissionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::HasRoleForUserRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::HasRoleForUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::HasRoleForUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::HasPermissionForUserRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::HasPermissionForUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::HasPermissionForUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::UpdatePermissionsForUserRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::UpdatePermissionsForUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::UpdatePermissionsForUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::palm::rbac::v1::UpdatePermissionsForRoleRequest*
Arena::CreateMaybeMessage< ::palm::rbac::v1::UpdatePermissionsForRoleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::palm::rbac::v1::UpdatePermissionsForRoleRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
