/**
 * @fileoverview gRPC-Web generated client stub for palm.orchid.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.6
// source: orchid.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')

var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js')
const proto = {};
proto.palm = {};
proto.palm.orchid = {};
proto.palm.orchid.v1 = require('./orchid_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.palm.orchid.v1.AesClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.palm.orchid.v1.AesPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.palm.orchid.v1.AesPlainMessage,
 *   !proto.palm.orchid.v1.AesCodeMessage>}
 */
const methodDescriptor_Aes_Encrypt = new grpc.web.MethodDescriptor(
  '/palm.orchid.v1.Aes/Encrypt',
  grpc.web.MethodType.UNARY,
  proto.palm.orchid.v1.AesPlainMessage,
  proto.palm.orchid.v1.AesCodeMessage,
  /**
   * @param {!proto.palm.orchid.v1.AesPlainMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.palm.orchid.v1.AesCodeMessage.deserializeBinary
);


/**
 * @param {!proto.palm.orchid.v1.AesPlainMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.palm.orchid.v1.AesCodeMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.palm.orchid.v1.AesCodeMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.palm.orchid.v1.AesClient.prototype.encrypt =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/palm.orchid.v1.Aes/Encrypt',
      request,
      metadata || {},
      methodDescriptor_Aes_Encrypt,
      callback);
};


/**
 * @param {!proto.palm.orchid.v1.AesPlainMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.palm.orchid.v1.AesCodeMessage>}
 *     Promise that resolves to the response
 */
proto.palm.orchid.v1.AesPromiseClient.prototype.encrypt =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/palm.orchid.v1.Aes/Encrypt',
      request,
      metadata || {},
      methodDescriptor_Aes_Encrypt);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.palm.orchid.v1.AesCodeMessage,
 *   !proto.palm.orchid.v1.AesPlainMessage>}
 */
const methodDescriptor_Aes_Decrypt = new grpc.web.MethodDescriptor(
  '/palm.orchid.v1.Aes/Decrypt',
  grpc.web.MethodType.UNARY,
  proto.palm.orchid.v1.AesCodeMessage,
  proto.palm.orchid.v1.AesPlainMessage,
  /**
   * @param {!proto.palm.orchid.v1.AesCodeMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.palm.orchid.v1.AesPlainMessage.deserializeBinary
);


/**
 * @param {!proto.palm.orchid.v1.AesCodeMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.palm.orchid.v1.AesPlainMessage)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.palm.orchid.v1.AesPlainMessage>|undefined}
 *     The XHR Node Readable Stream
 */
proto.palm.orchid.v1.AesClient.prototype.decrypt =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/palm.orchid.v1.Aes/Decrypt',
      request,
      metadata || {},
      methodDescriptor_Aes_Decrypt,
      callback);
};


/**
 * @param {!proto.palm.orchid.v1.AesCodeMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.palm.orchid.v1.AesPlainMessage>}
 *     Promise that resolves to the response
 */
proto.palm.orchid.v1.AesPromiseClient.prototype.decrypt =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/palm.orchid.v1.Aes/Decrypt',
      request,
      metadata || {},
      methodDescriptor_Aes_Decrypt);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.palm.orchid.v1.HMacClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.palm.orchid.v1.HMacPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.palm.orchid.v1.HMacSignRequest,
 *   !proto.palm.orchid.v1.HMacSignResponse>}
 */
const methodDescriptor_HMac_Sign = new grpc.web.MethodDescriptor(
  '/palm.orchid.v1.HMac/Sign',
  grpc.web.MethodType.UNARY,
  proto.palm.orchid.v1.HMacSignRequest,
  proto.palm.orchid.v1.HMacSignResponse,
  /**
   * @param {!proto.palm.orchid.v1.HMacSignRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.palm.orchid.v1.HMacSignResponse.deserializeBinary
);


/**
 * @param {!proto.palm.orchid.v1.HMacSignRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.palm.orchid.v1.HMacSignResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.palm.orchid.v1.HMacSignResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.palm.orchid.v1.HMacClient.prototype.sign =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/palm.orchid.v1.HMac/Sign',
      request,
      metadata || {},
      methodDescriptor_HMac_Sign,
      callback);
};


/**
 * @param {!proto.palm.orchid.v1.HMacSignRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.palm.orchid.v1.HMacSignResponse>}
 *     Promise that resolves to the response
 */
proto.palm.orchid.v1.HMacPromiseClient.prototype.sign =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/palm.orchid.v1.HMac/Sign',
      request,
      metadata || {},
      methodDescriptor_HMac_Sign);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.palm.orchid.v1.HMacVerifyRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_HMac_Verify = new grpc.web.MethodDescriptor(
  '/palm.orchid.v1.HMac/Verify',
  grpc.web.MethodType.UNARY,
  proto.palm.orchid.v1.HMacVerifyRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.palm.orchid.v1.HMacVerifyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.palm.orchid.v1.HMacVerifyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.palm.orchid.v1.HMacClient.prototype.verify =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/palm.orchid.v1.HMac/Verify',
      request,
      metadata || {},
      methodDescriptor_HMac_Verify,
      callback);
};


/**
 * @param {!proto.palm.orchid.v1.HMacVerifyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.palm.orchid.v1.HMacPromiseClient.prototype.verify =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/palm.orchid.v1.HMac/Verify',
      request,
      metadata || {},
      methodDescriptor_HMac_Verify);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.palm.orchid.v1.JwtClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.palm.orchid.v1.JwtPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.palm.orchid.v1.JwtSignRequest,
 *   !proto.palm.orchid.v1.JwtSignResponse>}
 */
const methodDescriptor_Jwt_Sign = new grpc.web.MethodDescriptor(
  '/palm.orchid.v1.Jwt/Sign',
  grpc.web.MethodType.UNARY,
  proto.palm.orchid.v1.JwtSignRequest,
  proto.palm.orchid.v1.JwtSignResponse,
  /**
   * @param {!proto.palm.orchid.v1.JwtSignRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.palm.orchid.v1.JwtSignResponse.deserializeBinary
);


/**
 * @param {!proto.palm.orchid.v1.JwtSignRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.palm.orchid.v1.JwtSignResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.palm.orchid.v1.JwtSignResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.palm.orchid.v1.JwtClient.prototype.sign =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/palm.orchid.v1.Jwt/Sign',
      request,
      metadata || {},
      methodDescriptor_Jwt_Sign,
      callback);
};


/**
 * @param {!proto.palm.orchid.v1.JwtSignRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.palm.orchid.v1.JwtSignResponse>}
 *     Promise that resolves to the response
 */
proto.palm.orchid.v1.JwtPromiseClient.prototype.sign =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/palm.orchid.v1.Jwt/Sign',
      request,
      metadata || {},
      methodDescriptor_Jwt_Sign);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.palm.orchid.v1.JwtVerifyRequest,
 *   !proto.palm.orchid.v1.JwtVerifyResponse>}
 */
const methodDescriptor_Jwt_Verify = new grpc.web.MethodDescriptor(
  '/palm.orchid.v1.Jwt/Verify',
  grpc.web.MethodType.UNARY,
  proto.palm.orchid.v1.JwtVerifyRequest,
  proto.palm.orchid.v1.JwtVerifyResponse,
  /**
   * @param {!proto.palm.orchid.v1.JwtVerifyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.palm.orchid.v1.JwtVerifyResponse.deserializeBinary
);


/**
 * @param {!proto.palm.orchid.v1.JwtVerifyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.palm.orchid.v1.JwtVerifyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.palm.orchid.v1.JwtVerifyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.palm.orchid.v1.JwtClient.prototype.verify =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/palm.orchid.v1.Jwt/Verify',
      request,
      metadata || {},
      methodDescriptor_Jwt_Verify,
      callback);
};


/**
 * @param {!proto.palm.orchid.v1.JwtVerifyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.palm.orchid.v1.JwtVerifyResponse>}
 *     Promise that resolves to the response
 */
proto.palm.orchid.v1.JwtPromiseClient.prototype.verify =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/palm.orchid.v1.Jwt/Verify',
      request,
      metadata || {},
      methodDescriptor_Jwt_Verify);
};


module.exports = proto.palm.orchid.v1;

