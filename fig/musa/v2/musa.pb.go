// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: musa.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ----------------------------------------------------------------------------
type WechatPayCurrency int32

const (
	WechatPayCurrency_CNY WechatPayCurrency = 0
)

// Enum value maps for WechatPayCurrency.
var (
	WechatPayCurrency_name = map[int32]string{
		0: "CNY",
	}
	WechatPayCurrency_value = map[string]int32{
		"CNY": 0,
	}
)

func (x WechatPayCurrency) Enum() *WechatPayCurrency {
	p := new(WechatPayCurrency)
	*p = x
	return p
}

func (x WechatPayCurrency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WechatPayCurrency) Descriptor() protoreflect.EnumDescriptor {
	return file_musa_proto_enumTypes[0].Descriptor()
}

func (WechatPayCurrency) Type() protoreflect.EnumType {
	return &file_musa_proto_enumTypes[0]
}

func (x WechatPayCurrency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WechatPayCurrency.Descriptor instead.
func (WechatPayCurrency) EnumDescriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{0}
}

type WechatPayNotifyAction int32

const (
	WechatPayNotifyAction_TRANSCATION WechatPayNotifyAction = 0
	WechatPayNotifyAction_REFUND      WechatPayNotifyAction = 1
)

// Enum value maps for WechatPayNotifyAction.
var (
	WechatPayNotifyAction_name = map[int32]string{
		0: "TRANSCATION",
		1: "REFUND",
	}
	WechatPayNotifyAction_value = map[string]int32{
		"TRANSCATION": 0,
		"REFUND":      1,
	}
)

func (x WechatPayNotifyAction) Enum() *WechatPayNotifyAction {
	p := new(WechatPayNotifyAction)
	*p = x
	return p
}

func (x WechatPayNotifyAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WechatPayNotifyAction) Descriptor() protoreflect.EnumDescriptor {
	return file_musa_proto_enumTypes[1].Descriptor()
}

func (WechatPayNotifyAction) Type() protoreflect.EnumType {
	return &file_musa_proto_enumTypes[1]
}

func (x WechatPayNotifyAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WechatPayNotifyAction.Descriptor instead.
func (WechatPayNotifyAction) EnumDescriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{1}
}

type WechatPayTarType int32

const (
	WechatPayTarType_GZIP WechatPayTarType = 0
)

// Enum value maps for WechatPayTarType.
var (
	WechatPayTarType_name = map[int32]string{
		0: "GZIP",
	}
	WechatPayTarType_value = map[string]int32{
		"GZIP": 0,
	}
)

func (x WechatPayTarType) Enum() *WechatPayTarType {
	p := new(WechatPayTarType)
	*p = x
	return p
}

func (x WechatPayTarType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WechatPayTarType) Descriptor() protoreflect.EnumDescriptor {
	return file_musa_proto_enumTypes[2].Descriptor()
}

func (WechatPayTarType) Type() protoreflect.EnumType {
	return &file_musa_proto_enumTypes[2]
}

func (x WechatPayTarType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WechatPayTarType.Descriptor instead.
func (WechatPayTarType) EnumDescriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{2}
}

type WechatPayTradeBillRequest_BillType int32

const (
	WechatPayTradeBillRequest_ALL     WechatPayTradeBillRequest_BillType = 0
	WechatPayTradeBillRequest_SUCCESS WechatPayTradeBillRequest_BillType = 1
	WechatPayTradeBillRequest_REFUND  WechatPayTradeBillRequest_BillType = 2
)

// Enum value maps for WechatPayTradeBillRequest_BillType.
var (
	WechatPayTradeBillRequest_BillType_name = map[int32]string{
		0: "ALL",
		1: "SUCCESS",
		2: "REFUND",
	}
	WechatPayTradeBillRequest_BillType_value = map[string]int32{
		"ALL":     0,
		"SUCCESS": 1,
		"REFUND":  2,
	}
)

func (x WechatPayTradeBillRequest_BillType) Enum() *WechatPayTradeBillRequest_BillType {
	p := new(WechatPayTradeBillRequest_BillType)
	*p = x
	return p
}

func (x WechatPayTradeBillRequest_BillType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WechatPayTradeBillRequest_BillType) Descriptor() protoreflect.EnumDescriptor {
	return file_musa_proto_enumTypes[3].Descriptor()
}

func (WechatPayTradeBillRequest_BillType) Type() protoreflect.EnumType {
	return &file_musa_proto_enumTypes[3]
}

func (x WechatPayTradeBillRequest_BillType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WechatPayTradeBillRequest_BillType.Descriptor instead.
func (WechatPayTradeBillRequest_BillType) EnumDescriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{10, 0}
}

type WechatPayFundFlowBillRequest_AccountType int32

const (
	WechatPayFundFlowBillRequest_BASIC     WechatPayFundFlowBillRequest_AccountType = 0
	WechatPayFundFlowBillRequest_OPERATION WechatPayFundFlowBillRequest_AccountType = 1
	WechatPayFundFlowBillRequest_FEES      WechatPayFundFlowBillRequest_AccountType = 2
)

// Enum value maps for WechatPayFundFlowBillRequest_AccountType.
var (
	WechatPayFundFlowBillRequest_AccountType_name = map[int32]string{
		0: "BASIC",
		1: "OPERATION",
		2: "FEES",
	}
	WechatPayFundFlowBillRequest_AccountType_value = map[string]int32{
		"BASIC":     0,
		"OPERATION": 1,
		"FEES":      2,
	}
)

func (x WechatPayFundFlowBillRequest_AccountType) Enum() *WechatPayFundFlowBillRequest_AccountType {
	p := new(WechatPayFundFlowBillRequest_AccountType)
	*p = x
	return p
}

func (x WechatPayFundFlowBillRequest_AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WechatPayFundFlowBillRequest_AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_musa_proto_enumTypes[4].Descriptor()
}

func (WechatPayFundFlowBillRequest_AccountType) Type() protoreflect.EnumType {
	return &file_musa_proto_enumTypes[4]
}

func (x WechatPayFundFlowBillRequest_AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WechatPayFundFlowBillRequest_AccountType.Descriptor instead.
func (WechatPayFundFlowBillRequest_AccountType) EnumDescriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{11, 0}
}

type WechatPayTransferGetElectronicReceiptRequest_AcceptType int32

const (
	WechatPayTransferGetElectronicReceiptRequest_BATCH_TRANSFER     WechatPayTransferGetElectronicReceiptRequest_AcceptType = 0
	WechatPayTransferGetElectronicReceiptRequest_TRANSFER_TO_POCKET WechatPayTransferGetElectronicReceiptRequest_AcceptType = 1
	WechatPayTransferGetElectronicReceiptRequest_TRANSFER_TO_BANK   WechatPayTransferGetElectronicReceiptRequest_AcceptType = 2
)

// Enum value maps for WechatPayTransferGetElectronicReceiptRequest_AcceptType.
var (
	WechatPayTransferGetElectronicReceiptRequest_AcceptType_name = map[int32]string{
		0: "BATCH_TRANSFER",
		1: "TRANSFER_TO_POCKET",
		2: "TRANSFER_TO_BANK",
	}
	WechatPayTransferGetElectronicReceiptRequest_AcceptType_value = map[string]int32{
		"BATCH_TRANSFER":     0,
		"TRANSFER_TO_POCKET": 1,
		"TRANSFER_TO_BANK":   2,
	}
)

func (x WechatPayTransferGetElectronicReceiptRequest_AcceptType) Enum() *WechatPayTransferGetElectronicReceiptRequest_AcceptType {
	p := new(WechatPayTransferGetElectronicReceiptRequest_AcceptType)
	*p = x
	return p
}

func (x WechatPayTransferGetElectronicReceiptRequest_AcceptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WechatPayTransferGetElectronicReceiptRequest_AcceptType) Descriptor() protoreflect.EnumDescriptor {
	return file_musa_proto_enumTypes[5].Descriptor()
}

func (WechatPayTransferGetElectronicReceiptRequest_AcceptType) Type() protoreflect.EnumType {
	return &file_musa_proto_enumTypes[5]
}

func (x WechatPayTransferGetElectronicReceiptRequest_AcceptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WechatPayTransferGetElectronicReceiptRequest_AcceptType.Descriptor instead.
func (WechatPayTransferGetElectronicReceiptRequest_AcceptType) EnumDescriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{15, 0}
}

type WechatPayQueryBatchTransferRequest_DetailStatus int32

const (
	WechatPayQueryBatchTransferRequest_ALL      WechatPayQueryBatchTransferRequest_DetailStatus = 0
	WechatPayQueryBatchTransferRequest_SUCCESS  WechatPayQueryBatchTransferRequest_DetailStatus = 1
	WechatPayQueryBatchTransferRequest_WAIT_PAY WechatPayQueryBatchTransferRequest_DetailStatus = 2
	WechatPayQueryBatchTransferRequest_FAIL     WechatPayQueryBatchTransferRequest_DetailStatus = 9
)

// Enum value maps for WechatPayQueryBatchTransferRequest_DetailStatus.
var (
	WechatPayQueryBatchTransferRequest_DetailStatus_name = map[int32]string{
		0: "ALL",
		1: "SUCCESS",
		2: "WAIT_PAY",
		9: "FAIL",
	}
	WechatPayQueryBatchTransferRequest_DetailStatus_value = map[string]int32{
		"ALL":      0,
		"SUCCESS":  1,
		"WAIT_PAY": 2,
		"FAIL":     9,
	}
)

func (x WechatPayQueryBatchTransferRequest_DetailStatus) Enum() *WechatPayQueryBatchTransferRequest_DetailStatus {
	p := new(WechatPayQueryBatchTransferRequest_DetailStatus)
	*p = x
	return p
}

func (x WechatPayQueryBatchTransferRequest_DetailStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WechatPayQueryBatchTransferRequest_DetailStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_musa_proto_enumTypes[6].Descriptor()
}

func (WechatPayQueryBatchTransferRequest_DetailStatus) Type() protoreflect.EnumType {
	return &file_musa_proto_enumTypes[6]
}

func (x WechatPayQueryBatchTransferRequest_DetailStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WechatPayQueryBatchTransferRequest_DetailStatus.Descriptor instead.
func (WechatPayQueryBatchTransferRequest_DetailStatus) EnumDescriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{20, 0}
}

type WechatPayPrepayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       string                         `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	OutTradeNo  *string                        `protobuf:"bytes,2,opt,name=out_trade_no,json=outTradeNo,proto3,oneof" json:"out_trade_no,omitempty"`
	PayerOpenId *string                        `protobuf:"bytes,11,opt,name=payer_open_id,json=payerOpenId,proto3,oneof" json:"payer_open_id,omitempty"`
	Amount      *WechatPayPrepayRequest_Amount `protobuf:"bytes,12,opt,name=amount,proto3" json:"amount,omitempty"`
	Description string                         `protobuf:"bytes,98,opt,name=description,proto3" json:"description,omitempty"`
	NotifyHost  string                         `protobuf:"bytes,99,opt,name=notify_host,json=notifyHost,proto3" json:"notify_host,omitempty"`
}

func (x *WechatPayPrepayRequest) Reset() {
	*x = WechatPayPrepayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayPrepayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayPrepayRequest) ProtoMessage() {}

func (x *WechatPayPrepayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayPrepayRequest.ProtoReflect.Descriptor instead.
func (*WechatPayPrepayRequest) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{0}
}

func (x *WechatPayPrepayRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *WechatPayPrepayRequest) GetOutTradeNo() string {
	if x != nil && x.OutTradeNo != nil {
		return *x.OutTradeNo
	}
	return ""
}

func (x *WechatPayPrepayRequest) GetPayerOpenId() string {
	if x != nil && x.PayerOpenId != nil {
		return *x.PayerOpenId
	}
	return ""
}

func (x *WechatPayPrepayRequest) GetAmount() *WechatPayPrepayRequest_Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *WechatPayPrepayRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WechatPayPrepayRequest) GetNotifyHost() string {
	if x != nil {
		return x.NotifyHost
	}
	return ""
}

type WechatPayCloseOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTradeNo string `protobuf:"bytes,1,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
	Reason     string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *WechatPayCloseOrderRequest) Reset() {
	*x = WechatPayCloseOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayCloseOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayCloseOrderRequest) ProtoMessage() {}

func (x *WechatPayCloseOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayCloseOrderRequest.ProtoReflect.Descriptor instead.
func (*WechatPayCloseOrderRequest) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{1}
}

func (x *WechatPayCloseOrderRequest) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *WechatPayCloseOrderRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{2}
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type WechatPayNativeQrCodeUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url        string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	OutTradeNo string `protobuf:"bytes,2,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
}

func (x *WechatPayNativeQrCodeUrlResponse) Reset() {
	*x = WechatPayNativeQrCodeUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayNativeQrCodeUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayNativeQrCodeUrlResponse) ProtoMessage() {}

func (x *WechatPayNativeQrCodeUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayNativeQrCodeUrlResponse.ProtoReflect.Descriptor instead.
func (*WechatPayNativeQrCodeUrlResponse) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{3}
}

func (x *WechatPayNativeQrCodeUrlResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WechatPayNativeQrCodeUrlResponse) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

type WechatPayTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeState     string `protobuf:"bytes,1,opt,name=trade_state,json=tradeState,proto3" json:"trade_state,omitempty"`
	TradeStateDesc string `protobuf:"bytes,2,opt,name=trade_state_desc,json=tradeStateDesc,proto3" json:"trade_state_desc,omitempty"`
}

func (x *WechatPayTradeResponse) Reset() {
	*x = WechatPayTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayTradeResponse) ProtoMessage() {}

func (x *WechatPayTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayTradeResponse.ProtoReflect.Descriptor instead.
func (*WechatPayTradeResponse) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{4}
}

func (x *WechatPayTradeResponse) GetTradeState() string {
	if x != nil {
		return x.TradeState
	}
	return ""
}

func (x *WechatPayTradeResponse) GetTradeStateDesc() string {
	if x != nil {
		return x.TradeStateDesc
	}
	return ""
}

type WechatPayQueryOrderByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *WechatPayQueryOrderByIdRequest) Reset() {
	*x = WechatPayQueryOrderByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayQueryOrderByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayQueryOrderByIdRequest) ProtoMessage() {}

func (x *WechatPayQueryOrderByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayQueryOrderByIdRequest.ProtoReflect.Descriptor instead.
func (*WechatPayQueryOrderByIdRequest) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{5}
}

func (x *WechatPayQueryOrderByIdRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type WechatPayQueryOrderByOutTradeNoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTradeNo string `protobuf:"bytes,1,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
}

func (x *WechatPayQueryOrderByOutTradeNoRequest) Reset() {
	*x = WechatPayQueryOrderByOutTradeNoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayQueryOrderByOutTradeNoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayQueryOrderByOutTradeNoRequest) ProtoMessage() {}

func (x *WechatPayQueryOrderByOutTradeNoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayQueryOrderByOutTradeNoRequest.ProtoReflect.Descriptor instead.
func (*WechatPayQueryOrderByOutTradeNoRequest) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{6}
}

func (x *WechatPayQueryOrderByOutTradeNoRequest) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

type WechatPayJsapiPrepayIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	TimeStamp  string `protobuf:"bytes,2,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	NonceStr   string `protobuf:"bytes,3,opt,name=nonce_str,json=nonceStr,proto3" json:"nonce_str,omitempty"`
	Package    string `protobuf:"bytes,4,opt,name=package,proto3" json:"package,omitempty"`
	SignType   string `protobuf:"bytes,5,opt,name=sign_type,json=signType,proto3" json:"sign_type,omitempty"`
	PaySign    string `protobuf:"bytes,6,opt,name=pay_sign,json=paySign,proto3" json:"pay_sign,omitempty"`
	OutTradeNo string `protobuf:"bytes,11,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
}

func (x *WechatPayJsapiPrepayIdResponse) Reset() {
	*x = WechatPayJsapiPrepayIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayJsapiPrepayIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayJsapiPrepayIdResponse) ProtoMessage() {}

func (x *WechatPayJsapiPrepayIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayJsapiPrepayIdResponse.ProtoReflect.Descriptor instead.
func (*WechatPayJsapiPrepayIdResponse) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{7}
}

func (x *WechatPayJsapiPrepayIdResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *WechatPayJsapiPrepayIdResponse) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

func (x *WechatPayJsapiPrepayIdResponse) GetNonceStr() string {
	if x != nil {
		return x.NonceStr
	}
	return ""
}

func (x *WechatPayJsapiPrepayIdResponse) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *WechatPayJsapiPrepayIdResponse) GetSignType() string {
	if x != nil {
		return x.SignType
	}
	return ""
}

func (x *WechatPayJsapiPrepayIdResponse) GetPaySign() string {
	if x != nil {
		return x.PaySign
	}
	return ""
}

func (x *WechatPayJsapiPrepayIdResponse) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

type WechatPayBillDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Year  int32 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month int32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	Day   int32 `protobuf:"varint,3,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *WechatPayBillDate) Reset() {
	*x = WechatPayBillDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayBillDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayBillDate) ProtoMessage() {}

func (x *WechatPayBillDate) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayBillDate.ProtoReflect.Descriptor instead.
func (*WechatPayBillDate) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{8}
}

func (x *WechatPayBillDate) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *WechatPayBillDate) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *WechatPayBillDate) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

type WechatPayBillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *WechatPayBillResponse) Reset() {
	*x = WechatPayBillResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayBillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayBillResponse) ProtoMessage() {}

func (x *WechatPayBillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayBillResponse.ProtoReflect.Descriptor instead.
func (*WechatPayBillResponse) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{9}
}

func (x *WechatPayBillResponse) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type WechatPayTradeBillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillDate *WechatPayBillDate                 `protobuf:"bytes,1,opt,name=bill_date,json=billDate,proto3" json:"bill_date,omitempty"`
	BillType WechatPayTradeBillRequest_BillType `protobuf:"varint,2,opt,name=bill_type,json=billType,proto3,enum=palm.musa.v1.WechatPayTradeBillRequest_BillType" json:"bill_type,omitempty"`
}

func (x *WechatPayTradeBillRequest) Reset() {
	*x = WechatPayTradeBillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayTradeBillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayTradeBillRequest) ProtoMessage() {}

func (x *WechatPayTradeBillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayTradeBillRequest.ProtoReflect.Descriptor instead.
func (*WechatPayTradeBillRequest) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{10}
}

func (x *WechatPayTradeBillRequest) GetBillDate() *WechatPayBillDate {
	if x != nil {
		return x.BillDate
	}
	return nil
}

func (x *WechatPayTradeBillRequest) GetBillType() WechatPayTradeBillRequest_BillType {
	if x != nil {
		return x.BillType
	}
	return WechatPayTradeBillRequest_ALL
}

type WechatPayFundFlowBillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BillDate    *WechatPayBillDate                       `protobuf:"bytes,1,opt,name=bill_date,json=billDate,proto3" json:"bill_date,omitempty"`
	AccountType WechatPayFundFlowBillRequest_AccountType `protobuf:"varint,2,opt,name=account_type,json=accountType,proto3,enum=palm.musa.v1.WechatPayFundFlowBillRequest_AccountType" json:"account_type,omitempty"`
}

func (x *WechatPayFundFlowBillRequest) Reset() {
	*x = WechatPayFundFlowBillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayFundFlowBillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayFundFlowBillRequest) ProtoMessage() {}

func (x *WechatPayFundFlowBillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayFundFlowBillRequest.ProtoReflect.Descriptor instead.
func (*WechatPayFundFlowBillRequest) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{11}
}

func (x *WechatPayFundFlowBillRequest) GetBillDate() *WechatPayBillDate {
	if x != nil {
		return x.BillDate
	}
	return nil
}

func (x *WechatPayFundFlowBillRequest) GetAccountType() WechatPayFundFlowBillRequest_AccountType {
	if x != nil {
		return x.AccountType
	}
	return WechatPayFundFlowBillRequest_BASIC
}

type WechatPayCreateRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutTradeNo string                               `protobuf:"bytes,1,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
	Reason     string                               `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Amount     *WechatPayCreateRefundRequest_Amount `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	NotifyHost string                               `protobuf:"bytes,11,opt,name=notify_host,json=notifyHost,proto3" json:"notify_host,omitempty"`
}

func (x *WechatPayCreateRefundRequest) Reset() {
	*x = WechatPayCreateRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayCreateRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayCreateRefundRequest) ProtoMessage() {}

func (x *WechatPayCreateRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayCreateRefundRequest.ProtoReflect.Descriptor instead.
func (*WechatPayCreateRefundRequest) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{12}
}

func (x *WechatPayCreateRefundRequest) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *WechatPayCreateRefundRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *WechatPayCreateRefundRequest) GetAmount() *WechatPayCreateRefundRequest_Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *WechatPayCreateRefundRequest) GetNotifyHost() string {
	if x != nil {
		return x.NotifyHost
	}
	return ""
}

type WechatPayQueryRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutRefundNo string `protobuf:"bytes,1,opt,name=out_refund_no,json=outRefundNo,proto3" json:"out_refund_no,omitempty"`
}

func (x *WechatPayQueryRefundRequest) Reset() {
	*x = WechatPayQueryRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayQueryRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayQueryRefundRequest) ProtoMessage() {}

func (x *WechatPayQueryRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayQueryRefundRequest.ProtoReflect.Descriptor instead.
func (*WechatPayQueryRefundRequest) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{13}
}

func (x *WechatPayQueryRefundRequest) GetOutRefundNo() string {
	if x != nil {
		return x.OutRefundNo
	}
	return ""
}

type WechatPayRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutRefundNo         string `protobuf:"bytes,1,opt,name=out_refund_no,json=outRefundNo,proto3" json:"out_refund_no,omitempty"`
	Channel             string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Status              string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	UserReceivedAccount string `protobuf:"bytes,4,opt,name=user_received_account,json=userReceivedAccount,proto3" json:"user_received_account,omitempty"`
	CreateTime          string `protobuf:"bytes,99,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *WechatPayRefundResponse) Reset() {
	*x = WechatPayRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayRefundResponse) ProtoMessage() {}

func (x *WechatPayRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayRefundResponse.ProtoReflect.Descriptor instead.
func (*WechatPayRefundResponse) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{14}
}

func (x *WechatPayRefundResponse) GetOutRefundNo() string {
	if x != nil {
		return x.OutRefundNo
	}
	return ""
}

func (x *WechatPayRefundResponse) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *WechatPayRefundResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WechatPayRefundResponse) GetUserReceivedAccount() string {
	if x != nil {
		return x.UserReceivedAccount
	}
	return ""
}

func (x *WechatPayRefundResponse) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type WechatPayTransferGetElectronicReceiptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptType  WechatPayTransferGetElectronicReceiptRequest_AcceptType `protobuf:"varint,1,opt,name=accept_type,json=acceptType,proto3,enum=palm.musa.v1.WechatPayTransferGetElectronicReceiptRequest_AcceptType" json:"accept_type,omitempty"`
	OutBatchNo  *string                                                 `protobuf:"bytes,2,opt,name=out_batch_no,json=outBatchNo,proto3,oneof" json:"out_batch_no,omitempty"`
	OutDetailNo string                                                  `protobuf:"bytes,3,opt,name=out_detail_no,json=outDetailNo,proto3" json:"out_detail_no,omitempty"`
}

func (x *WechatPayTransferGetElectronicReceiptRequest) Reset() {
	*x = WechatPayTransferGetElectronicReceiptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayTransferGetElectronicReceiptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayTransferGetElectronicReceiptRequest) ProtoMessage() {}

func (x *WechatPayTransferGetElectronicReceiptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayTransferGetElectronicReceiptRequest.ProtoReflect.Descriptor instead.
func (*WechatPayTransferGetElectronicReceiptRequest) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{15}
}

func (x *WechatPayTransferGetElectronicReceiptRequest) GetAcceptType() WechatPayTransferGetElectronicReceiptRequest_AcceptType {
	if x != nil {
		return x.AcceptType
	}
	return WechatPayTransferGetElectronicReceiptRequest_BATCH_TRANSFER
}

func (x *WechatPayTransferGetElectronicReceiptRequest) GetOutBatchNo() string {
	if x != nil && x.OutBatchNo != nil {
		return *x.OutBatchNo
	}
	return ""
}

func (x *WechatPayTransferGetElectronicReceiptRequest) GetOutDetailNo() string {
	if x != nil {
		return x.OutDetailNo
	}
	return ""
}

type WechatPayTransferGetReceiptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *WechatPayTransferGetReceiptResponse) Reset() {
	*x = WechatPayTransferGetReceiptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayTransferGetReceiptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayTransferGetReceiptResponse) ProtoMessage() {}

func (x *WechatPayTransferGetReceiptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayTransferGetReceiptResponse.ProtoReflect.Descriptor instead.
func (*WechatPayTransferGetReceiptResponse) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{16}
}

func (x *WechatPayTransferGetReceiptResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type WechatPayTransferGetBillReceiptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutBatchNo string `protobuf:"bytes,1,opt,name=out_batch_no,json=outBatchNo,proto3" json:"out_batch_no,omitempty"`
}

func (x *WechatPayTransferGetBillReceiptRequest) Reset() {
	*x = WechatPayTransferGetBillReceiptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayTransferGetBillReceiptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayTransferGetBillReceiptRequest) ProtoMessage() {}

func (x *WechatPayTransferGetBillReceiptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayTransferGetBillReceiptRequest.ProtoReflect.Descriptor instead.
func (*WechatPayTransferGetBillReceiptRequest) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{17}
}

func (x *WechatPayTransferGetBillReceiptRequest) GetOutBatchNo() string {
	if x != nil {
		return x.OutBatchNo
	}
	return ""
}

type WechatPayExecuteBatchTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId   string                                         `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Batch   *WechatPayExecuteBatchTransferRequest_Batch    `protobuf:"bytes,2,opt,name=batch,proto3" json:"batch,omitempty"`
	Details []*WechatPayExecuteBatchTransferRequest_Detail `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	SceneId string                                         `protobuf:"bytes,9,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
}

func (x *WechatPayExecuteBatchTransferRequest) Reset() {
	*x = WechatPayExecuteBatchTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayExecuteBatchTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayExecuteBatchTransferRequest) ProtoMessage() {}

func (x *WechatPayExecuteBatchTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayExecuteBatchTransferRequest.ProtoReflect.Descriptor instead.
func (*WechatPayExecuteBatchTransferRequest) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{18}
}

func (x *WechatPayExecuteBatchTransferRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *WechatPayExecuteBatchTransferRequest) GetBatch() *WechatPayExecuteBatchTransferRequest_Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *WechatPayExecuteBatchTransferRequest) GetDetails() []*WechatPayExecuteBatchTransferRequest_Detail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *WechatPayExecuteBatchTransferRequest) GetSceneId() string {
	if x != nil {
		return x.SceneId
	}
	return ""
}

type WechatPayExecuteBatchTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutBatchNo string                                          `protobuf:"bytes,1,opt,name=out_batch_no,json=outBatchNo,proto3" json:"out_batch_no,omitempty"`
	Details    []*WechatPayExecuteBatchTransferResponse_Detail `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*WechatPayExecuteBatchTransferResponse_Succeeded_
	//	*WechatPayExecuteBatchTransferResponse_Error
	Payload isWechatPayExecuteBatchTransferResponse_Payload `protobuf_oneof:"payload"`
}

func (x *WechatPayExecuteBatchTransferResponse) Reset() {
	*x = WechatPayExecuteBatchTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayExecuteBatchTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayExecuteBatchTransferResponse) ProtoMessage() {}

func (x *WechatPayExecuteBatchTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayExecuteBatchTransferResponse.ProtoReflect.Descriptor instead.
func (*WechatPayExecuteBatchTransferResponse) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{19}
}

func (x *WechatPayExecuteBatchTransferResponse) GetOutBatchNo() string {
	if x != nil {
		return x.OutBatchNo
	}
	return ""
}

func (x *WechatPayExecuteBatchTransferResponse) GetDetails() []*WechatPayExecuteBatchTransferResponse_Detail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (m *WechatPayExecuteBatchTransferResponse) GetPayload() isWechatPayExecuteBatchTransferResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *WechatPayExecuteBatchTransferResponse) GetSucceeded() *WechatPayExecuteBatchTransferResponse_Succeeded {
	if x, ok := x.GetPayload().(*WechatPayExecuteBatchTransferResponse_Succeeded_); ok {
		return x.Succeeded
	}
	return nil
}

func (x *WechatPayExecuteBatchTransferResponse) GetError() *Error {
	if x, ok := x.GetPayload().(*WechatPayExecuteBatchTransferResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isWechatPayExecuteBatchTransferResponse_Payload interface {
	isWechatPayExecuteBatchTransferResponse_Payload()
}

type WechatPayExecuteBatchTransferResponse_Succeeded_ struct {
	Succeeded *WechatPayExecuteBatchTransferResponse_Succeeded `protobuf:"bytes,11,opt,name=succeeded,proto3,oneof"`
}

type WechatPayExecuteBatchTransferResponse_Error struct {
	Error *Error `protobuf:"bytes,12,opt,name=error,proto3,oneof"`
}

func (*WechatPayExecuteBatchTransferResponse_Succeeded_) isWechatPayExecuteBatchTransferResponse_Payload() {
}

func (*WechatPayExecuteBatchTransferResponse_Error) isWechatPayExecuteBatchTransferResponse_Payload() {
}

type WechatPayQueryBatchTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutBatchNo   string                                          `protobuf:"bytes,1,opt,name=out_batch_no,json=outBatchNo,proto3" json:"out_batch_no,omitempty"`
	Offset       int32                                           `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit        int32                                           `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	DetailStatus WechatPayQueryBatchTransferRequest_DetailStatus `protobuf:"varint,9,opt,name=detail_status,json=detailStatus,proto3,enum=palm.musa.v1.WechatPayQueryBatchTransferRequest_DetailStatus" json:"detail_status,omitempty"`
}

func (x *WechatPayQueryBatchTransferRequest) Reset() {
	*x = WechatPayQueryBatchTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayQueryBatchTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayQueryBatchTransferRequest) ProtoMessage() {}

func (x *WechatPayQueryBatchTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayQueryBatchTransferRequest.ProtoReflect.Descriptor instead.
func (*WechatPayQueryBatchTransferRequest) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{20}
}

func (x *WechatPayQueryBatchTransferRequest) GetOutBatchNo() string {
	if x != nil {
		return x.OutBatchNo
	}
	return ""
}

func (x *WechatPayQueryBatchTransferRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *WechatPayQueryBatchTransferRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WechatPayQueryBatchTransferRequest) GetDetailStatus() WechatPayQueryBatchTransferRequest_DetailStatus {
	if x != nil {
		return x.DetailStatus
	}
	return WechatPayQueryBatchTransferRequest_ALL
}

type WechatPayQueryBatchTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batch   *WechatPayQueryBatchTransferResponse_Batch    `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
	Details []*WechatPayQueryBatchTransferResponse_Detail `protobuf:"bytes,9,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *WechatPayQueryBatchTransferResponse) Reset() {
	*x = WechatPayQueryBatchTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayQueryBatchTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayQueryBatchTransferResponse) ProtoMessage() {}

func (x *WechatPayQueryBatchTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayQueryBatchTransferResponse.ProtoReflect.Descriptor instead.
func (*WechatPayQueryBatchTransferResponse) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{21}
}

func (x *WechatPayQueryBatchTransferResponse) GetBatch() *WechatPayQueryBatchTransferResponse_Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

func (x *WechatPayQueryBatchTransferResponse) GetDetails() []*WechatPayQueryBatchTransferResponse_Detail {
	if x != nil {
		return x.Details
	}
	return nil
}

type WechatPayQueryTransferDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutBatchNo  string `protobuf:"bytes,1,opt,name=out_batch_no,json=outBatchNo,proto3" json:"out_batch_no,omitempty"`
	OutDetailNo string `protobuf:"bytes,2,opt,name=out_detail_no,json=outDetailNo,proto3" json:"out_detail_no,omitempty"`
}

func (x *WechatPayQueryTransferDetailRequest) Reset() {
	*x = WechatPayQueryTransferDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayQueryTransferDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayQueryTransferDetailRequest) ProtoMessage() {}

func (x *WechatPayQueryTransferDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayQueryTransferDetailRequest.ProtoReflect.Descriptor instead.
func (*WechatPayQueryTransferDetailRequest) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{22}
}

func (x *WechatPayQueryTransferDetailRequest) GetOutBatchNo() string {
	if x != nil {
		return x.OutBatchNo
	}
	return ""
}

func (x *WechatPayQueryTransferDetailRequest) GetOutDetailNo() string {
	if x != nil {
		return x.OutDetailNo
	}
	return ""
}

type WechatPayQueryTransferDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId          string  `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	MchId          string  `protobuf:"bytes,2,opt,name=mch_id,json=mchId,proto3" json:"mch_id,omitempty"`
	OpenId         string  `protobuf:"bytes,3,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	UserName       *string `protobuf:"bytes,4,opt,name=user_name,json=userName,proto3,oneof" json:"user_name,omitempty"`
	BatchId        string  `protobuf:"bytes,11,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	OutBatchNo     string  `protobuf:"bytes,12,opt,name=out_batch_no,json=outBatchNo,proto3" json:"out_batch_no,omitempty"`
	OutDetailNo    string  `protobuf:"bytes,13,opt,name=out_detail_no,json=outDetailNo,proto3" json:"out_detail_no,omitempty"`
	DetailId       string  `protobuf:"bytes,14,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`
	DetailStatus   string  `protobuf:"bytes,15,opt,name=detail_status,json=detailStatus,proto3" json:"detail_status,omitempty"`
	TransferAmount int64   `protobuf:"varint,16,opt,name=transfer_amount,json=transferAmount,proto3" json:"transfer_amount,omitempty"`
	TransferRemark string  `protobuf:"bytes,17,opt,name=transfer_remark,json=transferRemark,proto3" json:"transfer_remark,omitempty"`
	FailReason     *string `protobuf:"bytes,18,opt,name=fail_reason,json=failReason,proto3,oneof" json:"fail_reason,omitempty"`
	InitiateTime   string  `protobuf:"bytes,19,opt,name=initiate_time,json=initiateTime,proto3" json:"initiate_time,omitempty"`
	UpdateTime     string  `protobuf:"bytes,20,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *WechatPayQueryTransferDetailResponse) Reset() {
	*x = WechatPayQueryTransferDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayQueryTransferDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayQueryTransferDetailResponse) ProtoMessage() {}

func (x *WechatPayQueryTransferDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayQueryTransferDetailResponse.ProtoReflect.Descriptor instead.
func (*WechatPayQueryTransferDetailResponse) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{23}
}

func (x *WechatPayQueryTransferDetailResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *WechatPayQueryTransferDetailResponse) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *WechatPayQueryTransferDetailResponse) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *WechatPayQueryTransferDetailResponse) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *WechatPayQueryTransferDetailResponse) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *WechatPayQueryTransferDetailResponse) GetOutBatchNo() string {
	if x != nil {
		return x.OutBatchNo
	}
	return ""
}

func (x *WechatPayQueryTransferDetailResponse) GetOutDetailNo() string {
	if x != nil {
		return x.OutDetailNo
	}
	return ""
}

func (x *WechatPayQueryTransferDetailResponse) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *WechatPayQueryTransferDetailResponse) GetDetailStatus() string {
	if x != nil {
		return x.DetailStatus
	}
	return ""
}

func (x *WechatPayQueryTransferDetailResponse) GetTransferAmount() int64 {
	if x != nil {
		return x.TransferAmount
	}
	return 0
}

func (x *WechatPayQueryTransferDetailResponse) GetTransferRemark() string {
	if x != nil {
		return x.TransferRemark
	}
	return ""
}

func (x *WechatPayQueryTransferDetailResponse) GetFailReason() string {
	if x != nil && x.FailReason != nil {
		return *x.FailReason
	}
	return ""
}

func (x *WechatPayQueryTransferDetailResponse) GetInitiateTime() string {
	if x != nil {
		return x.InitiateTime
	}
	return ""
}

func (x *WechatPayQueryTransferDetailResponse) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type WechatPayPrepayRequest_Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Currency WechatPayCurrency `protobuf:"varint,2,opt,name=currency,proto3,enum=palm.musa.v1.WechatPayCurrency" json:"currency,omitempty"`
}

func (x *WechatPayPrepayRequest_Amount) Reset() {
	*x = WechatPayPrepayRequest_Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayPrepayRequest_Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayPrepayRequest_Amount) ProtoMessage() {}

func (x *WechatPayPrepayRequest_Amount) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayPrepayRequest_Amount.ProtoReflect.Descriptor instead.
func (*WechatPayPrepayRequest_Amount) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{0, 0}
}

func (x *WechatPayPrepayRequest_Amount) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *WechatPayPrepayRequest_Amount) GetCurrency() WechatPayCurrency {
	if x != nil {
		return x.Currency
	}
	return WechatPayCurrency_CNY
}

type WechatPayCreateRefundRequest_Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32             `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Refund   int32             `protobuf:"varint,2,opt,name=refund,proto3" json:"refund,omitempty"`
	Currency WechatPayCurrency `protobuf:"varint,3,opt,name=currency,proto3,enum=palm.musa.v1.WechatPayCurrency" json:"currency,omitempty"`
}

func (x *WechatPayCreateRefundRequest_Amount) Reset() {
	*x = WechatPayCreateRefundRequest_Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayCreateRefundRequest_Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayCreateRefundRequest_Amount) ProtoMessage() {}

func (x *WechatPayCreateRefundRequest_Amount) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayCreateRefundRequest_Amount.ProtoReflect.Descriptor instead.
func (*WechatPayCreateRefundRequest_Amount) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{12, 0}
}

func (x *WechatPayCreateRefundRequest_Amount) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *WechatPayCreateRefundRequest_Amount) GetRefund() int32 {
	if x != nil {
		return x.Refund
	}
	return 0
}

func (x *WechatPayCreateRefundRequest_Amount) GetCurrency() WechatPayCurrency {
	if x != nil {
		return x.Currency
	}
	return WechatPayCurrency_CNY
}

type WechatPayExecuteBatchTransferRequest_Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Remark string  `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark,omitempty"`
	OutNo  *string `protobuf:"bytes,3,opt,name=out_no,json=outNo,proto3,oneof" json:"out_no,omitempty"`
}

func (x *WechatPayExecuteBatchTransferRequest_Batch) Reset() {
	*x = WechatPayExecuteBatchTransferRequest_Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayExecuteBatchTransferRequest_Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayExecuteBatchTransferRequest_Batch) ProtoMessage() {}

func (x *WechatPayExecuteBatchTransferRequest_Batch) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayExecuteBatchTransferRequest_Batch.ProtoReflect.Descriptor instead.
func (*WechatPayExecuteBatchTransferRequest_Batch) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{18, 0}
}

func (x *WechatPayExecuteBatchTransferRequest_Batch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WechatPayExecuteBatchTransferRequest_Batch) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *WechatPayExecuteBatchTransferRequest_Batch) GetOutNo() string {
	if x != nil && x.OutNo != nil {
		return *x.OutNo
	}
	return ""
}

type WechatPayExecuteBatchTransferRequest_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId   string `protobuf:"bytes,1,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Amount   int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Remark   string `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *WechatPayExecuteBatchTransferRequest_Detail) Reset() {
	*x = WechatPayExecuteBatchTransferRequest_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayExecuteBatchTransferRequest_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayExecuteBatchTransferRequest_Detail) ProtoMessage() {}

func (x *WechatPayExecuteBatchTransferRequest_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayExecuteBatchTransferRequest_Detail.ProtoReflect.Descriptor instead.
func (*WechatPayExecuteBatchTransferRequest_Detail) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{18, 1}
}

func (x *WechatPayExecuteBatchTransferRequest_Detail) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *WechatPayExecuteBatchTransferRequest_Detail) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *WechatPayExecuteBatchTransferRequest_Detail) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WechatPayExecuteBatchTransferRequest_Detail) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type WechatPayExecuteBatchTransferResponse_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId      string `protobuf:"bytes,1,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	OutDetailNo string `protobuf:"bytes,2,opt,name=out_detail_no,json=outDetailNo,proto3" json:"out_detail_no,omitempty"`
}

func (x *WechatPayExecuteBatchTransferResponse_Detail) Reset() {
	*x = WechatPayExecuteBatchTransferResponse_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayExecuteBatchTransferResponse_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayExecuteBatchTransferResponse_Detail) ProtoMessage() {}

func (x *WechatPayExecuteBatchTransferResponse_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayExecuteBatchTransferResponse_Detail.ProtoReflect.Descriptor instead.
func (*WechatPayExecuteBatchTransferResponse_Detail) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{19, 0}
}

func (x *WechatPayExecuteBatchTransferResponse_Detail) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *WechatPayExecuteBatchTransferResponse_Detail) GetOutDetailNo() string {
	if x != nil {
		return x.OutDetailNo
	}
	return ""
}

type WechatPayExecuteBatchTransferResponse_Succeeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchId    string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	CreateTime string `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *WechatPayExecuteBatchTransferResponse_Succeeded) Reset() {
	*x = WechatPayExecuteBatchTransferResponse_Succeeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayExecuteBatchTransferResponse_Succeeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayExecuteBatchTransferResponse_Succeeded) ProtoMessage() {}

func (x *WechatPayExecuteBatchTransferResponse_Succeeded) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayExecuteBatchTransferResponse_Succeeded.ProtoReflect.Descriptor instead.
func (*WechatPayExecuteBatchTransferResponse_Succeeded) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{19, 1}
}

func (x *WechatPayExecuteBatchTransferResponse_Succeeded) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *WechatPayExecuteBatchTransferResponse_Succeeded) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

type WechatPayQueryBatchTransferResponse_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetailId    string `protobuf:"bytes,1,opt,name=detail_id,json=detailId,proto3" json:"detail_id,omitempty"`
	OutDetailNo string `protobuf:"bytes,2,opt,name=out_detail_no,json=outDetailNo,proto3" json:"out_detail_no,omitempty"`
	Status      string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *WechatPayQueryBatchTransferResponse_Detail) Reset() {
	*x = WechatPayQueryBatchTransferResponse_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayQueryBatchTransferResponse_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayQueryBatchTransferResponse_Detail) ProtoMessage() {}

func (x *WechatPayQueryBatchTransferResponse_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayQueryBatchTransferResponse_Detail.ProtoReflect.Descriptor instead.
func (*WechatPayQueryBatchTransferResponse_Detail) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{21, 0}
}

func (x *WechatPayQueryBatchTransferResponse_Detail) GetDetailId() string {
	if x != nil {
		return x.DetailId
	}
	return ""
}

func (x *WechatPayQueryBatchTransferResponse_Detail) GetOutDetailNo() string {
	if x != nil {
		return x.OutDetailNo
	}
	return ""
}

func (x *WechatPayQueryBatchTransferResponse_Detail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type WechatPayQueryBatchTransferResponse_Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId           string  `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	MchId           string  `protobuf:"bytes,2,opt,name=mch_id,json=mchId,proto3" json:"mch_id,omitempty"`
	TransferSceneId string  `protobuf:"bytes,9,opt,name=transfer_scene_id,json=transferSceneId,proto3" json:"transfer_scene_id,omitempty"`
	BatchId         string  `protobuf:"bytes,11,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	OutBatchNo      string  `protobuf:"bytes,12,opt,name=out_batch_no,json=outBatchNo,proto3" json:"out_batch_no,omitempty"`
	BatchStatus     string  `protobuf:"bytes,13,opt,name=batch_status,json=batchStatus,proto3" json:"batch_status,omitempty"`
	BatchType       string  `protobuf:"bytes,14,opt,name=batch_type,json=batchType,proto3" json:"batch_type,omitempty"`
	BatchName       string  `protobuf:"bytes,15,opt,name=batch_name,json=batchName,proto3" json:"batch_name,omitempty"`
	BatchRemark     string  `protobuf:"bytes,16,opt,name=batch_remark,json=batchRemark,proto3" json:"batch_remark,omitempty"`
	CloseReason     *string `protobuf:"bytes,21,opt,name=close_reason,json=closeReason,proto3,oneof" json:"close_reason,omitempty"`
	TotalAmount     int64   `protobuf:"varint,22,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	TotalNum        int32   `protobuf:"varint,23,opt,name=total_num,json=totalNum,proto3" json:"total_num,omitempty"`
	CreateTime      *string `protobuf:"bytes,24,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime      *string `protobuf:"bytes,25,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	SuccessAmount   *int64  `protobuf:"varint,26,opt,name=success_amount,json=successAmount,proto3,oneof" json:"success_amount,omitempty"`
	SuccessNum      *int32  `protobuf:"varint,27,opt,name=success_num,json=successNum,proto3,oneof" json:"success_num,omitempty"`
	FailAmount      *int64  `protobuf:"varint,28,opt,name=fail_amount,json=failAmount,proto3,oneof" json:"fail_amount,omitempty"`
	FailNum         *int32  `protobuf:"varint,29,opt,name=fail_num,json=failNum,proto3,oneof" json:"fail_num,omitempty"`
}

func (x *WechatPayQueryBatchTransferResponse_Batch) Reset() {
	*x = WechatPayQueryBatchTransferResponse_Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_musa_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WechatPayQueryBatchTransferResponse_Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WechatPayQueryBatchTransferResponse_Batch) ProtoMessage() {}

func (x *WechatPayQueryBatchTransferResponse_Batch) ProtoReflect() protoreflect.Message {
	mi := &file_musa_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WechatPayQueryBatchTransferResponse_Batch.ProtoReflect.Descriptor instead.
func (*WechatPayQueryBatchTransferResponse_Batch) Descriptor() ([]byte, []int) {
	return file_musa_proto_rawDescGZIP(), []int{21, 1}
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetTransferSceneId() string {
	if x != nil {
		return x.TransferSceneId
	}
	return ""
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetOutBatchNo() string {
	if x != nil {
		return x.OutBatchNo
	}
	return ""
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetBatchStatus() string {
	if x != nil {
		return x.BatchStatus
	}
	return ""
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetBatchType() string {
	if x != nil {
		return x.BatchType
	}
	return ""
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetBatchName() string {
	if x != nil {
		return x.BatchName
	}
	return ""
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetBatchRemark() string {
	if x != nil {
		return x.BatchRemark
	}
	return ""
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetCloseReason() string {
	if x != nil && x.CloseReason != nil {
		return *x.CloseReason
	}
	return ""
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetTotalAmount() int64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetTotalNum() int32 {
	if x != nil {
		return x.TotalNum
	}
	return 0
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetCreateTime() string {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return ""
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetUpdateTime() string {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return ""
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetSuccessAmount() int64 {
	if x != nil && x.SuccessAmount != nil {
		return *x.SuccessAmount
	}
	return 0
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetSuccessNum() int32 {
	if x != nil && x.SuccessNum != nil {
		return *x.SuccessNum
	}
	return 0
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetFailAmount() int64 {
	if x != nil && x.FailAmount != nil {
		return *x.FailAmount
	}
	return 0
}

func (x *WechatPayQueryBatchTransferResponse_Batch) GetFailNum() int32 {
	if x != nil && x.FailNum != nil {
		return *x.FailNum
	}
	return 0
}

var File_musa_proto protoreflect.FileDescriptor

var file_musa_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x03, 0x0a, 0x16, 0x57, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x50, 0x61, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x6f, 0x75, 0x74,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50,
	0x61, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x62, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x73,
	0x74, 0x1a, 0x5b, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x22, 0x56, 0x0a, 0x1a, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x56, 0x0a, 0x20, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x51, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x22, 0x63, 0x0a, 0x16, 0x57, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63, 0x22, 0x47, 0x0a,
	0x1e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x26, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4f,
	0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4e, 0x6f, 0x22, 0xe7, 0x01, 0x0a, 0x1e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79,
	0x4a, 0x73, 0x61, 0x70, 0x69, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x22, 0x4f, 0x0a, 0x11,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0x31, 0x0a,
	0x15, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0xd6, 0x01, 0x0a, 0x19, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x09,
	0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x69, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x0a, 0x08, 0x42,
	0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0xea, 0x01, 0x0a, 0x1c, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x42,
	0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x62, 0x69,
	0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x62, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x42,
	0x69, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x31, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x45, 0x45, 0x53, 0x10, 0x02, 0x22, 0xb9, 0x02, 0x0a, 0x1c, 0x57, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x50, 0x61, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x1a, 0x73, 0x0a,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d,
	0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x22, 0x41, 0x0a, 0x1b, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x22, 0xc4, 0x01, 0x0a, 0x17, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x50, 0x61, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc2, 0x02, 0x0a,
	0x2c, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x45, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d,
	0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4e, 0x6f,
	0x22, 0x4e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54,
	0x4f, 0x5f, 0x50, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x02,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e,
	0x6f, 0x22, 0x3f, 0x0a, 0x23, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x4a, 0x0a, 0x26, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c,
	0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x22, 0xc8,
	0x03, 0x0a, 0x24, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x4e,
	0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x53,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x1a, 0x5a,
	0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x1a, 0x6d, 0x0a, 0x06, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xc6, 0x03, 0x0a, 0x25, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x54, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75,
	0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5d, 0x0a, 0x09, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x45, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75,
	0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x1a, 0x47,
	0x0a, 0x09, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x96, 0x02, 0x0a, 0x22, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x62, 0x0a, 0x0d, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3c, 0x0a,
	0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x09, 0x22, 0x8d, 0x08, 0x0a, 0x23,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x52, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x61, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4e,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xdf, 0x05, 0x0a, 0x05, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x63,
	0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x26,
	0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0d, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x75,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0a, 0x66, 0x61, 0x69,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x66, 0x61,
	0x69, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x07,
	0x66, 0x61, 0x69, 0x6c, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x22, 0x6b, 0x0a, 0x23, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x75, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x22, 0x8e, 0x04, 0x0a, 0x24, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x75, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x24, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2a, 0x1c, 0x0a, 0x11, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x4e, 0x59, 0x10, 0x00, 0x2a, 0x34, 0x0a, 0x15, 0x57, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x50, 0x61, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x2a, 0x1c, 0x0a,
	0x10, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x54, 0x61, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x00, 0x32, 0x73, 0x0a, 0x0f, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x60,
	0x0a, 0x06, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x12, 0x24, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61,
	0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x51, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0xa2, 0x03, 0x0a, 0x0e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x4a, 0x73,
	0x61, 0x70, 0x69, 0x12, 0x5e, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x12, 0x24, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x4a, 0x73, 0x61, 0x70,
	0x69, 0x50, 0x72, 0x65, 0x70, 0x61, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x34, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x28, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xc7, 0x01, 0x0a, 0x0d, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x50, 0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x12, 0x57, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x27, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x42, 0x69,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50,
	0x61, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5d, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x2a, 0x2e, 0x70,
	0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x50, 0x61, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x69, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e,
	0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61,
	0x79, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32,
	0xcd, 0x01, 0x0a, 0x0f, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x12, 0x5d, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e,
	0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50,
	0x61, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75,
	0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32,
	0x82, 0x05, 0x0a, 0x11, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x79, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x32, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x61, 0x6c, 0x6d,
	0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50,
	0x61, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x73, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x30,
	0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d,
	0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12,
	0x34, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x12, 0x3a, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69,
	0x63, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x70, 0x61, 0x6c, 0x6d, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x50, 0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x51, 0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x73, 0x61, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x78, 0x69, 0x76, 0x2e, 0x70, 0x61,
	0x6c, 0x6d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x2e, 0x6d, 0x75, 0x73, 0x61, 0x2e,
	0x76, 0x31, 0x50, 0x01, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x61, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x78, 0x69, 0x76, 0x2f, 0x66, 0x69, 0x67, 0x2f,
	0x6d, 0x75, 0x73, 0x61, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_musa_proto_rawDescOnce sync.Once
	file_musa_proto_rawDescData = file_musa_proto_rawDesc
)

func file_musa_proto_rawDescGZIP() []byte {
	file_musa_proto_rawDescOnce.Do(func() {
		file_musa_proto_rawDescData = protoimpl.X.CompressGZIP(file_musa_proto_rawDescData)
	})
	return file_musa_proto_rawDescData
}

var file_musa_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_musa_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_musa_proto_goTypes = []interface{}{
	(WechatPayCurrency)(0),                                       // 0: palm.musa.v1.WechatPayCurrency
	(WechatPayNotifyAction)(0),                                   // 1: palm.musa.v1.WechatPayNotifyAction
	(WechatPayTarType)(0),                                        // 2: palm.musa.v1.WechatPayTarType
	(WechatPayTradeBillRequest_BillType)(0),                      // 3: palm.musa.v1.WechatPayTradeBillRequest.BillType
	(WechatPayFundFlowBillRequest_AccountType)(0),                // 4: palm.musa.v1.WechatPayFundFlowBillRequest.AccountType
	(WechatPayTransferGetElectronicReceiptRequest_AcceptType)(0), // 5: palm.musa.v1.WechatPayTransferGetElectronicReceiptRequest.AcceptType
	(WechatPayQueryBatchTransferRequest_DetailStatus)(0),         // 6: palm.musa.v1.WechatPayQueryBatchTransferRequest.DetailStatus
	(*WechatPayPrepayRequest)(nil),                               // 7: palm.musa.v1.WechatPayPrepayRequest
	(*WechatPayCloseOrderRequest)(nil),                           // 8: palm.musa.v1.WechatPayCloseOrderRequest
	(*Error)(nil),                                                // 9: palm.musa.v1.Error
	(*WechatPayNativeQrCodeUrlResponse)(nil),                     // 10: palm.musa.v1.WechatPayNativeQrCodeUrlResponse
	(*WechatPayTradeResponse)(nil),                               // 11: palm.musa.v1.WechatPayTradeResponse
	(*WechatPayQueryOrderByIdRequest)(nil),                       // 12: palm.musa.v1.WechatPayQueryOrderByIdRequest
	(*WechatPayQueryOrderByOutTradeNoRequest)(nil),               // 13: palm.musa.v1.WechatPayQueryOrderByOutTradeNoRequest
	(*WechatPayJsapiPrepayIdResponse)(nil),                       // 14: palm.musa.v1.WechatPayJsapiPrepayIdResponse
	(*WechatPayBillDate)(nil),                                    // 15: palm.musa.v1.WechatPayBillDate
	(*WechatPayBillResponse)(nil),                                // 16: palm.musa.v1.WechatPayBillResponse
	(*WechatPayTradeBillRequest)(nil),                            // 17: palm.musa.v1.WechatPayTradeBillRequest
	(*WechatPayFundFlowBillRequest)(nil),                         // 18: palm.musa.v1.WechatPayFundFlowBillRequest
	(*WechatPayCreateRefundRequest)(nil),                         // 19: palm.musa.v1.WechatPayCreateRefundRequest
	(*WechatPayQueryRefundRequest)(nil),                          // 20: palm.musa.v1.WechatPayQueryRefundRequest
	(*WechatPayRefundResponse)(nil),                              // 21: palm.musa.v1.WechatPayRefundResponse
	(*WechatPayTransferGetElectronicReceiptRequest)(nil),         // 22: palm.musa.v1.WechatPayTransferGetElectronicReceiptRequest
	(*WechatPayTransferGetReceiptResponse)(nil),                  // 23: palm.musa.v1.WechatPayTransferGetReceiptResponse
	(*WechatPayTransferGetBillReceiptRequest)(nil),               // 24: palm.musa.v1.WechatPayTransferGetBillReceiptRequest
	(*WechatPayExecuteBatchTransferRequest)(nil),                 // 25: palm.musa.v1.WechatPayExecuteBatchTransferRequest
	(*WechatPayExecuteBatchTransferResponse)(nil),                // 26: palm.musa.v1.WechatPayExecuteBatchTransferResponse
	(*WechatPayQueryBatchTransferRequest)(nil),                   // 27: palm.musa.v1.WechatPayQueryBatchTransferRequest
	(*WechatPayQueryBatchTransferResponse)(nil),                  // 28: palm.musa.v1.WechatPayQueryBatchTransferResponse
	(*WechatPayQueryTransferDetailRequest)(nil),                  // 29: palm.musa.v1.WechatPayQueryTransferDetailRequest
	(*WechatPayQueryTransferDetailResponse)(nil),                 // 30: palm.musa.v1.WechatPayQueryTransferDetailResponse
	(*WechatPayPrepayRequest_Amount)(nil),                        // 31: palm.musa.v1.WechatPayPrepayRequest.Amount
	(*WechatPayCreateRefundRequest_Amount)(nil),                  // 32: palm.musa.v1.WechatPayCreateRefundRequest.Amount
	(*WechatPayExecuteBatchTransferRequest_Batch)(nil),           // 33: palm.musa.v1.WechatPayExecuteBatchTransferRequest.Batch
	(*WechatPayExecuteBatchTransferRequest_Detail)(nil),          // 34: palm.musa.v1.WechatPayExecuteBatchTransferRequest.Detail
	(*WechatPayExecuteBatchTransferResponse_Detail)(nil),         // 35: palm.musa.v1.WechatPayExecuteBatchTransferResponse.Detail
	(*WechatPayExecuteBatchTransferResponse_Succeeded)(nil),      // 36: palm.musa.v1.WechatPayExecuteBatchTransferResponse.Succeeded
	(*WechatPayQueryBatchTransferResponse_Detail)(nil),           // 37: palm.musa.v1.WechatPayQueryBatchTransferResponse.Detail
	(*WechatPayQueryBatchTransferResponse_Batch)(nil),            // 38: palm.musa.v1.WechatPayQueryBatchTransferResponse.Batch
	(*emptypb.Empty)(nil),                                        // 39: google.protobuf.Empty
}
var file_musa_proto_depIdxs = []int32{
	31, // 0: palm.musa.v1.WechatPayPrepayRequest.amount:type_name -> palm.musa.v1.WechatPayPrepayRequest.Amount
	15, // 1: palm.musa.v1.WechatPayTradeBillRequest.bill_date:type_name -> palm.musa.v1.WechatPayBillDate
	3,  // 2: palm.musa.v1.WechatPayTradeBillRequest.bill_type:type_name -> palm.musa.v1.WechatPayTradeBillRequest.BillType
	15, // 3: palm.musa.v1.WechatPayFundFlowBillRequest.bill_date:type_name -> palm.musa.v1.WechatPayBillDate
	4,  // 4: palm.musa.v1.WechatPayFundFlowBillRequest.account_type:type_name -> palm.musa.v1.WechatPayFundFlowBillRequest.AccountType
	32, // 5: palm.musa.v1.WechatPayCreateRefundRequest.amount:type_name -> palm.musa.v1.WechatPayCreateRefundRequest.Amount
	5,  // 6: palm.musa.v1.WechatPayTransferGetElectronicReceiptRequest.accept_type:type_name -> palm.musa.v1.WechatPayTransferGetElectronicReceiptRequest.AcceptType
	33, // 7: palm.musa.v1.WechatPayExecuteBatchTransferRequest.batch:type_name -> palm.musa.v1.WechatPayExecuteBatchTransferRequest.Batch
	34, // 8: palm.musa.v1.WechatPayExecuteBatchTransferRequest.details:type_name -> palm.musa.v1.WechatPayExecuteBatchTransferRequest.Detail
	35, // 9: palm.musa.v1.WechatPayExecuteBatchTransferResponse.details:type_name -> palm.musa.v1.WechatPayExecuteBatchTransferResponse.Detail
	36, // 10: palm.musa.v1.WechatPayExecuteBatchTransferResponse.succeeded:type_name -> palm.musa.v1.WechatPayExecuteBatchTransferResponse.Succeeded
	9,  // 11: palm.musa.v1.WechatPayExecuteBatchTransferResponse.error:type_name -> palm.musa.v1.Error
	6,  // 12: palm.musa.v1.WechatPayQueryBatchTransferRequest.detail_status:type_name -> palm.musa.v1.WechatPayQueryBatchTransferRequest.DetailStatus
	38, // 13: palm.musa.v1.WechatPayQueryBatchTransferResponse.batch:type_name -> palm.musa.v1.WechatPayQueryBatchTransferResponse.Batch
	37, // 14: palm.musa.v1.WechatPayQueryBatchTransferResponse.details:type_name -> palm.musa.v1.WechatPayQueryBatchTransferResponse.Detail
	0,  // 15: palm.musa.v1.WechatPayPrepayRequest.Amount.currency:type_name -> palm.musa.v1.WechatPayCurrency
	0,  // 16: palm.musa.v1.WechatPayCreateRefundRequest.Amount.currency:type_name -> palm.musa.v1.WechatPayCurrency
	7,  // 17: palm.musa.v1.WechatPayNative.Prepay:input_type -> palm.musa.v1.WechatPayPrepayRequest
	7,  // 18: palm.musa.v1.WechatPayJsapi.Prepay:input_type -> palm.musa.v1.WechatPayPrepayRequest
	13, // 19: palm.musa.v1.WechatPayJsapi.QueryOrderByOutTradeNo:input_type -> palm.musa.v1.WechatPayQueryOrderByOutTradeNoRequest
	12, // 20: palm.musa.v1.WechatPayJsapi.QueryOrderById:input_type -> palm.musa.v1.WechatPayQueryOrderByIdRequest
	8,  // 21: palm.musa.v1.WechatPayJsapi.CloseOrder:input_type -> palm.musa.v1.WechatPayCloseOrderRequest
	17, // 22: palm.musa.v1.WechatPayBill.Trade:input_type -> palm.musa.v1.WechatPayTradeBillRequest
	18, // 23: palm.musa.v1.WechatPayBill.FundFlow:input_type -> palm.musa.v1.WechatPayFundFlowBillRequest
	19, // 24: palm.musa.v1.WechatPayRefund.Create:input_type -> palm.musa.v1.WechatPayCreateRefundRequest
	20, // 25: palm.musa.v1.WechatPayRefund.Query:input_type -> palm.musa.v1.WechatPayQueryRefundRequest
	25, // 26: palm.musa.v1.WechatPayTransfer.ExecuteBatch:input_type -> palm.musa.v1.WechatPayExecuteBatchTransferRequest
	27, // 27: palm.musa.v1.WechatPayTransfer.QueryBatch:input_type -> palm.musa.v1.WechatPayQueryBatchTransferRequest
	29, // 28: palm.musa.v1.WechatPayTransfer.QueryDetail:input_type -> palm.musa.v1.WechatPayQueryTransferDetailRequest
	24, // 29: palm.musa.v1.WechatPayTransfer.GetBillReceipt:input_type -> palm.musa.v1.WechatPayTransferGetBillReceiptRequest
	22, // 30: palm.musa.v1.WechatPayTransfer.GetElectronicReceipt:input_type -> palm.musa.v1.WechatPayTransferGetElectronicReceiptRequest
	10, // 31: palm.musa.v1.WechatPayNative.Prepay:output_type -> palm.musa.v1.WechatPayNativeQrCodeUrlResponse
	14, // 32: palm.musa.v1.WechatPayJsapi.Prepay:output_type -> palm.musa.v1.WechatPayJsapiPrepayIdResponse
	11, // 33: palm.musa.v1.WechatPayJsapi.QueryOrderByOutTradeNo:output_type -> palm.musa.v1.WechatPayTradeResponse
	11, // 34: palm.musa.v1.WechatPayJsapi.QueryOrderById:output_type -> palm.musa.v1.WechatPayTradeResponse
	39, // 35: palm.musa.v1.WechatPayJsapi.CloseOrder:output_type -> google.protobuf.Empty
	16, // 36: palm.musa.v1.WechatPayBill.Trade:output_type -> palm.musa.v1.WechatPayBillResponse
	16, // 37: palm.musa.v1.WechatPayBill.FundFlow:output_type -> palm.musa.v1.WechatPayBillResponse
	21, // 38: palm.musa.v1.WechatPayRefund.Create:output_type -> palm.musa.v1.WechatPayRefundResponse
	21, // 39: palm.musa.v1.WechatPayRefund.Query:output_type -> palm.musa.v1.WechatPayRefundResponse
	26, // 40: palm.musa.v1.WechatPayTransfer.ExecuteBatch:output_type -> palm.musa.v1.WechatPayExecuteBatchTransferResponse
	28, // 41: palm.musa.v1.WechatPayTransfer.QueryBatch:output_type -> palm.musa.v1.WechatPayQueryBatchTransferResponse
	30, // 42: palm.musa.v1.WechatPayTransfer.QueryDetail:output_type -> palm.musa.v1.WechatPayQueryTransferDetailResponse
	23, // 43: palm.musa.v1.WechatPayTransfer.GetBillReceipt:output_type -> palm.musa.v1.WechatPayTransferGetReceiptResponse
	23, // 44: palm.musa.v1.WechatPayTransfer.GetElectronicReceipt:output_type -> palm.musa.v1.WechatPayTransferGetReceiptResponse
	31, // [31:45] is the sub-list for method output_type
	17, // [17:31] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_musa_proto_init() }
func file_musa_proto_init() {
	if File_musa_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_musa_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayPrepayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayCloseOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayNativeQrCodeUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayQueryOrderByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayQueryOrderByOutTradeNoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayJsapiPrepayIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayBillDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayBillResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayTradeBillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayFundFlowBillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayCreateRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayQueryRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayTransferGetElectronicReceiptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayTransferGetReceiptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayTransferGetBillReceiptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayExecuteBatchTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayExecuteBatchTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayQueryBatchTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayQueryBatchTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayQueryTransferDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayQueryTransferDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayPrepayRequest_Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayCreateRefundRequest_Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayExecuteBatchTransferRequest_Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayExecuteBatchTransferRequest_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayExecuteBatchTransferResponse_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayExecuteBatchTransferResponse_Succeeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayQueryBatchTransferResponse_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_musa_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WechatPayQueryBatchTransferResponse_Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_musa_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_musa_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_musa_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*WechatPayExecuteBatchTransferResponse_Succeeded_)(nil),
		(*WechatPayExecuteBatchTransferResponse_Error)(nil),
	}
	file_musa_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_musa_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_musa_proto_msgTypes[31].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_musa_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_musa_proto_goTypes,
		DependencyIndexes: file_musa_proto_depIdxs,
		EnumInfos:         file_musa_proto_enumTypes,
		MessageInfos:      file_musa_proto_msgTypes,
	}.Build()
	File_musa_proto = out.File
	file_musa_proto_rawDesc = nil
	file_musa_proto_goTypes = nil
	file_musa_proto_depIdxs = nil
}
